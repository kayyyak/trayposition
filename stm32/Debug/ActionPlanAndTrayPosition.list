
ActionPlanAndTrayPosition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08007a90  08007a90  00017a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008328  08008328  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008330  08008330  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08008338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  20000258  0800858c  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000db4  0800858c  00020db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138a8  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276f  00000000  00000000  00033b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000362a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00037138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb2  00000000  00000000  00037ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fc7  00000000  00000000  00050e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db3c  00000000  00000000  00063e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101975  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f14  00000000  00000000  001019c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000258 	.word	0x20000258
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007a74 	.word	0x08007a74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000025c 	.word	0x2000025c
 80001d4:	08007a74 	.word	0x08007a74

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b974 	b.w	8000e24 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	468e      	mov	lr, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d14d      	bne.n	8000bfe <__udivmoddi4+0xaa>
 8000b62:	428a      	cmp	r2, r1
 8000b64:	4694      	mov	ip, r2
 8000b66:	d969      	bls.n	8000c3c <__udivmoddi4+0xe8>
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b152      	cbz	r2, 8000b84 <__udivmoddi4+0x30>
 8000b6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b72:	f1c2 0120 	rsb	r1, r2, #32
 8000b76:	fa20 f101 	lsr.w	r1, r0, r1
 8000b7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b82:	4094      	lsls	r4, r2
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	0c21      	lsrs	r1, r4, #16
 8000b8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b8e:	fa1f f78c 	uxth.w	r7, ip
 8000b92:	fb08 e316 	mls	r3, r8, r6, lr
 8000b96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b9a:	fb06 f107 	mul.w	r1, r6, r7
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d90a      	bls.n	8000bb8 <__udivmoddi4+0x64>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000baa:	f080 811f 	bcs.w	8000dec <__udivmoddi4+0x298>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 811c 	bls.w	8000dec <__udivmoddi4+0x298>
 8000bb4:	3e02      	subs	r6, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb00 f707 	mul.w	r7, r0, r7
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x92>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd8:	f080 810a 	bcs.w	8000df0 <__udivmoddi4+0x29c>
 8000bdc:	42a7      	cmp	r7, r4
 8000bde:	f240 8107 	bls.w	8000df0 <__udivmoddi4+0x29c>
 8000be2:	4464      	add	r4, ip
 8000be4:	3802      	subs	r0, #2
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	1be4      	subs	r4, r4, r7
 8000bec:	2600      	movs	r6, #0
 8000bee:	b11d      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0xc2>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	f000 80ef 	beq.w	8000de6 <__udivmoddi4+0x292>
 8000c08:	2600      	movs	r6, #0
 8000c0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f683 	clz	r6, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d14a      	bne.n	8000cb4 <__udivmoddi4+0x160>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xd4>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80f9 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	469e      	mov	lr, r3
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d0e0      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c3a:	e7dd      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c3c:	b902      	cbnz	r2, 8000c40 <__udivmoddi4+0xec>
 8000c3e:	deff      	udf	#255	; 0xff
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f040 8092 	bne.w	8000d6e <__udivmoddi4+0x21a>
 8000c4a:	eba1 010c 	sub.w	r1, r1, ip
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2601      	movs	r6, #1
 8000c58:	0c20      	lsrs	r0, r4, #16
 8000c5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c66:	fb0e f003 	mul.w	r0, lr, r3
 8000c6a:	4288      	cmp	r0, r1
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x12c>
 8000c6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x12a>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	1a09      	subs	r1, r1, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c88:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x156>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x154>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2ca>
 8000ca8:	4608      	mov	r0, r1
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cb2:	e79c      	b.n	8000bee <__udivmoddi4+0x9a>
 8000cb4:	f1c6 0720 	rsb	r7, r6, #32
 8000cb8:	40b3      	lsls	r3, r6
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cca:	431c      	orrs	r4, r3
 8000ccc:	40f9      	lsrs	r1, r7
 8000cce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cda:	0c20      	lsrs	r0, r4, #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ce4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cec:	4288      	cmp	r0, r1
 8000cee:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2bc>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2bc>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	1a09      	subs	r1, r1, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d14:	fb09 1110 	mls	r1, r9, r0, r1
 8000d18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d20:	458e      	cmp	lr, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1e2>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2b4>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2b4>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d3e:	eba1 010e 	sub.w	r1, r1, lr
 8000d42:	42a1      	cmp	r1, r4
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46a6      	mov	lr, r4
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x2a4>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x2a0>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x212>
 8000d4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d52:	eb61 010e 	sbc.w	r1, r1, lr
 8000d56:	fa01 f707 	lsl.w	r7, r1, r7
 8000d5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d5e:	40f1      	lsrs	r1, r6
 8000d60:	431f      	orrs	r7, r3
 8000d62:	e9c5 7100 	strd	r7, r1, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	40d8      	lsrs	r0, r3
 8000d74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d78:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4301      	orrs	r1, r0
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d90:	0c0b      	lsrs	r3, r1, #16
 8000d92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d96:	fb00 f60e 	mul.w	r6, r0, lr
 8000d9a:	429e      	cmp	r6, r3
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x260>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b8>
 8000dac:	429e      	cmp	r6, r3
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b8>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	1b9b      	subs	r3, r3, r6
 8000db6:	b289      	uxth	r1, r1
 8000db8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x28a>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2b0>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2b0>
 8000dda:	3e02      	subs	r6, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	1ac9      	subs	r1, r1, r3
 8000de0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0x104>
 8000de6:	462e      	mov	r6, r5
 8000de8:	4628      	mov	r0, r5
 8000dea:	e705      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000dec:	4606      	mov	r6, r0
 8000dee:	e6e3      	b.n	8000bb8 <__udivmoddi4+0x64>
 8000df0:	4618      	mov	r0, r3
 8000df2:	e6f8      	b.n	8000be6 <__udivmoddi4+0x92>
 8000df4:	454b      	cmp	r3, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f8>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f8>
 8000e04:	4646      	mov	r6, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x28a>
 8000e08:	4620      	mov	r0, r4
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1e2>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x260>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b8>
 8000e14:	3b02      	subs	r3, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x12c>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e709      	b.n	8000c32 <__udivmoddi4+0xde>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x156>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <modbus_1t5_Timeout+0x1c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2201      	movs	r2, #1
 8000e36:	751a      	strb	r2, [r3, #20]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000274 	.word	0x20000274

08000e48 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <modbus_3t5_Timeout+0x1c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	755a      	strb	r2, [r3, #21]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000274 	.word	0x20000274

08000e68 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000e82:	1c59      	adds	r1, r3, #1
 8000e84:	b289      	uxth	r1, r1
 8000e86:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000e8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e8e:	d210      	bcs.n	8000eb2 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68d8      	ldr	r0, [r3, #12]
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000ea2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4619      	mov	r1, r3
 8000eae:	f005 f997 	bl	80061e0 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000274 	.word	0x20000274

08000ecc <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <Modbus_init+0x9c>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <Modbus_init+0x9c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <Modbus_init+0x9c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <Modbus_init+0xa0>)
 8000eec:	2114      	movs	r1, #20
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fb28 	bl	8005544 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <Modbus_init+0x9c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <Modbus_init+0xa4>)
 8000efc:	210e      	movs	r1, #14
 8000efe:	4618      	mov	r0, r3
 8000f00:	f004 fb20 	bl	8005544 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <Modbus_init+0x9c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <Modbus_init+0xa8>)
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 f8be 	bl	8006090 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <Modbus_init+0x9c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68d8      	ldr	r0, [r3, #12]
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <Modbus_init+0x9c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <Modbus_init+0x9c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f26:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	f005 f955 	bl	80061e0 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <Modbus_init+0x9c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d10c      	bne.n	8000f60 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <Modbus_init+0x9c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fcdb 	bl	8004908 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <Modbus_init+0x9c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 ff1a 	bl	8004d94 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000274 	.word	0x20000274
 8000f6c:	08000e29 	.word	0x08000e29
 8000f70:	08000e49 	.word	0x08000e49
 8000f74:	08000e69 	.word	0x08000e69

08000f78 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000f84:	23ff      	movs	r3, #255	; 0xff
 8000f86:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000f8c:	e013      	b.n	8000fb6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	4053      	eors	r3, r2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <CRC16+0x64>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4053      	eors	r3, r2
 8000faa:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <CRC16+0x68>)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000fb6:	883b      	ldrh	r3, [r7, #0]
 8000fb8:	1e5a      	subs	r2, r3, #1
 8000fba:	803a      	strh	r2, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1e6      	bne.n	8000f8e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b29b      	uxth	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20000100 	.word	0x20000100
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000fea:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d80a      	bhi.n	800100c <Modbus_Protocal_Worker+0x28>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <Modbus_Protocal_Worker+0x18>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	08001017 	.word	0x08001017
 8001000:	080011b7 	.word	0x080011b7
 8001004:	080010a3 	.word	0x080010a3
 8001008:	080010c9 	.word	0x080010c9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800100c:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	761a      	strb	r2, [r3, #24]
		break;
 8001014:	e0e8      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001022:	f000 f9dd 	bl	80013e0 <Modbus_Emission>
 8001026:	e01c      	b.n	8001062 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001028:	4b71      	ldr	r3, [pc, #452]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	7d9b      	ldrb	r3, [r3, #22]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d017      	beq.n	8001062 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001032:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800103a:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001042:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0201 	orr.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800105a:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2203      	movs	r2, #3
 8001060:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001062:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b20      	cmp	r3, #32
 8001070:	f040 80b3 	bne.w	80011da <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001074:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68d8      	ldr	r0, [r3, #12]
 8001084:	4b5a      	ldr	r3, [pc, #360]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001090:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001094:	4413      	add	r3, r2
 8001096:	3302      	adds	r3, #2
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	f005 f8a0 	bl	80061e0 <HAL_UART_Receive_IT>
		}
		break;
 80010a0:	e09b      	b.n	80011da <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	7d1b      	ldrb	r3, [r3, #20]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 8098 	beq.w	80011de <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80010ae:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	22fe      	movs	r2, #254	; 0xfe
 80010bc:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80010be:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2204      	movs	r2, #4
 80010c4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80010c6:	e08a      	b.n	80011de <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80010c8:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7d9b      	ldrb	r3, [r3, #22]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d103      	bne.n	80010e6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80010e6:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80010ee:	f113 0f02 	cmn.w	r3, #2
 80010f2:	d150      	bne.n	8001196 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80010f4:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	3b02      	subs	r3, #2
 800110e:	4619      	mov	r1, r3
 8001110:	4610      	mov	r0, r2
 8001112:	f7ff ff31 	bl	8000f78 <CRC16>
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800111a:	793a      	ldrb	r2, [r7, #4]
 800111c:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001128:	3b02      	subs	r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001130:	429a      	cmp	r2, r3
 8001132:	d10c      	bne.n	800114e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001134:	797a      	ldrb	r2, [r7, #5]
 8001136:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001142:	3b01      	subs	r3, #1
 8001144:	440b      	add	r3, r1
 8001146:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800114a:	429a      	cmp	r2, r3
 800114c:	d004      	beq.n	8001158 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	75da      	strb	r2, [r3, #23]
				break;
 8001156:	e047      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d113      	bne.n	8001192 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800117a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001184:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001186:	461a      	mov	r2, r3
 8001188:	f006 f9e6 	bl	8007558 <memcpy>

			//execute command
			Modbus_frame_response();
 800118c:	f000 f910 	bl	80013b0 <Modbus_frame_response>
 8001190:	e001      	b.n	8001196 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001192:	bf00      	nop
					}
		break;


	}
}
 8001194:	e028      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	7d5b      	ldrb	r3, [r3, #21]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2201      	movs	r2, #1
 80011a6:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 f8c4 	bl	800633c <HAL_UART_AbortReceive>
		break;
 80011b4:	e015      	b.n	80011e2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	d10f      	bne.n	80011e6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2201      	movs	r2, #1
 80011d6:	761a      	strb	r2, [r3, #24]
		break;
 80011d8:	e005      	b.n	80011e6 <Modbus_Protocal_Worker+0x202>
		break;
 80011da:	bf00      	nop
 80011dc:	e004      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
		break;
 80011de:	bf00      	nop
 80011e0:	e002      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
		break;
 80011e2:	bf00      	nop
 80011e4:	e000      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
		break;
 80011e6:	bf00      	nop
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000274 	.word	0x20000274

080011f4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <modbusWrite1Register+0x80>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	7e9b      	ldrb	r3, [r3, #26]
 8001200:	b29b      	uxth	r3, r3
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <modbusWrite1Register+0x80>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	7edb      	ldrb	r3, [r3, #27]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <modbusWrite1Register+0x80>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	429a      	cmp	r2, r3
 800121c:	d903      	bls.n	8001226 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800121e:	2002      	movs	r0, #2
 8001220:	f000 f8a4 	bl	800136c <ModbusErrorReply>
			 return;
 8001224:	e023      	b.n	800126e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <modbusWrite1Register+0x80>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <modbusWrite1Register+0x80>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	440b      	add	r3, r1
 8001236:	7f12      	ldrb	r2, [r2, #28]
 8001238:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <modbusWrite1Register+0x80>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <modbusWrite1Register+0x80>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6859      	ldr	r1, [r3, #4]
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	440b      	add	r3, r1
 800124a:	7f52      	ldrb	r2, [r2, #29]
 800124c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <modbusWrite1Register+0x80>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <modbusWrite1Register+0x80>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800125c:	2208      	movs	r2, #8
 800125e:	4619      	mov	r1, r3
 8001260:	f006 f97a 	bl	8007558 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <modbusWrite1Register+0x80>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2205      	movs	r2, #5
 800126a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000274 	.word	0x20000274

08001278 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <modbusRead1Register+0xf0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	7f1b      	ldrb	r3, [r3, #28]
 8001284:	b29b      	uxth	r3, r3
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <modbusRead1Register+0xf0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	7f5b      	ldrb	r3, [r3, #29]
 8001290:	b29b      	uxth	r3, r3
 8001292:	4413      	add	r3, r2
 8001294:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <modbusRead1Register+0xf0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7e9b      	ldrb	r3, [r3, #26]
 800129c:	b29b      	uxth	r3, r3
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <modbusRead1Register+0xf0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	7edb      	ldrb	r3, [r3, #27]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <modbusRead1Register+0x42>
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	2b7d      	cmp	r3, #125	; 0x7d
 80012b8:	d903      	bls.n	80012c2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f000 f856 	bl	800136c <ModbusErrorReply>
		 return;
 80012c0:	e04e      	b.n	8001360 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012c2:	88ba      	ldrh	r2, [r7, #4]
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <modbusRead1Register+0xf0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d808      	bhi.n	80012e0 <modbusRead1Register+0x68>
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4413      	add	r3, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <modbusRead1Register+0xf0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d903      	bls.n	80012e8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012e0:	2002      	movs	r0, #2
 80012e2:	f000 f843 	bl	800136c <ModbusErrorReply>
		 return;
 80012e6:	e03b      	b.n	8001360 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <modbusRead1Register+0xf0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2203      	movs	r2, #3
 80012ee:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <modbusRead1Register+0xf0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	0052      	lsls	r2, r2, #1
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001302:	2400      	movs	r4, #0
 8001304:	e020      	b.n	8001348 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	4423      	add	r3, r4
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	18d1      	adds	r1, r2, r3
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <modbusRead1Register+0xf0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	1c63      	adds	r3, r4, #1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	7849      	ldrb	r1, [r1, #1]
 800131e:	4413      	add	r3, r2
 8001320:	460a      	mov	r2, r1
 8001322:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <modbusRead1Register+0xf0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	4423      	add	r3, r4
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	18d1      	adds	r1, r2, r3
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <modbusRead1Register+0xf0>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	0063      	lsls	r3, r4, #1
 800133a:	3303      	adds	r3, #3
 800133c:	7809      	ldrb	r1, [r1, #0]
 800133e:	4413      	add	r3, r2
 8001340:	460a      	mov	r2, r1
 8001342:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001346:	3401      	adds	r4, #1
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	429c      	cmp	r4, r3
 800134c:	dbdb      	blt.n	8001306 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	3301      	adds	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <modbusRead1Register+0xf0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0052      	lsls	r2, r2, #1
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000274 	.word	0x20000274

0800136c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <ModbusErrorReply+0x40>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7e5a      	ldrb	r2, [r3, #25]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <ModbusErrorReply+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <ModbusErrorReply+0x40>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <ModbusErrorReply+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2202      	movs	r2, #2
 800139a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000274 	.word	0x20000274

080013b0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <Modbus_frame_response+0x2c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	7e5b      	ldrb	r3, [r3, #25]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d004      	beq.n	80013c8 <Modbus_frame_response+0x18>
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d105      	bne.n	80013ce <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013c2:	f7ff ff17 	bl	80011f4 <modbusWrite1Register>
		break;
 80013c6:	e006      	b.n	80013d6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013c8:	f7ff ff56 	bl	8001278 <modbusRead1Register>
		break;
 80013cc:	e003      	b.n	80013d6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ffcc 	bl	800136c <ModbusErrorReply>
		break;
 80013d4:	bf00      	nop

	}
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000274 	.word	0x20000274

080013e0 <Modbus_Emission>:

void Modbus_Emission()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <Modbus_Emission+0xfc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d15e      	bne.n	80014b4 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <Modbus_Emission+0xfc>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <Modbus_Emission+0xfc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <Modbus_Emission+0xfc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 800140c:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <Modbus_Emission+0xfc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <Modbus_Emission+0xfc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800141e:	461a      	mov	r2, r3
 8001420:	f006 f89a 	bl	8007558 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <Modbus_Emission+0xfc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <Modbus_Emission+0xfc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3203      	adds	r2, #3
 8001434:	b292      	uxth	r2, r2
 8001436:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <Modbus_Emission+0xfc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <Modbus_Emission+0xfc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800144a:	3b02      	subs	r3, #2
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f7ff fd92 	bl	8000f78 <CRC16>
 8001454:	4603      	mov	r3, r0
 8001456:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <Modbus_Emission+0xfc>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <Modbus_Emission+0xfc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001464:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001466:	7939      	ldrb	r1, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	460a      	mov	r2, r1
 800146c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <Modbus_Emission+0xfc>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <Modbus_Emission+0xfc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800147c:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800147e:	7979      	ldrb	r1, [r7, #5]
 8001480:	4413      	add	r3, r2
 8001482:	460a      	mov	r2, r1
 8001484:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <Modbus_Emission+0xfc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b20      	cmp	r3, #32
 8001496:	d10d      	bne.n	80014b4 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <Modbus_Emission+0xfc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <Modbus_Emission+0xfc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <Modbus_Emission+0xfc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014aa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014ae:	461a      	mov	r2, r3
 80014b0:	f004 fec6 	bl	8006240 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <Modbus_Emission+0xfc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <Modbus_Emission+0xfc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <Modbus_Emission+0xfc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <Modbus_Emission+0xfc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2202      	movs	r2, #2
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000274 	.word	0x20000274

080014e0 <GetJoystickXYaxisValue>:
extern void HAL_TIM_PeriodElasedCallback(TIM_HandleTypeDef *htim);

extern TIM_HandleTypeDef htim5;

void GetJoystickXYaxisValue()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
	int before;
	unsigned long StartTime = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
	unsigned long currentTime = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]

	JoyStickSwitch = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80014ee:	2102      	movs	r1, #2
 80014f0:	485c      	ldr	r0, [pc, #368]	; (8001664 <GetJoystickXYaxisValue+0x184>)
 80014f2:	f002 fc89 	bl	8003e08 <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <GetJoystickXYaxisValue+0x188>)
 80014fc:	601a      	str	r2, [r3, #0]

	if (JoyStickSwitch == 0)
 80014fe:	4b5a      	ldr	r3, [pc, #360]	; (8001668 <GetJoystickXYaxisValue+0x188>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d13a      	bne.n	800157c <GetJoystickXYaxisValue+0x9c>
	{
		if (before == 1 && JoyStickSwitch == 0)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10c      	bne.n	8001526 <GetJoystickXYaxisValue+0x46>
 800150c:	4b56      	ldr	r3, [pc, #344]	; (8001668 <GetJoystickXYaxisValue+0x188>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d108      	bne.n	8001526 <GetJoystickXYaxisValue+0x46>
		{
			// Keep encoder position xy
			registerFrame[32].U16 = 0; //encoderx
 8001514:	4b55      	ldr	r3, [pc, #340]	; (800166c <GetJoystickXYaxisValue+0x18c>)
 8001516:	2200      	movs	r2, #0
 8001518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[33].U16 = 0; //encodery
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <GetJoystickXYaxisValue+0x18c>)
 800151e:	2200      	movs	r2, #0
 8001520:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8001524:	e026      	b.n	8001574 <GetJoystickXYaxisValue+0x94>
		}
		else if (before == 0 && JoyStickSwitch == 0)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d123      	bne.n	8001574 <GetJoystickXYaxisValue+0x94>
 800152c:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <GetJoystickXYaxisValue+0x188>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d11f      	bne.n	8001574 <GetJoystickXYaxisValue+0x94>
		{
			if (before == 1)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d109      	bne.n	800154e <GetJoystickXYaxisValue+0x6e>
			{
				StartTime = micros();
 800153a:	f000 f907 	bl	800174c <micros>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4613      	mov	r3, r2
 8001544:	60bb      	str	r3, [r7, #8]
				JoyStickSwitch = 0;
 8001546:	4b48      	ldr	r3, [pc, #288]	; (8001668 <GetJoystickXYaxisValue+0x188>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e012      	b.n	8001574 <GetJoystickXYaxisValue+0x94>
			}
			else
			{
				currentTime = micros();
 800154e:	f000 f8fd 	bl	800174c <micros>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4613      	mov	r3, r2
 8001558:	607b      	str	r3, [r7, #4]
				if ((currentTime - StartTime) >= 2000000)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	4a43      	ldr	r2, [pc, #268]	; (8001670 <GetJoystickXYaxisValue+0x190>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d906      	bls.n	8001574 <GetJoystickXYaxisValue+0x94>
				{
					//set home and encoder x y = 0
					registerFrame[1].U16 = 2; //encoderx //set home x-axis
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <GetJoystickXYaxisValue+0x18c>)
 8001568:	2202      	movs	r2, #2
 800156a:	805a      	strh	r2, [r3, #2]
					registerFrame[33].U16 = 0; //encodery
 800156c:	4b3f      	ldr	r3, [pc, #252]	; (800166c <GetJoystickXYaxisValue+0x18c>)
 800156e:	2200      	movs	r2, #0
 8001570:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				}
			}
		}before = JoyStickSwitch;
 8001574:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <GetJoystickXYaxisValue+0x188>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	e002      	b.n	8001582 <GetJoystickXYaxisValue+0xa2>
	}
	else
	{
		JoyStickSwitch = 1;
 800157c:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <GetJoystickXYaxisValue+0x188>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
	}

	for(int i = 0; i < 20; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e060      	b.n	800164a <GetJoystickXYaxisValue+0x16a>
	{
		if(i % 2 == 0)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d127      	bne.n	80015e2 <GetJoystickXYaxisValue+0x102>
		{
			IN1[i/2] = adcRawData[i];
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0fda      	lsrs	r2, r3, #31
 8001596:	4413      	add	r3, r2
 8001598:	105b      	asrs	r3, r3, #1
 800159a:	4619      	mov	r1, r3
 800159c:	4a35      	ldr	r2, [pc, #212]	; (8001674 <GetJoystickXYaxisValue+0x194>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	4a34      	ldr	r2, [pc, #208]	; (8001678 <GetJoystickXYaxisValue+0x198>)
 80015a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			Y_axis += IN1[i/2];
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	0fda      	lsrs	r2, r3, #31
 80015ae:	4413      	add	r3, r2
 80015b0:	105b      	asrs	r3, r3, #1
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <GetJoystickXYaxisValue+0x198>)
 80015b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ba:	4a30      	ldr	r2, [pc, #192]	; (800167c <GetJoystickXYaxisValue+0x19c>)
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b2e      	ldr	r3, [pc, #184]	; (800167c <GetJoystickXYaxisValue+0x19c>)
 80015c4:	601a      	str	r2, [r3, #0]
			if(i == 18){joystickYaxis = Y_axis/10;}
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d13b      	bne.n	8001644 <GetJoystickXYaxisValue+0x164>
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <GetJoystickXYaxisValue+0x19c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a2b      	ldr	r2, [pc, #172]	; (8001680 <GetJoystickXYaxisValue+0x1a0>)
 80015d2:	fb82 1203 	smull	r1, r2, r2, r3
 80015d6:	1092      	asrs	r2, r2, #2
 80015d8:	17db      	asrs	r3, r3, #31
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	4a29      	ldr	r2, [pc, #164]	; (8001684 <GetJoystickXYaxisValue+0x1a4>)
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e030      	b.n	8001644 <GetJoystickXYaxisValue+0x164>
		}
		else if(i % 2 == 1)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	bfb8      	it	lt
 80015ec:	425b      	neglt	r3, r3
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d128      	bne.n	8001644 <GetJoystickXYaxisValue+0x164>
		{
			IN0[(i-1)/2] = adcRawData[i];
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	0fda      	lsrs	r2, r3, #31
 80015f8:	4413      	add	r3, r2
 80015fa:	105b      	asrs	r3, r3, #1
 80015fc:	4619      	mov	r1, r3
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <GetJoystickXYaxisValue+0x194>)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	4a20      	ldr	r2, [pc, #128]	; (8001688 <GetJoystickXYaxisValue+0x1a8>)
 8001608:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			X_axis += IN0[(i-1)/2];
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	0fda      	lsrs	r2, r3, #31
 8001612:	4413      	add	r3, r2
 8001614:	105b      	asrs	r3, r3, #1
 8001616:	461a      	mov	r2, r3
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <GetJoystickXYaxisValue+0x1a8>)
 800161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <GetJoystickXYaxisValue+0x1ac>)
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	4413      	add	r3, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <GetJoystickXYaxisValue+0x1ac>)
 8001628:	601a      	str	r2, [r3, #0]
			if(i == 19){joystickXaxis = X_axis/10;}
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b13      	cmp	r3, #19
 800162e:	d109      	bne.n	8001644 <GetJoystickXYaxisValue+0x164>
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <GetJoystickXYaxisValue+0x1ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <GetJoystickXYaxisValue+0x1a0>)
 8001636:	fb82 1203 	smull	r1, r2, r2, r3
 800163a:	1092      	asrs	r2, r2, #2
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <GetJoystickXYaxisValue+0x1b0>)
 8001642:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 20; i++)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b13      	cmp	r3, #19
 800164e:	dd9b      	ble.n	8001588 <GetJoystickXYaxisValue+0xa8>
		}
	} X_axis = 0; Y_axis = 0;
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <GetJoystickXYaxisValue+0x1ac>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <GetJoystickXYaxisValue+0x19c>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020800 	.word	0x40020800
 8001668:	20000d90 	.word	0x20000d90
 800166c:	20000b60 	.word	0x20000b60
 8001670:	001e847f 	.word	0x001e847f
 8001674:	20000cf0 	.word	0x20000cf0
 8001678:	20000d68 	.word	0x20000d68
 800167c:	20000d98 	.word	0x20000d98
 8001680:	66666667 	.word	0x66666667
 8001684:	20000da0 	.word	0x20000da0
 8001688:	20000d40 	.word	0x20000d40
 800168c:	20000d94 	.word	0x20000d94
 8001690:	20000d9c 	.word	0x20000d9c

08001694 <JoyStickControlCartesian>:

void JoyStickControlCartesian(TIM_HandleTypeDef htim1)
{
 8001694:	b084      	sub	sp, #16
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
 800169a:	f107 0c08 	add.w	ip, r7, #8
 800169e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a8:	4821      	ldr	r0, [pc, #132]	; (8001730 <JoyStickControlCartesian+0x9c>)
 80016aa:	f002 fbc5 	bl	8003e38 <HAL_GPIO_WritePin>

	//X-axis
	if(joystickXaxis > 2500) //Left
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <JoyStickControlCartesian+0xa0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80016b6:	4293      	cmp	r3, r2
 80016b8:	dd04      	ble.n	80016c4 <JoyStickControlCartesian+0x30>
	{registerFrame[64].U16 = 4;}
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <JoyStickControlCartesian+0xa4>)
 80016bc:	2204      	movs	r2, #4
 80016be:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80016c2:	e00e      	b.n	80016e2 <JoyStickControlCartesian+0x4e>

	else if(joystickXaxis < 1900) //Right
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <JoyStickControlCartesian+0xa0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f240 726b 	movw	r2, #1899	; 0x76b
 80016cc:	4293      	cmp	r3, r2
 80016ce:	dc04      	bgt.n	80016da <JoyStickControlCartesian+0x46>
	{registerFrame[64].U16 = 8;}
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <JoyStickControlCartesian+0xa4>)
 80016d2:	2208      	movs	r2, #8
 80016d4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80016d8:	e003      	b.n	80016e2 <JoyStickControlCartesian+0x4e>

	else{registerFrame[64].U16 = 0;}
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <JoyStickControlCartesian+0xa4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	//Y-axis
	if(joystickYaxis < 1900) //Front
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <JoyStickControlCartesian+0xa8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f240 726b 	movw	r2, #1899	; 0x76b
 80016ea:	4293      	cmp	r3, r2
 80016ec:	dc03      	bgt.n	80016f6 <JoyStickControlCartesian+0x62>
	{PulseWidthModulation = 1000;}
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <JoyStickControlCartesian+0xac>)
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <JoyStickControlCartesian+0xb0>)
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e00d      	b.n	8001712 <JoyStickControlCartesian+0x7e>

	else if(joystickYaxis > 2500) //Back
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <JoyStickControlCartesian+0xa8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80016fe:	4293      	cmp	r3, r2
 8001700:	dd03      	ble.n	800170a <JoyStickControlCartesian+0x76>
	{PulseWidthModulation = -1000;}
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <JoyStickControlCartesian+0xac>)
 8001704:	4a10      	ldr	r2, [pc, #64]	; (8001748 <JoyStickControlCartesian+0xb4>)
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e003      	b.n	8001712 <JoyStickControlCartesian+0x7e>

	else{PulseWidthModulation = 0;}
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <JoyStickControlCartesian+0xac>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PulseWidthModulation);
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <JoyStickControlCartesian+0xac>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171e:	ee17 2a90 	vmov	r2, s15
 8001722:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800172c:	b004      	add	sp, #16
 800172e:	4770      	bx	lr
 8001730:	40020000 	.word	0x40020000
 8001734:	20000d9c 	.word	0x20000d9c
 8001738:	20000b60 	.word	0x20000b60
 800173c:	20000da0 	.word	0x20000da0
 8001740:	20000da4 	.word	0x20000da4
 8001744:	447a0000 	.word	0x447a0000
 8001748:	c47a0000 	.word	0xc47a0000

0800174c <micros>:
		_micros += UINT32_MAX;
	}
}

uint64_t micros()
{
 800174c:	b4b0      	push	{r4, r5, r7}
 800174e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <micros+0x2c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	2200      	movs	r2, #0
 8001758:	4618      	mov	r0, r3
 800175a:	4611      	mov	r1, r2
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <micros+0x30>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	1884      	adds	r4, r0, r2
 8001764:	eb41 0503 	adc.w	r5, r1, r3
 8001768:	4622      	mov	r2, r4
 800176a:	462b      	mov	r3, r5
}
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	bcb0      	pop	{r4, r5, r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200003dc 	.word	0x200003dc
 800177c:	20000278 	.word	0x20000278

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001786:	f001 f827 	bl	80027d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178a:	f000 f889 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178e:	f000 faf3 	bl	8001d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001792:	f000 fabb 	bl	8001d0c <MX_DMA_Init>
  MX_ADC1_Init();
 8001796:	f000 f8eb 	bl	8001970 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800179a:	f000 fa8b 	bl	8001cb4 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800179e:	f000 fa35 	bl	8001c0c <MX_TIM11_Init>
  MX_TIM5_Init();
 80017a2:	f000 f9e5 	bl	8001b70 <MX_TIM5_Init>
  MX_TIM1_Init();
 80017a6:	f000 f943 	bl	8001a30 <MX_TIM1_Init>
//  SetTwoPointsForCalibrate();
//  float32_t xy_axis[2] = {reference[0], reference[1]};
//  HolePositionsCartesian(xy_axis, rotationAngle);
  //-----------------------------------
  //joy stick--------------------------
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawData, 20);
 80017aa:	2214      	movs	r2, #20
 80017ac:	4930      	ldr	r1, [pc, #192]	; (8001870 <main+0xf0>)
 80017ae:	4831      	ldr	r0, [pc, #196]	; (8001874 <main+0xf4>)
 80017b0:	f001 f8c8 	bl	8002944 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 80017b4:	4830      	ldr	r0, [pc, #192]	; (8001878 <main+0xf8>)
 80017b6:	f003 f84d 	bl	8004854 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 80017ba:	4830      	ldr	r0, [pc, #192]	; (800187c <main+0xfc>)
 80017bc:	f003 f84a 	bl	8004854 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017c0:	2100      	movs	r1, #0
 80017c2:	482d      	ldr	r0, [pc, #180]	; (8001878 <main+0xf8>)
 80017c4:	f003 f9ce 	bl	8004b64 <HAL_TIM_PWM_Start>
  hmodbus.huart = &huart2;
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <main+0x100>)
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <main+0x104>)
 80017cc:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <main+0x100>)
 80017d0:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <main+0x108>)
 80017d2:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <main+0x100>)
 80017d6:	2215      	movs	r2, #21
 80017d8:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <main+0x100>)
 80017dc:	22c8      	movs	r2, #200	; 0xc8
 80017de:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80017e0:	492a      	ldr	r1, [pc, #168]	; (800188c <main+0x10c>)
 80017e2:	4827      	ldr	r0, [pc, #156]	; (8001880 <main+0x100>)
 80017e4:	f7ff fb72 	bl	8000ecc <Modbus_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 80017e8:	f7ff fbfc 	bl	8000fe4 <Modbus_Protocal_Worker>

	  GetJoystickXYaxisValue();
 80017ec:	f7ff fe78 	bl	80014e0 <GetJoystickXYaxisValue>

	  JoyStickControlCartesian();
 80017f0:	f7ff ff50 	bl	8001694 <JoyStickControlCartesian>

	  SetTwoPointsForCalibrate();
 80017f4:	f000 fb44 	bl	8001e80 <SetTwoPointsForCalibrate>
	  float32_t xy_axis[2] = {reference[0], reference[1]};
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <main+0x110>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001804:	edc7 7a00 	vstr	s15, [r7]
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <main+0x110>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001814:	edc7 7a01 	vstr	s15, [r7, #4]
	  HolePositionsCartesian(xy_axis, rotationAngle);
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <main+0x114>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	463b      	mov	r3, r7
 8001820:	eeb0 0a67 	vmov.f32	s0, s15
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fbdf 	bl	8001fe8 <HolePositionsCartesian>

	  static uint32_t timestamp = 0;
	  currentTime = micros();
 800182a:	f7ff ff8f 	bl	800174c <micros>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4919      	ldr	r1, [pc, #100]	; (8001898 <main+0x118>)
 8001834:	e9c1 2300 	strd	r2, r3, [r1]
	  if(currentTime > timestamp)
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <main+0x11c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2200      	movs	r2, #0
 800183e:	461c      	mov	r4, r3
 8001840:	4615      	mov	r5, r2
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <main+0x118>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	4294      	cmp	r4, r2
 800184a:	eb75 0303 	sbcs.w	r3, r5, r3
 800184e:	dacb      	bge.n	80017e8 <main+0x68>
	  {
		  timestamp = currentTime + 200000; //200000 microsecond = 0.2 --> 200 millisecond
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <main+0x118>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	4613      	mov	r3, r2
 8001858:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 800185c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001860:	4a0e      	ldr	r2, [pc, #56]	; (800189c <main+0x11c>)
 8001862:	6013      	str	r3, [r2, #0]

		  registerFrame[0].U16 = 0b0101100101100001; //Ya 22881
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <main+0x10c>)
 8001866:	f645 1261 	movw	r2, #22881	; 0x5961
 800186a:	801a      	strh	r2, [r3, #0]
  {
 800186c:	e7bc      	b.n	80017e8 <main+0x68>
 800186e:	bf00      	nop
 8001870:	20000cf0 	.word	0x20000cf0
 8001874:	20000280 	.word	0x20000280
 8001878:	20000328 	.word	0x20000328
 800187c:	200003dc 	.word	0x200003dc
 8001880:	20000688 	.word	0x20000688
 8001884:	20000544 	.word	0x20000544
 8001888:	20000490 	.word	0x20000490
 800188c:	20000b60 	.word	0x20000b60
 8001890:	20000618 	.word	0x20000618
 8001894:	20000670 	.word	0x20000670
 8001898:	20000680 	.word	0x20000680
 800189c:	20000da8 	.word	0x20000da8

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	; 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2230      	movs	r2, #48	; 0x30
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 fe60 	bl	8007574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <SystemClock_Config+0xc8>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a26      	ldr	r2, [pc, #152]	; (8001968 <SystemClock_Config+0xc8>)
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <SystemClock_Config+0xc8>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <SystemClock_Config+0xcc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a20      	ldr	r2, [pc, #128]	; (800196c <SystemClock_Config+0xcc>)
 80018ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <SystemClock_Config+0xcc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001904:	2310      	movs	r3, #16
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001908:	2302      	movs	r3, #2
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001910:	2308      	movs	r3, #8
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001918:	2302      	movs	r3, #2
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800191c:	2304      	movs	r3, #4
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	4618      	mov	r0, r3
 8001926:	f002 faa1 	bl	8003e6c <HAL_RCC_OscConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001930:	f000 fa9e 	bl	8001e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001934:	230f      	movs	r3, #15
 8001936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001938:	2302      	movs	r3, #2
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2103      	movs	r1, #3
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fd03 	bl	800435c <HAL_RCC_ClockConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800195c:	f000 fa88 	bl	8001e70 <Error_Handler>
  }
}
 8001960:	bf00      	nop
 8001962:	3750      	adds	r7, #80	; 0x50
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001976:	463b      	mov	r3, r7
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001982:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <MX_ADC1_Init+0xb4>)
 8001984:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <MX_ADC1_Init+0xb8>)
 8001986:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <MX_ADC1_Init+0xb4>)
 800198a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800198e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <MX_ADC1_Init+0xb4>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <MX_ADC1_Init+0xb4>)
 8001998:	2201      	movs	r2, #1
 800199a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_ADC1_Init+0xb4>)
 800199e:	2201      	movs	r2, #1
 80019a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <MX_ADC1_Init+0xbc>)
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019be:	2202      	movs	r2, #2
 80019c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d0:	4814      	ldr	r0, [pc, #80]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019d2:	f000 ff73 	bl	80028bc <HAL_ADC_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019dc:	f000 fa48 	bl	8001e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80019e8:	2303      	movs	r3, #3
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <MX_ADC1_Init+0xb4>)
 80019f2:	f001 f8b5 	bl	8002b60 <HAL_ADC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019fc:	f000 fa38 	bl	8001e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_ADC1_Init+0xb4>)
 8001a0e:	f001 f8a7 	bl	8002b60 <HAL_ADC_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a18:	f000 fa2a 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000280 	.word	0x20000280
 8001a28:	40012000 	.word	0x40012000
 8001a2c:	0f000001 	.word	0x0f000001

08001a30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b096      	sub	sp, #88	; 0x58
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	611a      	str	r2, [r3, #16]
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2220      	movs	r2, #32
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f005 fd83 	bl	8007574 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001a70:	4a3e      	ldr	r2, [pc, #248]	; (8001b6c <MX_TIM1_Init+0x13c>)
 8001a72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a74:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001a82:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a8e:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a9a:	4833      	ldr	r0, [pc, #204]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001a9c:	f002 fe7e 	bl	800479c <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001aa6:	f000 f9e3 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	482c      	ldr	r0, [pc, #176]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001ab8:	f003 fc18 	bl	80052ec <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ac2:	f000 f9d5 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ac6:	4828      	ldr	r0, [pc, #160]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001ac8:	f002 ffe6 	bl	8004a98 <HAL_TIM_PWM_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ad2:	f000 f9cd 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ade:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4820      	ldr	r0, [pc, #128]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001ae6:	f004 f99b 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001af0:	f000 f9be 	bl	8001e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af4:	2360      	movs	r3, #96	; 0x60
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b00:	2300      	movs	r3, #0
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b14:	2200      	movs	r2, #0
 8001b16:	4619      	mov	r1, r3
 8001b18:	4813      	ldr	r0, [pc, #76]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001b1a:	f003 fb25 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b24:	f000 f9a4 	bl	8001e70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001b4c:	f004 f9d6 	bl	8005efc <HAL_TIMEx_ConfigBreakDeadTime>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b56:	f000 f98b 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM1_Init+0x138>)
 8001b5c:	f000 fbdc 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8001b60:	bf00      	nop
 8001b62:	3758      	adds	r7, #88	; 0x58
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000328 	.word	0x20000328
 8001b6c:	40010000 	.word	0x40010000

08001b70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <MX_TIM5_Init+0x98>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bb2:	4814      	ldr	r0, [pc, #80]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001bb4:	f002 fdf2 	bl	800479c <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f000 f957 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001bd0:	f003 fb8c 	bl	80052ec <HAL_TIM_ConfigClockSource>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 f949 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_TIM5_Init+0x94>)
 8001bec:	f004 f918 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001bf6:	f000 f93b 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200003dc 	.word	0x200003dc
 8001c08:	40000c00 	.word	0x40000c00

08001c0c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	615a      	str	r2, [r3, #20]
 8001c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <MX_TIM11_Init+0xa4>)
 8001c28:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c2c:	2263      	movs	r2, #99	; 0x63
 8001c2e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c38:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001c3c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c4a:	4818      	ldr	r0, [pc, #96]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c4c:	f002 fda6 	bl	800479c <HAL_TIM_Base_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001c56:	f000 f90b 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001c5a:	4814      	ldr	r0, [pc, #80]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c5c:	f002 feb6 	bl	80049cc <HAL_TIM_OC_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001c66:	f000 f903 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c6a:	2108      	movs	r1, #8
 8001c6c:	480f      	ldr	r0, [pc, #60]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c6e:	f003 f829 	bl	8004cc4 <HAL_TIM_OnePulse_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8001c78:	f000 f8fa 	bl	8001e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001c80:	f240 5399 	movw	r3, #1433	; 0x599
 8001c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_TIM11_Init+0xa0>)
 8001c96:	f003 fa0b 	bl	80050b0 <HAL_TIM_OC_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001ca0:	f000 f8e6 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000490 	.word	0x20000490
 8001cb0:	40014800 	.word	0x40014800

08001cb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cba:	4a13      	ldr	r2, [pc, #76]	; (8001d08 <MX_USART2_UART_Init+0x54>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cc0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ccc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART2_UART_Init+0x50>)
 8001cf0:	f004 f974 	bl	8005fdc <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001cfa:	f000 f8b9 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000544 	.word	0x20000544
 8001d08:	40004400 	.word	0x40004400

08001d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <MX_DMA_Init+0x68>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <MX_DMA_Init+0x68>)
 8001d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_DMA_Init+0x68>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_DMA_Init+0x68>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <MX_DMA_Init+0x68>)
 8001d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <MX_DMA_Init+0x68>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2011      	movs	r0, #17
 8001d50:	f001 fa91 	bl	8003276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d54:	2011      	movs	r0, #17
 8001d56:	f001 faaa 	bl	80032ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2038      	movs	r0, #56	; 0x38
 8001d60:	f001 fa89 	bl	8003276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d64:	2038      	movs	r0, #56	; 0x38
 8001d66:	f001 faa2 	bl	80032ae <HAL_NVIC_EnableIRQ>

}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a33      	ldr	r2, [pc, #204]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a25      	ldr	r2, [pc, #148]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001e04:	4818      	ldr	r0, [pc, #96]	; (8001e68 <MX_GPIO_Init+0xf0>)
 8001e06:	f002 f817 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4812      	ldr	r0, [pc, #72]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001e22:	f001 fe6d 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e26:	2302      	movs	r3, #2
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <MX_GPIO_Init+0xf4>)
 8001e3a:	f001 fe61 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8001e3e:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_GPIO_Init+0xf0>)
 8001e58:	f001 fe52 	bl	8003b00 <HAL_GPIO_Init>

}
 8001e5c:	bf00      	nop
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020800 	.word	0x40020800

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
 8001e7a:	0000      	movs	r0, r0
 8001e7c:	0000      	movs	r0, r0
	...

08001e80 <SetTwoPointsForCalibrate>:
extern int reference[2];
extern int opposite[2];
extern int GoalReadyFlag;

void SetTwoPointsForCalibrate()
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
	int x0 = 0, y0 = 0, x1 = 45, y1 = 79;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	232d      	movs	r3, #45	; 0x2d
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	234f      	movs	r3, #79	; 0x4f
 8001e94:	603b      	str	r3, [r7, #0]
    reference[0] = x0;
 8001e96:	4a50      	ldr	r2, [pc, #320]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6013      	str	r3, [r2, #0]
    reference[1] = y0;
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6053      	str	r3, [r2, #4]
    opposite[0] = x1;
 8001ea2:	4a4e      	ldr	r2, [pc, #312]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6013      	str	r3, [r2, #0]
    opposite[1] = y1;
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6053      	str	r3, [r2, #4]

    if(y1 > y0)
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dd0c      	ble.n	8001ed0 <SetTwoPointsForCalibrate+0x50>
    {
        reference[0] = x0;
 8001eb6:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6013      	str	r3, [r2, #0]
        reference[1] = y0;
 8001ebc:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6053      	str	r3, [r2, #4]
        opposite[0] = x1;
 8001ec2:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6013      	str	r3, [r2, #0]
        opposite[1] = y1;
 8001ec8:	4a44      	ldr	r2, [pc, #272]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6053      	str	r3, [r2, #4]
 8001ece:	e039      	b.n	8001f44 <SetTwoPointsForCalibrate+0xc4>
    }
    else if(y0 > y1)
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dd0c      	ble.n	8001ef2 <SetTwoPointsForCalibrate+0x72>
    {
        reference[0] = x1;
 8001ed8:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
        reference[1] = y1;
 8001ede:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6053      	str	r3, [r2, #4]
        opposite[0] = x0;
 8001ee4:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6013      	str	r3, [r2, #0]
        opposite[1] = y0;
 8001eea:	4a3c      	ldr	r2, [pc, #240]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	6053      	str	r3, [r2, #4]
 8001ef0:	e028      	b.n	8001f44 <SetTwoPointsForCalibrate+0xc4>
    }
    else if(x1 > x0 && y0 == y1)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dd10      	ble.n	8001f1c <SetTwoPointsForCalibrate+0x9c>
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d10c      	bne.n	8001f1c <SetTwoPointsForCalibrate+0x9c>
    {
        reference[0] = x0;
 8001f02:	4a35      	ldr	r2, [pc, #212]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6013      	str	r3, [r2, #0]
        reference[1] = y0;
 8001f08:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6053      	str	r3, [r2, #4]
        opposite[0] = x1;
 8001f0e:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6013      	str	r3, [r2, #0]
        opposite[1] = y1;
 8001f14:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6053      	str	r3, [r2, #4]
 8001f1a:	e013      	b.n	8001f44 <SetTwoPointsForCalibrate+0xc4>
    }
    else if(x0 > x1 && y0 == y1)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dd0f      	ble.n	8001f44 <SetTwoPointsForCalibrate+0xc4>
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d10b      	bne.n	8001f44 <SetTwoPointsForCalibrate+0xc4>
    {
        reference[0] = x1;
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
        reference[1] = y1;
 8001f32:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6053      	str	r3, [r2, #4]
        opposite[0] = x0;
 8001f38:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6013      	str	r3, [r2, #0]
        opposite[1] = y0;
 8001f3e:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	6053      	str	r3, [r2, #4]
    }

    rotationAngle = atan2(50, 60) - atan2((opposite[1] - reference[1]), (opposite[0] - reference[0]));
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fa94 	bl	800047c <__aeabi_i2d>
 8001f54:	4604      	mov	r4, r0
 8001f56:	460d      	mov	r5, r1
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <SetTwoPointsForCalibrate+0x15c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <SetTwoPointsForCalibrate+0x158>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fa8a 	bl	800047c <__aeabi_i2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	ec43 2b11 	vmov	d1, r2, r3
 8001f70:	ec45 4b10 	vmov	d0, r4, r5
 8001f74:	f005 fb06 	bl	8007584 <atan2>
 8001f78:	ec53 2b10 	vmov	r2, r3, d0
 8001f7c:	a112      	add	r1, pc, #72	; (adr r1, 8001fc8 <SetTwoPointsForCalibrate+0x148>)
 8001f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f82:	f7fe f92d 	bl	80001e0 <__aeabi_dsub>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fd79 	bl	8000a84 <__aeabi_d2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <SetTwoPointsForCalibrate+0x160>)
 8001f96:	6013      	str	r3, [r2, #0]
//    rotationAngle = atan2(opposite[1] - reference[1], opposite[0] - reference[0]) - atan2(50, 60);
    Degrees = rotationAngle * (180.0 / M_PI);
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <SetTwoPointsForCalibrate+0x160>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa7f 	bl	80004a0 <__aeabi_f2d>
 8001fa2:	a30b      	add	r3, pc, #44	; (adr r3, 8001fd0 <SetTwoPointsForCalibrate+0x150>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fad2 	bl	8000550 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f7fe fd66 	bl	8000a84 <__aeabi_d2f>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <SetTwoPointsForCalibrate+0x164>)
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	c3f16a8a 	.word	0xc3f16a8a
 8001fcc:	3fe63b4b 	.word	0x3fe63b4b
 8001fd0:	1a63c1f8 	.word	0x1a63c1f8
 8001fd4:	404ca5dc 	.word	0x404ca5dc
 8001fd8:	20000618 	.word	0x20000618
 8001fdc:	20000620 	.word	0x20000620
 8001fe0:	20000670 	.word	0x20000670
 8001fe4:	20000674 	.word	0x20000674

08001fe8 <HolePositionsCartesian>:

void HolePositionsCartesian(float32_t* reference, float32_t rotationAngle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	ed87 0a00 	vstr	s0, [r7]
	if (GoalReadyFlag == 0)
 8001ff4:	4b42      	ldr	r3, [pc, #264]	; (8002100 <HolePositionsCartesian+0x118>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d17d      	bne.n	80020f8 <HolePositionsCartesian+0x110>
				{10, 40},
				{30, 40},
				{50, 40}
		};

		float32_t rotationMatrix[2][2] = {{arm_cos_f32(rotationAngle), arm_sin_f32(rotationAngle)},
 8001ffc:	ed97 0a00 	vldr	s0, [r7]
 8002000:	f000 fae2 	bl	80025c8 <arm_cos_f32>
 8002004:	eef0 7a40 	vmov.f32	s15, s0
 8002008:	edc7 7a02 	vstr	s15, [r7, #8]
 800200c:	ed97 0a00 	vldr	s0, [r7]
 8002010:	f000 fb60 	bl	80026d4 <arm_sin_f32>
 8002014:	eef0 7a40 	vmov.f32	s15, s0
 8002018:	edc7 7a03 	vstr	s15, [r7, #12]
										  {-arm_sin_f32(rotationAngle), arm_cos_f32(rotationAngle)}};
 800201c:	ed97 0a00 	vldr	s0, [r7]
 8002020:	f000 fb58 	bl	80026d4 <arm_sin_f32>
 8002024:	eef0 7a40 	vmov.f32	s15, s0
 8002028:	eef1 7a67 	vneg.f32	s15, s15
		float32_t rotationMatrix[2][2] = {{arm_cos_f32(rotationAngle), arm_sin_f32(rotationAngle)},
 800202c:	edc7 7a04 	vstr	s15, [r7, #16]
										  {-arm_sin_f32(rotationAngle), arm_cos_f32(rotationAngle)}};
 8002030:	ed97 0a00 	vldr	s0, [r7]
 8002034:	f000 fac8 	bl	80025c8 <arm_cos_f32>
 8002038:	eef0 7a40 	vmov.f32	s15, s0
		float32_t rotationMatrix[2][2] = {{arm_cos_f32(rotationAngle), arm_sin_f32(rotationAngle)},
 800203c:	edc7 7a05 	vstr	s15, [r7, #20]

		static uint8_t i = 0;
		rotated[i][0] = ((rotationMatrix[0][0] * nineholes[i][0]) + (rotationMatrix[0][1] * nineholes[i][1])) + reference[0];
 8002040:	ed97 7a02 	vldr	s14, [r7, #8]
 8002044:	4b2f      	ldr	r3, [pc, #188]	; (8002104 <HolePositionsCartesian+0x11c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <HolePositionsCartesian+0x120>)
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002056:	edd7 6a03 	vldr	s13, [r7, #12]
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HolePositionsCartesian+0x11c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4a2a      	ldr	r2, [pc, #168]	; (8002108 <HolePositionsCartesian+0x120>)
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HolePositionsCartesian+0x11c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HolePositionsCartesian+0x124>)
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	edc3 7a00 	vstr	s15, [r3]
		rotated[i][1] = ((rotationMatrix[1][0] * nineholes[i][0]) + (rotationMatrix[1][1] * nineholes[i][1])) + reference[1];
 800208a:	ed97 7a04 	vldr	s14, [r7, #16]
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HolePositionsCartesian+0x11c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HolePositionsCartesian+0x120>)
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HolePositionsCartesian+0x11c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HolePositionsCartesian+0x120>)
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	3304      	adds	r3, #4
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HolePositionsCartesian+0x11c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HolePositionsCartesian+0x124>)
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	edc3 7a00 	vstr	s15, [r3]
		i++;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HolePositionsCartesian+0x11c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HolePositionsCartesian+0x11c>)
 80020e2:	701a      	strb	r2, [r3, #0]
		if (i == 9)
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HolePositionsCartesian+0x11c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	d105      	bne.n	80020f8 <HolePositionsCartesian+0x110>
		{
			GoalReadyFlag = 1;
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <HolePositionsCartesian+0x118>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
			i = 0;
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HolePositionsCartesian+0x11c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80020f8:	bf00      	nop
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000678 	.word	0x20000678
 8002104:	20000dac 	.word	0x20000dac
 8002108:	20000200 	.word	0x20000200
 800210c:	20000628 	.word	0x20000628

08002110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_MspInit+0x4c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_MspInit+0x4c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800214e:	2007      	movs	r0, #7
 8002150:	f001 f886 	bl	8003260 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2f      	ldr	r2, [pc, #188]	; (800223c <HAL_ADC_MspInit+0xdc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d157      	bne.n	8002232 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a2d      	ldr	r2, [pc, #180]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a26      	ldr	r2, [pc, #152]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ba:	2303      	movs	r3, #3
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021be:	2303      	movs	r3, #3
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	481d      	ldr	r0, [pc, #116]	; (8002244 <HAL_ADC_MspInit+0xe4>)
 80021ce:	f001 fc97 	bl	8003b00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021d4:	4a1d      	ldr	r2, [pc, #116]	; (800224c <HAL_ADC_MspInit+0xec>)
 80021d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002200:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 8002204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002208:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002216:	480c      	ldr	r0, [pc, #48]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 8002218:	f001 f864 	bl	80032e4 <HAL_DMA_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002222:	f7ff fe25 	bl	8001e70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40012000 	.word	0x40012000
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000
 8002248:	200002c8 	.word	0x200002c8
 800224c:	40026410 	.word	0x40026410

08002250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a2a      	ldr	r2, [pc, #168]	; (8002308 <HAL_TIM_Base_MspInit+0xb8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d116      	bne.n	8002290 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a28      	ldr	r2, [pc, #160]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	201a      	movs	r0, #26
 8002284:	f000 fff7 	bl	8003276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002288:	201a      	movs	r0, #26
 800228a:	f001 f810 	bl	80032ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800228e:	e036      	b.n	80022fe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_TIM_Base_MspInit+0xc0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d116      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a1a      	ldr	r2, [pc, #104]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2032      	movs	r0, #50	; 0x32
 80022bc:	f000 ffdb 	bl	8003276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80022c0:	2032      	movs	r0, #50	; 0x32
 80022c2:	f000 fff4 	bl	80032ae <HAL_NVIC_EnableIRQ>
}
 80022c6:	e01a      	b.n	80022fe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_TIM_Base_MspInit+0xc4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d115      	bne.n	80022fe <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a0c      	ldr	r2, [pc, #48]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_TIM_Base_MspInit+0xbc>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	201a      	movs	r0, #26
 80022f4:	f000 ffbf 	bl	8003276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022f8:	201a      	movs	r0, #26
 80022fa:	f000 ffd8 	bl	80032ae <HAL_NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40023800 	.word	0x40023800
 8002310:	40000c00 	.word	0x40000c00
 8002314:	40014800 	.word	0x40014800

08002318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_TIM_MspPostInit+0x68>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d11e      	bne.n	8002378 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_TIM_MspPostInit+0x6c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_TIM_MspPostInit+0x6c>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_TIM_MspPostInit+0x6c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002368:	2301      	movs	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4619      	mov	r1, r3
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_TIM_MspPostInit+0x70>)
 8002374:	f001 fbc4 	bl	8003b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010000 	.word	0x40010000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000

0800238c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a34      	ldr	r2, [pc, #208]	; (800247c <HAL_UART_MspInit+0xf0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d161      	bne.n	8002472 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023e6:	230c      	movs	r3, #12
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f6:	2307      	movs	r3, #7
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	4820      	ldr	r0, [pc, #128]	; (8002484 <HAL_UART_MspInit+0xf8>)
 8002402:	f001 fb7d 	bl	8003b00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <HAL_UART_MspInit+0x100>)
 800240a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800240e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002412:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002426:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002446:	4810      	ldr	r0, [pc, #64]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002448:	f000 ff4c 	bl	80032e4 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002452:	f7ff fd0d 	bl	8001e70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800245a:	635a      	str	r2, [r3, #52]	; 0x34
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2026      	movs	r0, #38	; 0x26
 8002468:	f000 ff05 	bl	8003276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800246c:	2026      	movs	r0, #38	; 0x26
 800246e:	f000 ff1e 	bl	80032ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40004400 	.word	0x40004400
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000
 8002488:	200005b8 	.word	0x200005b8
 800248c:	400260a0 	.word	0x400260a0

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <NMI_Handler+0x4>

08002496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <MemManage_Handler+0x4>

080024a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <BusFault_Handler+0x4>

080024a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <UsageFault_Handler+0x4>

080024ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024dc:	f000 f9ce 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA1_Stream6_IRQHandler+0x10>)
 80024ea:	f001 f893 	bl	8003614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200005b8 	.word	0x200005b8

080024f8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80024fe:	f002 fcaf 	bl	8004e60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002504:	f002 fcac 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000328 	.word	0x20000328
 8002510:	20000490 	.word	0x20000490

08002514 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <USART2_IRQHandler+0x10>)
 800251a:	f003 ffb3 	bl	8006484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000544 	.word	0x20000544

08002528 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM5_IRQHandler+0x10>)
 800252e:	f002 fc97 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200003dc 	.word	0x200003dc

0800253c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <DMA2_Stream0_IRQHandler+0x10>)
 8002542:	f001 f867 	bl	8003614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200002c8 	.word	0x200002c8

08002550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <SystemInit+0x20>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <SystemInit+0x20>)
 800255c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002578:	480d      	ldr	r0, [pc, #52]	; (80025b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800257a:	490e      	ldr	r1, [pc, #56]	; (80025b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002580:	e002      	b.n	8002588 <LoopCopyDataInit>

08002582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002586:	3304      	adds	r3, #4

08002588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800258c:	d3f9      	bcc.n	8002582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002590:	4c0b      	ldr	r4, [pc, #44]	; (80025c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002594:	e001      	b.n	800259a <LoopFillZerobss>

08002596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002598:	3204      	adds	r2, #4

0800259a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800259c:	d3fb      	bcc.n	8002596 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800259e:	f7ff ffd7 	bl	8002550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a2:	f004 ffb5 	bl	8007510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a6:	f7ff f8eb 	bl	8001780 <main>
  bx  lr    
 80025aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b4:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80025b8:	08008338 	.word	0x08008338
  ldr r2, =_sbss
 80025bc:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80025c0:	20000db4 	.word	0x20000db4

080025c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC_IRQHandler>
	...

080025c8 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b08b      	sub	sp, #44	; 0x2c
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80025d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80026c8 <arm_cos_f32+0x100>
 80025da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025de:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80025e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025e6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80025ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f2:	ee17 3a90 	vmov	r3, s15
 80025f6:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80025f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80025fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002604:	d502      	bpl.n	800260c <arm_cos_f32+0x44>
  {
    n--;
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	3b01      	subs	r3, #1
 800260a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002616:	ed97 7a06 	vldr	s14, [r7, #24]
 800261a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800261e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8002622:	edd7 7a06 	vldr	s15, [r7, #24]
 8002626:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80026cc <arm_cos_f32+0x104>
 800262a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8002632:	edd7 7a07 	vldr	s15, [r7, #28]
 8002636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263a:	ee17 3a90 	vmov	r3, s15
 800263e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8002640:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002646:	d309      	bcc.n	800265c <arm_cos_f32+0x94>
    index = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800264c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002650:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80026cc <arm_cos_f32+0x104>
 8002654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002658:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800265c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002666:	ed97 7a07 	vldr	s14, [r7, #28]
 800266a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8002672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002674:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <arm_cos_f32+0x108>)
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800267e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002680:	3301      	adds	r3, #1
 8002682:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <arm_cos_f32+0x108>)
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 800268c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002690:	edd7 7a05 	vldr	s15, [r7, #20]
 8002694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002698:	edd7 7a04 	vldr	s15, [r7, #16]
 800269c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80026a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b0:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	ee07 3a90 	vmov	s15, r3
}
 80026ba:	eeb0 0a67 	vmov.f32	s0, s15
 80026be:	372c      	adds	r7, #44	; 0x2c
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	3e22f983 	.word	0x3e22f983
 80026cc:	44000000 	.word	0x44000000
 80026d0:	08007aa8 	.word	0x08007aa8

080026d4 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b08b      	sub	sp, #44	; 0x2c
 80026d8:	af00      	add	r7, sp, #0
 80026da:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80026de:	edd7 7a01 	vldr	s15, [r7, #4]
 80026e2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80027cc <arm_sin_f32+0xf8>
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80026ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f6:	ee17 3a90 	vmov	r3, s15
 80026fa:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80026fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002708:	d502      	bpl.n	8002710 <arm_sin_f32+0x3c>
  {
    n--;
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	3b01      	subs	r3, #1
 800270e:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271a:	ed97 7a06 	vldr	s14, [r7, #24]
 800271e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002722:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8002726:	edd7 7a06 	vldr	s15, [r7, #24]
 800272a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80027d0 <arm_sin_f32+0xfc>
 800272e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002732:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8002736:	edd7 7a07 	vldr	s15, [r7, #28]
 800273a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800273e:	ee17 3a90 	vmov	r3, s15
 8002742:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8002744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800274a:	d309      	bcc.n	8002760 <arm_sin_f32+0x8c>
    index = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8002750:	edd7 7a07 	vldr	s15, [r7, #28]
 8002754:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80027d0 <arm_sin_f32+0xfc>
 8002758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800275c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8002760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	ed97 7a07 	vldr	s14, [r7, #28]
 800276e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002772:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8002776:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002778:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <arm_sin_f32+0x100>)
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8002782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002784:	3301      	adds	r3, #1
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <arm_sin_f32+0x100>)
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8002790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002794:	edd7 7a05 	vldr	s15, [r7, #20]
 8002798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800279c:	edd7 7a04 	vldr	s15, [r7, #16]
 80027a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a4:	edd7 6a05 	vldr	s13, [r7, #20]
 80027a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b4:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	ee07 3a90 	vmov	s15, r3
}
 80027be:	eeb0 0a67 	vmov.f32	s0, s15
 80027c2:	372c      	adds	r7, #44	; 0x2c
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	3e22f983 	.word	0x3e22f983
 80027d0:	44000000 	.word	0x44000000
 80027d4:	08007aa8 	.word	0x08007aa8

080027d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <HAL_Init+0x40>)
 80027e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_Init+0x40>)
 80027ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a07      	ldr	r2, [pc, #28]	; (8002818 <HAL_Init+0x40>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002800:	2003      	movs	r0, #3
 8002802:	f000 fd2d 	bl	8003260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002806:	2000      	movs	r0, #0
 8002808:	f000 f808 	bl	800281c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800280c:	f7ff fc80 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00

0800281c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_InitTick+0x54>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_InitTick+0x58>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002832:	fbb3 f3f1 	udiv	r3, r3, r1
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fd45 	bl	80032ca <HAL_SYSTICK_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e00e      	b.n	8002868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d80a      	bhi.n	8002866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f000 fd0d 	bl	8003276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800285c:	4a06      	ldr	r2, [pc, #24]	; (8002878 <HAL_InitTick+0x5c>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000248 	.word	0x20000248
 8002874:	20000250 	.word	0x20000250
 8002878:	2000024c 	.word	0x2000024c

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000250 	.word	0x20000250
 80028a0:	20000db0 	.word	0x20000db0

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000db0 	.word	0x20000db0

080028bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e033      	b.n	800293a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fc40 	bl	8002160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d118      	bne.n	800292c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002902:	f023 0302 	bic.w	r3, r3, #2
 8002906:	f043 0202 	orr.w	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fa58 	bl	8002dc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
 800292a:	e001      	b.n	8002930 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_ADC_Start_DMA+0x1e>
 800295e:	2302      	movs	r3, #2
 8002960:	e0ce      	b.n	8002b00 <HAL_ADC_Start_DMA+0x1bc>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d018      	beq.n	80029aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002988:	4b5f      	ldr	r3, [pc, #380]	; (8002b08 <HAL_ADC_Start_DMA+0x1c4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5f      	ldr	r2, [pc, #380]	; (8002b0c <HAL_ADC_Start_DMA+0x1c8>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9a      	lsrs	r2, r3, #18
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b8:	d107      	bne.n	80029ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 8086 	bne.w	8002ae6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a18:	d106      	bne.n	8002a28 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f023 0206 	bic.w	r2, r3, #6
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
 8002a26:	e002      	b.n	8002a2e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a36:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_ADC_Start_DMA+0x1cc>)
 8002a38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <HAL_ADC_Start_DMA+0x1d0>)
 8002a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <HAL_ADC_Start_DMA+0x1d4>)
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	4a33      	ldr	r2, [pc, #204]	; (8002b1c <HAL_ADC_Start_DMA+0x1d8>)
 8002a50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	334c      	adds	r3, #76	; 0x4c
 8002a86:	4619      	mov	r1, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f000 fcd8 	bl	8003440 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d129      	bne.n	8002afe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	e020      	b.n	8002afe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_ADC_Start_DMA+0x1dc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d11b      	bne.n	8002afe <HAL_ADC_Start_DMA+0x1ba>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d114      	bne.n	8002afe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	e00b      	b.n	8002afe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000248 	.word	0x20000248
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	40012300 	.word	0x40012300
 8002b14:	08002fbd 	.word	0x08002fbd
 8002b18:	08003077 	.word	0x08003077
 8002b1c:	08003093 	.word	0x08003093
 8002b20:	40012000 	.word	0x40012000

08002b24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1c>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e113      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x244>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	d925      	bls.n	8002bd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68d9      	ldr	r1, [r3, #12]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3b1e      	subs	r3, #30
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	400a      	ands	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68d9      	ldr	r1, [r3, #12]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4403      	add	r3, r0
 8002bca:	3b1e      	subs	r3, #30
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	e022      	b.n	8002c1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6919      	ldr	r1, [r3, #16]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	2207      	movs	r2, #7
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6919      	ldr	r1, [r3, #16]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4403      	add	r3, r0
 8002c14:	409a      	lsls	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d824      	bhi.n	8002c70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3b05      	subs	r3, #5
 8002c38:	221f      	movs	r2, #31
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	400a      	ands	r2, r1
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4618      	mov	r0, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	3b05      	subs	r3, #5
 8002c62:	fa00 f203 	lsl.w	r2, r0, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c6e:	e04c      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d824      	bhi.n	8002cc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	3b23      	subs	r3, #35	; 0x23
 8002c8a:	221f      	movs	r2, #31
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43da      	mvns	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	400a      	ands	r2, r1
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b23      	subs	r3, #35	; 0x23
 8002cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc0:	e023      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b41      	subs	r3, #65	; 0x41
 8002cd4:	221f      	movs	r2, #31
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b41      	subs	r3, #65	; 0x41
 8002cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d0a:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_ADC_ConfigChannel+0x250>)
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <HAL_ADC_ConfigChannel+0x254>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10f      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x1d8>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b12      	cmp	r3, #18
 8002d1e:	d10b      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_ADC_ConfigChannel+0x254>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d12b      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x23a>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1c      	ldr	r2, [pc, #112]	; (8002db8 <HAL_ADC_ConfigChannel+0x258>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <HAL_ADC_ConfigChannel+0x1f4>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b11      	cmp	r3, #17
 8002d52:	d122      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <HAL_ADC_ConfigChannel+0x258>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d111      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_ADC_ConfigChannel+0x25c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <HAL_ADC_ConfigChannel+0x260>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	0c9a      	lsrs	r2, r3, #18
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d8c:	e002      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f9      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40012300 	.word	0x40012300
 8002db4:	40012000 	.word	0x40012000
 8002db8:	10000012 	.word	0x10000012
 8002dbc:	20000248 	.word	0x20000248
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dcc:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <ADC_Init+0x1f0>)
 8002dce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	021a      	lsls	r2, r3, #8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <ADC_Init+0x1f4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e00f      	b.n	8002ec2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0202 	bic.w	r2, r2, #2
 8002ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
 8002edc:	005a      	lsls	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01b      	beq.n	8002f28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	035a      	lsls	r2, r3, #13
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	e007      	b.n	8002f38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	051a      	lsls	r2, r3, #20
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f7a:	025a      	lsls	r2, r3, #9
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	029a      	lsls	r2, r3, #10
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40012300 	.word	0x40012300
 8002fb8:	0f000001 	.word	0x0f000001

08002fbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d13c      	bne.n	8003050 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d12b      	bne.n	8003048 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d127      	bne.n	8003048 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003010:	2b00      	cmp	r3, #0
 8003012:	d119      	bne.n	8003048 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0220 	bic.w	r2, r2, #32
 8003022:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff fd6b 	bl	8002b24 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800304e:	e00e      	b.n	800306e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f7ff fd75 	bl	8002b4c <HAL_ADC_ErrorCallback>
}
 8003062:	e004      	b.n	800306e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f7ff fd57 	bl	8002b38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0204 	orr.w	r2, r3, #4
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff fd4a 	bl	8002b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <__NVIC_GetPriorityGrouping+0x18>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db0b      	blt.n	800314e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4907      	ldr	r1, [pc, #28]	; (800315c <__NVIC_EnableIRQ+0x38>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2001      	movs	r0, #1
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000e100 	.word	0xe000e100

08003160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	6039      	str	r1, [r7, #0]
 800316a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	2b00      	cmp	r3, #0
 8003172:	db0a      	blt.n	800318a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	490c      	ldr	r1, [pc, #48]	; (80031ac <__NVIC_SetPriority+0x4c>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	440b      	add	r3, r1
 8003184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003188:	e00a      	b.n	80031a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4908      	ldr	r1, [pc, #32]	; (80031b0 <__NVIC_SetPriority+0x50>)
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	3b04      	subs	r3, #4
 8003198:	0112      	lsls	r2, r2, #4
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	440b      	add	r3, r1
 800319e:	761a      	strb	r2, [r3, #24]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000e100 	.word	0xe000e100
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f1c3 0307 	rsb	r3, r3, #7
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	bf28      	it	cs
 80031d2:	2304      	movcs	r3, #4
 80031d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3304      	adds	r3, #4
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d902      	bls.n	80031e4 <NVIC_EncodePriority+0x30>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3b03      	subs	r3, #3
 80031e2:	e000      	b.n	80031e6 <NVIC_EncodePriority+0x32>
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	f04f 32ff 	mov.w	r2, #4294967295
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43da      	mvns	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	401a      	ands	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	43d9      	mvns	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	4313      	orrs	r3, r2
         );
}
 800320e:	4618      	mov	r0, r3
 8003210:	3724      	adds	r7, #36	; 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800322c:	d301      	bcc.n	8003232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322e:	2301      	movs	r3, #1
 8003230:	e00f      	b.n	8003252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <SysTick_Config+0x40>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323a:	210f      	movs	r1, #15
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f7ff ff8e 	bl	8003160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <SysTick_Config+0x40>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <SysTick_Config+0x40>)
 800324c:	2207      	movs	r2, #7
 800324e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	e000e010 	.word	0xe000e010

08003260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff29 	bl	80030c0 <__NVIC_SetPriorityGrouping>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003288:	f7ff ff3e 	bl	8003108 <__NVIC_GetPriorityGrouping>
 800328c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f7ff ff8e 	bl	80031b4 <NVIC_EncodePriority>
 8003298:	4602      	mov	r2, r0
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff5d 	bl	8003160 <__NVIC_SetPriority>
}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff31 	bl	8003124 <__NVIC_EnableIRQ>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ffa2 	bl	800321c <SysTick_Config>
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f0:	f7ff fad8 	bl	80028a4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e099      	b.n	8003434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003320:	e00f      	b.n	8003342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003322:	f7ff fabf 	bl	80028a4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b05      	cmp	r3, #5
 800332e:	d908      	bls.n	8003342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2203      	movs	r2, #3
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e078      	b.n	8003434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e8      	bne.n	8003322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <HAL_DMA_Init+0x158>)
 800335c:	4013      	ands	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2b04      	cmp	r3, #4
 800339a:	d107      	bne.n	80033ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	4313      	orrs	r3, r2
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0307 	bic.w	r3, r3, #7
 80033c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d117      	bne.n	8003406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fb0d 	bl	8003a08 <DMA_CheckFifoParam>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003402:	2301      	movs	r3, #1
 8003404:	e016      	b.n	8003434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fac4 	bl	800399c <DMA_CalcBaseAndBitshift>
 8003414:	4603      	mov	r3, r0
 8003416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	223f      	movs	r2, #63	; 0x3f
 800341e:	409a      	lsls	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	f010803f 	.word	0xf010803f

08003440 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_DMA_Start_IT+0x26>
 8003462:	2302      	movs	r3, #2
 8003464:	e040      	b.n	80034e8 <HAL_DMA_Start_IT+0xa8>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d12f      	bne.n	80034da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fa56 	bl	8003940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	409a      	lsls	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0216 	orr.w	r2, r2, #22
 80034ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0208 	orr.w	r2, r2, #8
 80034c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e005      	b.n	80034e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
 80034e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034fe:	f7ff f9d1 	bl	80028a4 <HAL_GetTick>
 8003502:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d008      	beq.n	8003522 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e052      	b.n	80035c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0216 	bic.w	r2, r2, #22
 8003530:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003540:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_DMA_Abort+0x62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0208 	bic.w	r2, r2, #8
 8003560:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003572:	e013      	b.n	800359c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003574:	f7ff f996 	bl	80028a4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b05      	cmp	r3, #5
 8003580:	d90c      	bls.n	800359c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2203      	movs	r2, #3
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e015      	b.n	80035c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e4      	bne.n	8003574 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	223f      	movs	r2, #63	; 0x3f
 80035b0:	409a      	lsls	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d004      	beq.n	80035ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00c      	b.n	8003608 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2205      	movs	r2, #5
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003620:	4b8e      	ldr	r3, [pc, #568]	; (800385c <HAL_DMA_IRQHandler+0x248>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a8e      	ldr	r2, [pc, #568]	; (8003860 <HAL_DMA_IRQHandler+0x24c>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0a9b      	lsrs	r3, r3, #10
 800362c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2208      	movs	r2, #8
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01a      	beq.n	8003680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	2208      	movs	r2, #8
 800366e:	409a      	lsls	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2201      	movs	r2, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d012      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2201      	movs	r2, #1
 80036a4:	409a      	lsls	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0202 	orr.w	r2, r3, #2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2204      	movs	r2, #4
 80036bc:	409a      	lsls	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d012      	beq.n	80036ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	2204      	movs	r2, #4
 80036da:	409a      	lsls	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	2210      	movs	r2, #16
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d043      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03c      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	2210      	movs	r2, #16
 8003710:	409a      	lsls	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d018      	beq.n	8003756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d024      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
 8003742:	e01f      	b.n	8003784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
 8003754:	e016      	b.n	8003784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0208 	bic.w	r2, r2, #8
 8003772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	2220      	movs	r2, #32
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 808f 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8087 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2220      	movs	r2, #32
 80037ac:	409a      	lsls	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d136      	bne.n	800382c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0216 	bic.w	r2, r2, #22
 80037cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_DMA_IRQHandler+0x1da>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0208 	bic.w	r2, r2, #8
 80037fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	223f      	movs	r2, #63	; 0x3f
 8003804:	409a      	lsls	r2, r3
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	d07e      	beq.n	8003920 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
        }
        return;
 800382a:	e079      	b.n	8003920 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01d      	beq.n	8003876 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10d      	bne.n	8003864 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	2b00      	cmp	r3, #0
 800384e:	d031      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
 8003858:	e02c      	b.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
 800385a:	bf00      	nop
 800385c:	20000248 	.word	0x20000248
 8003860:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d023      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e01e      	b.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10f      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0210 	bic.w	r2, r2, #16
 8003892:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d032      	beq.n	8003922 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d022      	beq.n	800390e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2205      	movs	r2, #5
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d307      	bcc.n	80038fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f2      	bne.n	80038e0 <HAL_DMA_IRQHandler+0x2cc>
 80038fa:	e000      	b.n	80038fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e000      	b.n	8003922 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003920:	bf00      	nop
    }
  }
}
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800395c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d108      	bne.n	8003980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397e:	e007      	b.n	8003990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3b10      	subs	r3, #16
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <DMA_CalcBaseAndBitshift+0x64>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <DMA_CalcBaseAndBitshift+0x68>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d909      	bls.n	80039de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	659a      	str	r2, [r3, #88]	; 0x58
 80039dc:	e007      	b.n	80039ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	aaaaaaab 	.word	0xaaaaaaab
 8003a04:	080082ac 	.word	0x080082ac

08003a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11f      	bne.n	8003a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d856      	bhi.n	8003ad6 <DMA_CheckFifoParam+0xce>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <DMA_CheckFifoParam+0x28>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a53 	.word	0x08003a53
 8003a38:	08003a41 	.word	0x08003a41
 8003a3c:	08003ad7 	.word	0x08003ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d046      	beq.n	8003ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e043      	b.n	8003ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5a:	d140      	bne.n	8003ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e03d      	b.n	8003ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	d121      	bne.n	8003ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d837      	bhi.n	8003ae2 <DMA_CheckFifoParam+0xda>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <DMA_CheckFifoParam+0x70>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a8f 	.word	0x08003a8f
 8003a80:	08003a89 	.word	0x08003a89
 8003a84:	08003aa1 	.word	0x08003aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e030      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d025      	beq.n	8003ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e022      	b.n	8003ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa8:	d11f      	bne.n	8003aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aae:	e01c      	b.n	8003aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d903      	bls.n	8003abe <DMA_CheckFifoParam+0xb6>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d003      	beq.n	8003ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003abc:	e018      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac2:	e015      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00e      	beq.n	8003aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e00b      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e00a      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e008      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e006      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
    }
  } 
  
  return status; 
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e159      	b.n	8003dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f040 8148 	bne.w	8003dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d005      	beq.n	8003b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d130      	bne.n	8003bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b88:	2201      	movs	r2, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 0201 	and.w	r2, r3, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d017      	beq.n	8003bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d123      	bne.n	8003c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	08da      	lsrs	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3208      	adds	r2, #8
 8003c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	220f      	movs	r2, #15
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	08da      	lsrs	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3208      	adds	r2, #8
 8003c3e:	69b9      	ldr	r1, [r7, #24]
 8003c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0203 	and.w	r2, r3, #3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a2 	beq.w	8003dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c94:	6453      	str	r3, [r2, #68]	; 0x44
 8003c96:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca2:	4a52      	ldr	r2, [pc, #328]	; (8003dec <HAL_GPIO_Init+0x2ec>)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	3302      	adds	r3, #2
 8003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	220f      	movs	r2, #15
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a49      	ldr	r2, [pc, #292]	; (8003df0 <HAL_GPIO_Init+0x2f0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d019      	beq.n	8003d02 <HAL_GPIO_Init+0x202>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a48      	ldr	r2, [pc, #288]	; (8003df4 <HAL_GPIO_Init+0x2f4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_GPIO_Init+0x1fe>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a47      	ldr	r2, [pc, #284]	; (8003df8 <HAL_GPIO_Init+0x2f8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00d      	beq.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a46      	ldr	r2, [pc, #280]	; (8003dfc <HAL_GPIO_Init+0x2fc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <HAL_GPIO_Init+0x1f6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a45      	ldr	r2, [pc, #276]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <HAL_GPIO_Init+0x1f2>
 8003cee:	2304      	movs	r3, #4
 8003cf0:	e008      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cf2:	2307      	movs	r3, #7
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003d02:	2300      	movs	r3, #0
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f002 0203 	and.w	r2, r2, #3
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d14:	4935      	ldr	r1, [pc, #212]	; (8003dec <HAL_GPIO_Init+0x2ec>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d22:	4b38      	ldr	r3, [pc, #224]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d46:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d70:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d76:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da0:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	f67f aea2 	bls.w	8003b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40020400 	.word	0x40020400
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	40020c00 	.word	0x40020c00
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40013c00 	.word	0x40013c00

08003e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
 8003e24:	e001      	b.n	8003e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
 8003e44:	4613      	mov	r3, r2
 8003e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e48:	787b      	ldrb	r3, [r7, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e54:	e003      	b.n	8003e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	041a      	lsls	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	619a      	str	r2, [r3, #24]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e267      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d075      	beq.n	8003f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e8a:	4b88      	ldr	r3, [pc, #544]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d00c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e96:	4b85      	ldr	r3, [pc, #532]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d112      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea2:	4b82      	ldr	r3, [pc, #520]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eae:	d10b      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb0:	4b7e      	ldr	r3, [pc, #504]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05b      	beq.n	8003f74 <HAL_RCC_OscConfig+0x108>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d157      	bne.n	8003f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e242      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x74>
 8003ed2:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a75      	ldr	r2, [pc, #468]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e01d      	b.n	8003f1c <HAL_RCC_OscConfig+0xb0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x98>
 8003eea:	4b70      	ldr	r3, [pc, #448]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6f      	ldr	r2, [pc, #444]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6c      	ldr	r2, [pc, #432]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_OscConfig+0xb0>
 8003f04:	4b69      	ldr	r3, [pc, #420]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a68      	ldr	r2, [pc, #416]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b66      	ldr	r3, [pc, #408]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a65      	ldr	r2, [pc, #404]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d013      	beq.n	8003f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fe fcbe 	bl	80028a4 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fe fcba 	bl	80028a4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e207      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b5b      	ldr	r3, [pc, #364]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0xc0>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fe fcaa 	bl	80028a4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fe fca6 	bl	80028a4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e1f3      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	4b51      	ldr	r3, [pc, #324]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0xe8>
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d063      	beq.n	800404a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f82:	4b4a      	ldr	r3, [pc, #296]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d11c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f9a:	4b44      	ldr	r3, [pc, #272]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d116      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa6:	4b41      	ldr	r3, [pc, #260]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_RCC_OscConfig+0x152>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e1c7      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbe:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4937      	ldr	r1, [pc, #220]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	e03a      	b.n	800404a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fdc:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <HAL_RCC_OscConfig+0x244>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fe fc5f 	bl	80028a4 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fe fc5b 	bl	80028a4 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e1a8      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004008:	4b28      	ldr	r3, [pc, #160]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4925      	ldr	r1, [pc, #148]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]
 800401c:	e015      	b.n	800404a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <HAL_RCC_OscConfig+0x244>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe fc3e 	bl	80028a4 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402c:	f7fe fc3a 	bl	80028a4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e187      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d036      	beq.n	80040c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <HAL_RCC_OscConfig+0x248>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fe fc1e 	bl	80028a4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406c:	f7fe fc1a 	bl	80028a4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e167      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_OscConfig+0x240>)
 8004080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x200>
 800408a:	e01b      	b.n	80040c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <HAL_RCC_OscConfig+0x248>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004092:	f7fe fc07 	bl	80028a4 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004098:	e00e      	b.n	80040b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409a:	f7fe fc03 	bl	80028a4 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d907      	bls.n	80040b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e150      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
 80040ac:	40023800 	.word	0x40023800
 80040b0:	42470000 	.word	0x42470000
 80040b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b8:	4b88      	ldr	r3, [pc, #544]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1ea      	bne.n	800409a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8097 	beq.w	8004200 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d6:	4b81      	ldr	r3, [pc, #516]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	4b7d      	ldr	r3, [pc, #500]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4a7c      	ldr	r2, [pc, #496]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80040ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f0:	6413      	str	r3, [r2, #64]	; 0x40
 80040f2:	4b7a      	ldr	r3, [pc, #488]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004102:	4b77      	ldr	r3, [pc, #476]	; (80042e0 <HAL_RCC_OscConfig+0x474>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	2b00      	cmp	r3, #0
 800410c:	d118      	bne.n	8004140 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800410e:	4b74      	ldr	r3, [pc, #464]	; (80042e0 <HAL_RCC_OscConfig+0x474>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a73      	ldr	r2, [pc, #460]	; (80042e0 <HAL_RCC_OscConfig+0x474>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411a:	f7fe fbc3 	bl	80028a4 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004122:	f7fe fbbf 	bl	80028a4 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e10c      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004134:	4b6a      	ldr	r3, [pc, #424]	; (80042e0 <HAL_RCC_OscConfig+0x474>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x2ea>
 8004148:	4b64      	ldr	r3, [pc, #400]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a63      	ldr	r2, [pc, #396]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	e01c      	b.n	8004190 <HAL_RCC_OscConfig+0x324>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b05      	cmp	r3, #5
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0x30c>
 800415e:	4b5f      	ldr	r3, [pc, #380]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	4a5e      	ldr	r2, [pc, #376]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 8004164:	f043 0304 	orr.w	r3, r3, #4
 8004168:	6713      	str	r3, [r2, #112]	; 0x70
 800416a:	4b5c      	ldr	r3, [pc, #368]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	4a5b      	ldr	r2, [pc, #364]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6713      	str	r3, [r2, #112]	; 0x70
 8004176:	e00b      	b.n	8004190 <HAL_RCC_OscConfig+0x324>
 8004178:	4b58      	ldr	r3, [pc, #352]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	4a57      	ldr	r2, [pc, #348]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	6713      	str	r3, [r2, #112]	; 0x70
 8004184:	4b55      	ldr	r3, [pc, #340]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	4a54      	ldr	r2, [pc, #336]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 800418a:	f023 0304 	bic.w	r3, r3, #4
 800418e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d015      	beq.n	80041c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fe fb84 	bl	80028a4 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fe fb80 	bl	80028a4 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e0cb      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b6:	4b49      	ldr	r3, [pc, #292]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0ee      	beq.n	80041a0 <HAL_RCC_OscConfig+0x334>
 80041c2:	e014      	b.n	80041ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c4:	f7fe fb6e 	bl	80028a4 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041cc:	f7fe fb6a 	bl	80028a4 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0b5      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e2:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1ee      	bne.n	80041cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f4:	4b39      	ldr	r3, [pc, #228]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	4a38      	ldr	r2, [pc, #224]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80041fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80a1 	beq.w	800434c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800420a:	4b34      	ldr	r3, [pc, #208]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b08      	cmp	r3, #8
 8004214:	d05c      	beq.n	80042d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d141      	bne.n	80042a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <HAL_RCC_OscConfig+0x478>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe fb3e 	bl	80028a4 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422c:	f7fe fb3a 	bl	80028a4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e087      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	019b      	lsls	r3, r3, #6
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	3b01      	subs	r3, #1
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	491b      	ldr	r1, [pc, #108]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 8004270:	4313      	orrs	r3, r2
 8004272:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCC_OscConfig+0x478>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427a:	f7fe fb13 	bl	80028a4 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004282:	f7fe fb0f 	bl	80028a4 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e05c      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x416>
 80042a0:	e054      	b.n	800434c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_RCC_OscConfig+0x478>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fe fafc 	bl	80028a4 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fe faf8 	bl	80028a4 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e045      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_OscConfig+0x470>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x444>
 80042ce:	e03d      	b.n	800434c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e038      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40007000 	.word	0x40007000
 80042e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x4ec>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d028      	beq.n	8004348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d121      	bne.n	8004348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d11a      	bne.n	8004348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800431e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004320:	4293      	cmp	r3, r2
 8004322:	d111      	bne.n	8004348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	3b01      	subs	r3, #1
 8004332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d107      	bne.n	8004348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800

0800435c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0cc      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004370:	4b68      	ldr	r3, [pc, #416]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d90c      	bls.n	8004398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b65      	ldr	r3, [pc, #404]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b63      	ldr	r3, [pc, #396]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0b8      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b0:	4b59      	ldr	r3, [pc, #356]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043c8:	4b53      	ldr	r3, [pc, #332]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d4:	4b50      	ldr	r3, [pc, #320]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	494d      	ldr	r1, [pc, #308]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d044      	beq.n	800447c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b47      	ldr	r3, [pc, #284]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d119      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e07f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d003      	beq.n	800441a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004416:	2b03      	cmp	r3, #3
 8004418:	d107      	bne.n	800442a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e06f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442a:	4b3b      	ldr	r3, [pc, #236]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e067      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443a:	4b37      	ldr	r3, [pc, #220]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 0203 	bic.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4934      	ldr	r1, [pc, #208]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800444c:	f7fe fa2a 	bl	80028a4 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	e00a      	b.n	800446a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004454:	f7fe fa26 	bl	80028a4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e04f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446a:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 020c 	and.w	r2, r3, #12
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	429a      	cmp	r2, r3
 800447a:	d1eb      	bne.n	8004454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d20c      	bcs.n	80044a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b22      	ldr	r3, [pc, #136]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e032      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b0:	4b19      	ldr	r3, [pc, #100]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4916      	ldr	r1, [pc, #88]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	490e      	ldr	r1, [pc, #56]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044e2:	f000 f821 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80044e6:	4602      	mov	r2, r0
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	490a      	ldr	r1, [pc, #40]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 80044f4:	5ccb      	ldrb	r3, [r1, r3]
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	4a09      	ldr	r2, [pc, #36]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe f98a 	bl	800281c <HAL_InitTick>

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023c00 	.word	0x40023c00
 8004518:	40023800 	.word	0x40023800
 800451c:	08007a90 	.word	0x08007a90
 8004520:	20000248 	.word	0x20000248
 8004524:	2000024c 	.word	0x2000024c

08004528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800452c:	b094      	sub	sp, #80	; 0x50
 800452e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	647b      	str	r3, [r7, #68]	; 0x44
 8004534:	2300      	movs	r3, #0
 8004536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004538:	2300      	movs	r3, #0
 800453a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004540:	4b79      	ldr	r3, [pc, #484]	; (8004728 <HAL_RCC_GetSysClockFreq+0x200>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b08      	cmp	r3, #8
 800454a:	d00d      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x40>
 800454c:	2b08      	cmp	r3, #8
 800454e:	f200 80e1 	bhi.w	8004714 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x34>
 8004556:	2b04      	cmp	r3, #4
 8004558:	d003      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x3a>
 800455a:	e0db      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800455c:	4b73      	ldr	r3, [pc, #460]	; (800472c <HAL_RCC_GetSysClockFreq+0x204>)
 800455e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004560:	e0db      	b.n	800471a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004562:	4b73      	ldr	r3, [pc, #460]	; (8004730 <HAL_RCC_GetSysClockFreq+0x208>)
 8004564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004566:	e0d8      	b.n	800471a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004568:	4b6f      	ldr	r3, [pc, #444]	; (8004728 <HAL_RCC_GetSysClockFreq+0x200>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004570:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004572:	4b6d      	ldr	r3, [pc, #436]	; (8004728 <HAL_RCC_GetSysClockFreq+0x200>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d063      	beq.n	8004646 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457e:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <HAL_RCC_GetSysClockFreq+0x200>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	099b      	lsrs	r3, r3, #6
 8004584:	2200      	movs	r2, #0
 8004586:	63bb      	str	r3, [r7, #56]	; 0x38
 8004588:	63fa      	str	r2, [r7, #60]	; 0x3c
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
 8004592:	2300      	movs	r3, #0
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
 8004596:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800459a:	4622      	mov	r2, r4
 800459c:	462b      	mov	r3, r5
 800459e:	f04f 0000 	mov.w	r0, #0
 80045a2:	f04f 0100 	mov.w	r1, #0
 80045a6:	0159      	lsls	r1, r3, #5
 80045a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ac:	0150      	lsls	r0, r2, #5
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4621      	mov	r1, r4
 80045b4:	1a51      	subs	r1, r2, r1
 80045b6:	6139      	str	r1, [r7, #16]
 80045b8:	4629      	mov	r1, r5
 80045ba:	eb63 0301 	sbc.w	r3, r3, r1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045cc:	4659      	mov	r1, fp
 80045ce:	018b      	lsls	r3, r1, #6
 80045d0:	4651      	mov	r1, sl
 80045d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045d6:	4651      	mov	r1, sl
 80045d8:	018a      	lsls	r2, r1, #6
 80045da:	4651      	mov	r1, sl
 80045dc:	ebb2 0801 	subs.w	r8, r2, r1
 80045e0:	4659      	mov	r1, fp
 80045e2:	eb63 0901 	sbc.w	r9, r3, r1
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045fa:	4690      	mov	r8, r2
 80045fc:	4699      	mov	r9, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	eb18 0303 	adds.w	r3, r8, r3
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	462b      	mov	r3, r5
 8004608:	eb49 0303 	adc.w	r3, r9, r3
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800461a:	4629      	mov	r1, r5
 800461c:	024b      	lsls	r3, r1, #9
 800461e:	4621      	mov	r1, r4
 8004620:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004624:	4621      	mov	r1, r4
 8004626:	024a      	lsls	r2, r1, #9
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462e:	2200      	movs	r2, #0
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
 8004632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004638:	f7fc fa74 	bl	8000b24 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4613      	mov	r3, r2
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004644:	e058      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004646:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_RCC_GetSysClockFreq+0x200>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	099b      	lsrs	r3, r3, #6
 800464c:	2200      	movs	r2, #0
 800464e:	4618      	mov	r0, r3
 8004650:	4611      	mov	r1, r2
 8004652:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	2300      	movs	r3, #0
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
 800465c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	f04f 0000 	mov.w	r0, #0
 8004668:	f04f 0100 	mov.w	r1, #0
 800466c:	0159      	lsls	r1, r3, #5
 800466e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004672:	0150      	lsls	r0, r2, #5
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4641      	mov	r1, r8
 800467a:	ebb2 0a01 	subs.w	sl, r2, r1
 800467e:	4649      	mov	r1, r9
 8004680:	eb63 0b01 	sbc.w	fp, r3, r1
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004690:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004694:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004698:	ebb2 040a 	subs.w	r4, r2, sl
 800469c:	eb63 050b 	sbc.w	r5, r3, fp
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	00eb      	lsls	r3, r5, #3
 80046aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ae:	00e2      	lsls	r2, r4, #3
 80046b0:	4614      	mov	r4, r2
 80046b2:	461d      	mov	r5, r3
 80046b4:	4643      	mov	r3, r8
 80046b6:	18e3      	adds	r3, r4, r3
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	464b      	mov	r3, r9
 80046bc:	eb45 0303 	adc.w	r3, r5, r3
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ce:	4629      	mov	r1, r5
 80046d0:	028b      	lsls	r3, r1, #10
 80046d2:	4621      	mov	r1, r4
 80046d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046d8:	4621      	mov	r1, r4
 80046da:	028a      	lsls	r2, r1, #10
 80046dc:	4610      	mov	r0, r2
 80046de:	4619      	mov	r1, r3
 80046e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e2:	2200      	movs	r2, #0
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	61fa      	str	r2, [r7, #28]
 80046e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ec:	f7fc fa1a 	bl	8000b24 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4613      	mov	r3, r2
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCC_GetSysClockFreq+0x200>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	3301      	adds	r3, #1
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800470a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004712:	e002      	b.n	800471a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCC_GetSysClockFreq+0x204>)
 8004716:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800471c:	4618      	mov	r0, r3
 800471e:	3750      	adds	r7, #80	; 0x50
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800
 800472c:	00f42400 	.word	0x00f42400
 8004730:	007a1200 	.word	0x007a1200

08004734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004738:	4b03      	ldr	r3, [pc, #12]	; (8004748 <HAL_RCC_GetHCLKFreq+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000248 	.word	0x20000248

0800474c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004750:	f7ff fff0 	bl	8004734 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	0a9b      	lsrs	r3, r3, #10
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4903      	ldr	r1, [pc, #12]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004768:	4618      	mov	r0, r3
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40023800 	.word	0x40023800
 8004770:	08007aa0 	.word	0x08007aa0

08004774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004778:	f7ff ffdc 	bl	8004734 <HAL_RCC_GetHCLKFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	0b5b      	lsrs	r3, r3, #13
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	4903      	ldr	r1, [pc, #12]	; (8004798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40023800 	.word	0x40023800
 8004798:	08007aa0 	.word	0x08007aa0

0800479c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e04c      	b.n	8004848 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d111      	bne.n	80047de <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f001 fad4 	bl	8005d70 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <HAL_TIM_Base_Init+0xb4>)
 80047d4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f000 fff1 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	08002251 	.word	0x08002251

08004854 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e03c      	b.n	80048e6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1e      	ldr	r2, [pc, #120]	; (80048f4 <HAL_TIM_Base_Start+0xa0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_TIM_Base_Start+0x5c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d013      	beq.n	80048b0 <HAL_TIM_Base_Start+0x5c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <HAL_TIM_Base_Start+0xa4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_TIM_Base_Start+0x5c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a19      	ldr	r2, [pc, #100]	; (80048fc <HAL_TIM_Base_Start+0xa8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_TIM_Base_Start+0x5c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_TIM_Base_Start+0xac>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIM_Base_Start+0x5c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a16      	ldr	r2, [pc, #88]	; (8004904 <HAL_TIM_Base_Start+0xb0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d111      	bne.n	80048d4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b06      	cmp	r3, #6
 80048c0:	d010      	beq.n	80048e4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	e007      	b.n	80048e4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40014000 	.word	0x40014000

08004908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d001      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e044      	b.n	80049aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x6c>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d013      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x6c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_TIM_Base_Start_IT+0xb4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x6c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x6c>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x6c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d111      	bne.n	8004998 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b06      	cmp	r3, #6
 8004984:	d010      	beq.n	80049a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	e007      	b.n	80049a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40014000 	.word	0x40014000

080049cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e04c      	b.n	8004a78 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d111      	bne.n	8004a0e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f001 f9bc 	bl	8005d70 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <HAL_TIM_OC_Init+0xb4>)
 8004a04:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f000 fed9 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08004a85 	.word	0x08004a85

08004a84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e04c      	b.n	8004b44 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d111      	bne.n	8004ada <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f001 f956 	bl	8005d70 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_TIM_PWM_Init+0xb4>)
 8004ad0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f000 fe73 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	08004b51 	.word	0x08004b51

08004b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x24>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e022      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d109      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x3e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e015      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x58>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e008      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e068      	b.n	8004ca8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0x82>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	e013      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0x92>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf4:	e00b      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xa2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c04:	e003      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2201      	movs	r2, #1
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 f884 	bl	8005d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a23      	ldr	r2, [pc, #140]	; (8004cb0 <HAL_TIM_PWM_Start+0x14c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d107      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <HAL_TIM_PWM_Start+0x14c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c48:	d013      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <HAL_TIM_PWM_Start+0x150>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <HAL_TIM_PWM_Start+0x154>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <HAL_TIM_PWM_Start+0x158>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_TIM_PWM_Start+0x10e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a14      	ldr	r2, [pc, #80]	; (8004cc0 <HAL_TIM_PWM_Start+0x15c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d111      	bne.n	8004c96 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b06      	cmp	r3, #6
 8004c82:	d010      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c94:	e007      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40014000 	.word	0x40014000

08004cc4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e04c      	b.n	8004d72 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d111      	bne.n	8004d08 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 f83f 	bl	8005d70 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_TIM_OnePulse_Init+0xb8>)
 8004cfe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fd5c 	bl	80057d8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0208 	bic.w	r2, r2, #8
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	08004d81 	.word	0x08004d81

08004d80 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004db4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dbc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d108      	bne.n	8004dd6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc4:	7bbb      	ldrb	r3, [r7, #14]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d105      	bne.n	8004dd6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dca:	7b7b      	ldrb	r3, [r7, #13]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d102      	bne.n	8004dd6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dd0:	7b3b      	ldrb	r3, [r7, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e03b      	b.n	8004e52 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0202 	orr.w	r2, r2, #2
 8004e08:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0204 	orr.w	r2, r2, #4
 8004e18:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 ff7e 	bl	8005d24 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2104      	movs	r1, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 ff77 	bl	8005d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d107      	bne.n	8004e50 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40010000 	.word	0x40010000

08004e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d128      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d121      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0202 	mvn.w	r2, #2
 8004e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
 8004eac:	e009      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d128      	bne.n	8004f28 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d121      	bne.n	8004f28 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0204 	mvn.w	r2, #4
 8004eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
 8004f0c:	e009      	b.n	8004f22 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d128      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d121      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0208 	mvn.w	r2, #8
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2204      	movs	r2, #4
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	4798      	blx	r3
 8004f6c:	e009      	b.n	8004f82 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d128      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d121      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0210 	mvn.w	r2, #16
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
 8004fcc:	e009      	b.n	8004fe2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d110      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d109      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0201 	mvn.w	r2, #1
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d110      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d109      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d110      	bne.n	8005078 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d109      	bne.n	8005078 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d110      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b20      	cmp	r3, #32
 8005092:	d109      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0220 	mvn.w	r2, #32
 800509c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_OC_ConfigChannel+0x1e>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e048      	b.n	8005160 <HAL_TIM_OC_ConfigChannel+0xb0>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d839      	bhi.n	8005150 <HAL_TIM_OC_ConfigChannel+0xa0>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005119 	.word	0x08005119
 80050e8:	08005151 	.word	0x08005151
 80050ec:	08005151 	.word	0x08005151
 80050f0:	08005151 	.word	0x08005151
 80050f4:	08005127 	.word	0x08005127
 80050f8:	08005151 	.word	0x08005151
 80050fc:	08005151 	.word	0x08005151
 8005100:	08005151 	.word	0x08005151
 8005104:	08005135 	.word	0x08005135
 8005108:	08005151 	.word	0x08005151
 800510c:	08005151 	.word	0x08005151
 8005110:	08005151 	.word	0x08005151
 8005114:	08005143 	.word	0x08005143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fbda 	bl	80058d8 <TIM_OC1_SetConfig>
      break;
 8005124:	e017      	b.n	8005156 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fc39 	bl	80059a4 <TIM_OC2_SetConfig>
      break;
 8005132:	e010      	b.n	8005156 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fc9e 	bl	8005a7c <TIM_OC3_SetConfig>
      break;
 8005140:	e009      	b.n	8005156 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fd01 	bl	8005b50 <TIM_OC4_SetConfig>
      break;
 800514e:	e002      	b.n	8005156 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
      break;
 8005154:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e0ae      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	f200 809f 	bhi.w	80052d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080052d5 	.word	0x080052d5
 80051a4:	080052d5 	.word	0x080052d5
 80051a8:	080052d5 	.word	0x080052d5
 80051ac:	08005211 	.word	0x08005211
 80051b0:	080052d5 	.word	0x080052d5
 80051b4:	080052d5 	.word	0x080052d5
 80051b8:	080052d5 	.word	0x080052d5
 80051bc:	08005253 	.word	0x08005253
 80051c0:	080052d5 	.word	0x080052d5
 80051c4:	080052d5 	.word	0x080052d5
 80051c8:	080052d5 	.word	0x080052d5
 80051cc:	08005293 	.word	0x08005293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fb7e 	bl	80058d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0208 	orr.w	r2, r2, #8
 80051ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6999      	ldr	r1, [r3, #24]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	619a      	str	r2, [r3, #24]
      break;
 800520e:	e064      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fbc4 	bl	80059a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6999      	ldr	r1, [r3, #24]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	619a      	str	r2, [r3, #24]
      break;
 8005250:	e043      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fc0f 	bl	8005a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0208 	orr.w	r2, r2, #8
 800526c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0204 	bic.w	r2, r2, #4
 800527c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69d9      	ldr	r1, [r3, #28]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	61da      	str	r2, [r3, #28]
      break;
 8005290:	e023      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fc59 	bl	8005b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69d9      	ldr	r1, [r3, #28]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	021a      	lsls	r2, r3, #8
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	61da      	str	r2, [r3, #28]
      break;
 80052d2:	e002      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
      break;
 80052d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIM_ConfigClockSource+0x1c>
 8005304:	2302      	movs	r3, #2
 8005306:	e0b4      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x186>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005340:	d03e      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005346:	f200 8087 	bhi.w	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534e:	f000 8086 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x172>
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005356:	d87f      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b70      	cmp	r3, #112	; 0x70
 800535a:	d01a      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0xa6>
 800535c:	2b70      	cmp	r3, #112	; 0x70
 800535e:	d87b      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b60      	cmp	r3, #96	; 0x60
 8005362:	d050      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x11a>
 8005364:	2b60      	cmp	r3, #96	; 0x60
 8005366:	d877      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b50      	cmp	r3, #80	; 0x50
 800536a:	d03c      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0xfa>
 800536c:	2b50      	cmp	r3, #80	; 0x50
 800536e:	d873      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d058      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x13a>
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d86f      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b30      	cmp	r3, #48	; 0x30
 800537a:	d064      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	2b30      	cmp	r3, #48	; 0x30
 800537e:	d86b      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b20      	cmp	r3, #32
 8005382:	d060      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 8005384:	2b20      	cmp	r3, #32
 8005386:	d867      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d05c      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 800538c:	2b10      	cmp	r3, #16
 800538e:	d05a      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 8005390:	e062      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6899      	ldr	r1, [r3, #8]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f000 fc9f 	bl	8005ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	609a      	str	r2, [r3, #8]
      break;
 80053be:	e04f      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6899      	ldr	r1, [r3, #8]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f000 fc88 	bl	8005ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e2:	609a      	str	r2, [r3, #8]
      break;
 80053e4:	e03c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f000 fbfc 	bl	8005bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2150      	movs	r1, #80	; 0x50
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fc55 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005404:	e02c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	461a      	mov	r2, r3
 8005414:	f000 fc1b 	bl	8005c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2160      	movs	r1, #96	; 0x60
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fc45 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005424:	e01c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	461a      	mov	r2, r3
 8005434:	f000 fbdc 	bl	8005bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2140      	movs	r1, #64	; 0x40
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fc35 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005444:	e00c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f000 fc2c 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005456:	e003      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
      break;
 800545c:	e000      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800545e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	460b      	mov	r3, r1
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e135      	b.n	80057cc <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_TIM_RegisterCallback+0x2a>
 800556a:	2302      	movs	r3, #2
 800556c:	e12e      	b.n	80057cc <HAL_TIM_RegisterCallback+0x288>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	f040 80ba 	bne.w	80056f8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8005584:	7afb      	ldrb	r3, [r7, #11]
 8005586:	2b1a      	cmp	r3, #26
 8005588:	f200 80b3 	bhi.w	80056f2 <HAL_TIM_RegisterCallback+0x1ae>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_TIM_RegisterCallback+0x50>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	08005601 	.word	0x08005601
 8005598:	08005609 	.word	0x08005609
 800559c:	08005611 	.word	0x08005611
 80055a0:	08005619 	.word	0x08005619
 80055a4:	08005621 	.word	0x08005621
 80055a8:	08005629 	.word	0x08005629
 80055ac:	08005631 	.word	0x08005631
 80055b0:	08005639 	.word	0x08005639
 80055b4:	08005641 	.word	0x08005641
 80055b8:	08005649 	.word	0x08005649
 80055bc:	08005651 	.word	0x08005651
 80055c0:	08005659 	.word	0x08005659
 80055c4:	08005661 	.word	0x08005661
 80055c8:	08005669 	.word	0x08005669
 80055cc:	08005671 	.word	0x08005671
 80055d0:	0800567b 	.word	0x0800567b
 80055d4:	08005685 	.word	0x08005685
 80055d8:	0800568f 	.word	0x0800568f
 80055dc:	08005699 	.word	0x08005699
 80055e0:	080056a3 	.word	0x080056a3
 80055e4:	080056ad 	.word	0x080056ad
 80055e8:	080056b7 	.word	0x080056b7
 80055ec:	080056c1 	.word	0x080056c1
 80055f0:	080056cb 	.word	0x080056cb
 80055f4:	080056d5 	.word	0x080056d5
 80055f8:	080056df 	.word	0x080056df
 80055fc:	080056e9 	.word	0x080056e9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005606:	e0dc      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800560e:	e0d8      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005616:	e0d4      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800561e:	e0d0      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005626:	e0cc      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800562e:	e0c8      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005636:	e0c4      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800563e:	e0c0      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005646:	e0bc      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800564e:	e0b8      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005656:	e0b4      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800565e:	e0b0      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005666:	e0ac      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800566e:	e0a8      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8005678:	e0a3      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8005682:	e09e      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800568c:	e099      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8005696:	e094      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80056a0:	e08f      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80056aa:	e08a      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80056b4:	e085      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80056be:	e080      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80056c8:	e07b      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80056d2:	e076      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80056dc:	e071      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80056e6:	e06c      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80056f0:	e067      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
        break;
 80056f6:	e064      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d15c      	bne.n	80057be <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8005704:	7afb      	ldrb	r3, [r7, #11]
 8005706:	2b0d      	cmp	r3, #13
 8005708:	d856      	bhi.n	80057b8 <HAL_TIM_RegisterCallback+0x274>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <HAL_TIM_RegisterCallback+0x1cc>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005749 	.word	0x08005749
 8005714:	08005751 	.word	0x08005751
 8005718:	08005759 	.word	0x08005759
 800571c:	08005761 	.word	0x08005761
 8005720:	08005769 	.word	0x08005769
 8005724:	08005771 	.word	0x08005771
 8005728:	08005779 	.word	0x08005779
 800572c:	08005781 	.word	0x08005781
 8005730:	08005789 	.word	0x08005789
 8005734:	08005791 	.word	0x08005791
 8005738:	08005799 	.word	0x08005799
 800573c:	080057a1 	.word	0x080057a1
 8005740:	080057a9 	.word	0x080057a9
 8005744:	080057b1 	.word	0x080057b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800574e:	e038      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8005756:	e034      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800575e:	e030      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005766:	e02c      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800576e:	e028      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005776:	e024      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800577e:	e020      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8005786:	e01c      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800578e:	e018      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005796:	e014      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800579e:	e010      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80057a6:	e00c      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80057ae:	e008      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80057b6:	e004      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
        break;
 80057bc:	e001      	b.n	80057c2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a34      	ldr	r2, [pc, #208]	; (80058bc <TIM_Base_SetConfig+0xe4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00f      	beq.n	8005810 <TIM_Base_SetConfig+0x38>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d00b      	beq.n	8005810 <TIM_Base_SetConfig+0x38>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a31      	ldr	r2, [pc, #196]	; (80058c0 <TIM_Base_SetConfig+0xe8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_Base_SetConfig+0x38>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a30      	ldr	r2, [pc, #192]	; (80058c4 <TIM_Base_SetConfig+0xec>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_Base_SetConfig+0x38>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a2f      	ldr	r2, [pc, #188]	; (80058c8 <TIM_Base_SetConfig+0xf0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d108      	bne.n	8005822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a25      	ldr	r2, [pc, #148]	; (80058bc <TIM_Base_SetConfig+0xe4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01b      	beq.n	8005862 <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d017      	beq.n	8005862 <TIM_Base_SetConfig+0x8a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a22      	ldr	r2, [pc, #136]	; (80058c0 <TIM_Base_SetConfig+0xe8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <TIM_Base_SetConfig+0x8a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <TIM_Base_SetConfig+0xec>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00f      	beq.n	8005862 <TIM_Base_SetConfig+0x8a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a20      	ldr	r2, [pc, #128]	; (80058c8 <TIM_Base_SetConfig+0xf0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00b      	beq.n	8005862 <TIM_Base_SetConfig+0x8a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <TIM_Base_SetConfig+0xf4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d007      	beq.n	8005862 <TIM_Base_SetConfig+0x8a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <TIM_Base_SetConfig+0xf8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d003      	beq.n	8005862 <TIM_Base_SetConfig+0x8a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <TIM_Base_SetConfig+0xfc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d108      	bne.n	8005874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a08      	ldr	r2, [pc, #32]	; (80058bc <TIM_Base_SetConfig+0xe4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	615a      	str	r2, [r3, #20]
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40014400 	.word	0x40014400
 80058d4:	40014800 	.word	0x40014800

080058d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 0302 	bic.w	r3, r3, #2
 8005920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <TIM_OC1_SetConfig+0xc8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10c      	bne.n	800594e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0308 	bic.w	r3, r3, #8
 800593a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <TIM_OC1_SetConfig+0xc8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d111      	bne.n	800597a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800595c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	621a      	str	r2, [r3, #32]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	40010000 	.word	0x40010000

080059a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0210 	bic.w	r2, r3, #16
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0320 	bic.w	r3, r3, #32
 80059ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <TIM_OC2_SetConfig+0xd4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d10d      	bne.n	8005a20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <TIM_OC2_SetConfig+0xd4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d113      	bne.n	8005a50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000

08005a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <TIM_OC3_SetConfig+0xd0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d10d      	bne.n	8005af6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a14      	ldr	r2, [pc, #80]	; (8005b4c <TIM_OC3_SetConfig+0xd0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d113      	bne.n	8005b26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	621a      	str	r2, [r3, #32]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40010000 	.word	0x40010000

08005b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	031b      	lsls	r3, r3, #12
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a10      	ldr	r2, [pc, #64]	; (8005bec <TIM_OC4_SetConfig+0x9c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d109      	bne.n	8005bc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	019b      	lsls	r3, r3, #6
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40010000 	.word	0x40010000

08005bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0201 	bic.w	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 030a 	bic.w	r3, r3, #10
 8005c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b087      	sub	sp, #28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0210 	bic.w	r2, r3, #16
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	031b      	lsls	r3, r3, #12
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f043 0307 	orr.w	r3, r3, #7
 8005cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	609a      	str	r2, [r3, #8]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	609a      	str	r2, [r3, #8]
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	2201      	movs	r2, #1
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1a      	ldr	r2, [r3, #32]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1c      	ldr	r2, [pc, #112]	; (8005dec <TIM_ResetCallback+0x7c>)
 8005d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <TIM_ResetCallback+0x80>)
 8005d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <TIM_ResetCallback+0x84>)
 8005d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <TIM_ResetCallback+0x88>)
 8005d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <TIM_ResetCallback+0x8c>)
 8005d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a17      	ldr	r2, [pc, #92]	; (8005e00 <TIM_ResetCallback+0x90>)
 8005da4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a16      	ldr	r2, [pc, #88]	; (8005e04 <TIM_ResetCallback+0x94>)
 8005dac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <TIM_ResetCallback+0x98>)
 8005db4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a14      	ldr	r2, [pc, #80]	; (8005e0c <TIM_ResetCallback+0x9c>)
 8005dbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a13      	ldr	r2, [pc, #76]	; (8005e10 <TIM_ResetCallback+0xa0>)
 8005dc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <TIM_ResetCallback+0xa4>)
 8005dcc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a11      	ldr	r2, [pc, #68]	; (8005e18 <TIM_ResetCallback+0xa8>)
 8005dd4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a10      	ldr	r2, [pc, #64]	; (8005e1c <TIM_ResetCallback+0xac>)
 8005ddc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	0800547b 	.word	0x0800547b
 8005df0:	0800548f 	.word	0x0800548f
 8005df4:	08005507 	.word	0x08005507
 8005df8:	0800551b 	.word	0x0800551b
 8005dfc:	080054b7 	.word	0x080054b7
 8005e00:	080054cb 	.word	0x080054cb
 8005e04:	080054a3 	.word	0x080054a3
 8005e08:	080054df 	.word	0x080054df
 8005e0c:	080054f3 	.word	0x080054f3
 8005e10:	0800552f 	.word	0x0800552f
 8005e14:	08005fa1 	.word	0x08005fa1
 8005e18:	08005fb5 	.word	0x08005fb5
 8005e1c:	08005fc9 	.word	0x08005fc9

08005e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e050      	b.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d018      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d013      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a18      	ldr	r2, [pc, #96]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10c      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40000c00 	.word	0x40000c00
 8005ef8:	40014000 	.word	0x40014000

08005efc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e03d      	b.n	8005f94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e04a      	b.n	8006084 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d111      	bne.n	800601e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fd2c 	bl	8006a60 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a1e      	ldr	r2, [pc, #120]	; (800608c <HAL_UART_Init+0xb0>)
 8006014:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2224      	movs	r2, #36	; 0x24
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006034:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fff6 	bl	8007028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800604a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800605a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800606a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	0800238d 	.word	0x0800238d

08006090 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	460b      	mov	r3, r1
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d107      	bne.n	80060b8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e08c      	b.n	80061d2 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_UART_RegisterCallback+0x36>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e085      	b.n	80061d2 <HAL_UART_RegisterCallback+0x142>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d151      	bne.n	800617e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	2b0c      	cmp	r3, #12
 80060de:	d845      	bhi.n	800616c <HAL_UART_RegisterCallback+0xdc>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <HAL_UART_RegisterCallback+0x58>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	0800611d 	.word	0x0800611d
 80060ec:	08006125 	.word	0x08006125
 80060f0:	0800612d 	.word	0x0800612d
 80060f4:	08006135 	.word	0x08006135
 80060f8:	0800613d 	.word	0x0800613d
 80060fc:	08006145 	.word	0x08006145
 8006100:	0800614d 	.word	0x0800614d
 8006104:	08006155 	.word	0x08006155
 8006108:	0800616d 	.word	0x0800616d
 800610c:	0800616d 	.word	0x0800616d
 8006110:	0800616d 	.word	0x0800616d
 8006114:	0800615d 	.word	0x0800615d
 8006118:	08006165 	.word	0x08006165
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8006122:	e051      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800612a:	e04d      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006132:	e049      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800613a:	e045      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006142:	e041      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800614a:	e03d      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006152:	e039      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800615a:	e035      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006162:	e031      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800616a:	e02d      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	f043 0220 	orr.w	r2, r3, #32
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
        break;
 800617c:	e024      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d116      	bne.n	80061b8 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800618a:	7afb      	ldrb	r3, [r7, #11]
 800618c:	2b0b      	cmp	r3, #11
 800618e:	d002      	beq.n	8006196 <HAL_UART_RegisterCallback+0x106>
 8006190:	2b0c      	cmp	r3, #12
 8006192:	d004      	beq.n	800619e <HAL_UART_RegisterCallback+0x10e>
 8006194:	e007      	b.n	80061a6 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800619c:	e014      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80061a4:	e010      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f043 0220 	orr.w	r2, r3, #32
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	75fb      	strb	r3, [r7, #23]
        break;
 80061b6:	e007      	b.n	80061c8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	f043 0220 	orr.w	r2, r3, #32
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop

080061e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d11d      	bne.n	8006236 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_Receive_IT+0x26>
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e016      	b.n	8006238 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_UART_Receive_IT+0x38>
 8006214:	2302      	movs	r3, #2
 8006216:	e00f      	b.n	8006238 <HAL_UART_Receive_IT+0x58>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	461a      	mov	r2, r3
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fcf7 	bl	8006c20 <UART_Start_Receive_IT>
 8006232:	4603      	mov	r3, r0
 8006234:	e000      	b.n	8006238 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006236:	2302      	movs	r3, #2
  }
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08c      	sub	sp, #48	; 0x30
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b20      	cmp	r3, #32
 8006258:	d165      	bne.n	8006326 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_UART_Transmit_DMA+0x26>
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e05e      	b.n	8006328 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_UART_Transmit_DMA+0x38>
 8006274:	2302      	movs	r3, #2
 8006276:	e057      	b.n	8006328 <HAL_UART_Transmit_DMA+0xe8>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2221      	movs	r2, #33	; 0x21
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a4:	4a22      	ldr	r2, [pc, #136]	; (8006330 <HAL_UART_Transmit_DMA+0xf0>)
 80062a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ac:	4a21      	ldr	r2, [pc, #132]	; (8006334 <HAL_UART_Transmit_DMA+0xf4>)
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b4:	4a20      	ldr	r2, [pc, #128]	; (8006338 <HAL_UART_Transmit_DMA+0xf8>)
 80062b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	2200      	movs	r2, #0
 80062be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80062c0:	f107 0308 	add.w	r3, r7, #8
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	6819      	ldr	r1, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3304      	adds	r3, #4
 80062d4:	461a      	mov	r2, r3
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	f7fd f8b2 	bl	8003440 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062e4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3314      	adds	r3, #20
 80062f4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	617b      	str	r3, [r7, #20]
   return(result);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3314      	adds	r3, #20
 800630c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800630e:	627a      	str	r2, [r7, #36]	; 0x24
 8006310:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6a39      	ldr	r1, [r7, #32]
 8006314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	61fb      	str	r3, [r7, #28]
   return(result);
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e5      	bne.n	80062ee <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	e000      	b.n	8006328 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3730      	adds	r7, #48	; 0x30
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08006ad1 	.word	0x08006ad1
 8006334:	08006b6d 	.word	0x08006b6d
 8006338:	08006b8b 	.word	0x08006b8b

0800633c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b09a      	sub	sp, #104	; 0x68
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800635a:	667b      	str	r3, [r7, #100]	; 0x64
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006364:	657a      	str	r2, [r7, #84]	; 0x54
 8006366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800636a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	663b      	str	r3, [r7, #96]	; 0x60
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3314      	adds	r3, #20
 8006396:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006398:	643a      	str	r2, [r7, #64]	; 0x40
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800639e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e5      	bne.n	8006378 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d119      	bne.n	80063e8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f023 0310 	bic.w	r3, r3, #16
 80063ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e5      	bne.n	80063b4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d136      	bne.n	8006464 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	60bb      	str	r3, [r7, #8]
   return(result);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	65bb      	str	r3, [r7, #88]	; 0x58
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006416:	61ba      	str	r2, [r7, #24]
 8006418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6979      	ldr	r1, [r7, #20]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d018      	beq.n	8006464 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	2200      	movs	r2, #0
 8006438:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	4618      	mov	r0, r3
 8006440:	f7fd f856 	bl	80034f0 <HAL_DMA_Abort>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00c      	beq.n	8006464 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	4618      	mov	r0, r3
 8006450:	f7fd fa6a 	bl	8003928 <HAL_DMA_GetError>
 8006454:	4603      	mov	r3, r0
 8006456:	2b20      	cmp	r3, #32
 8006458:	d104      	bne.n	8006464 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2210      	movs	r2, #16
 800645e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e00a      	b.n	800647a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3768      	adds	r7, #104	; 0x68
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b0ba      	sub	sp, #232	; 0xe8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <HAL_UART_IRQHandler+0x66>
 80064d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fce3 	bl	8006eae <UART_Receive_IT>
      return;
 80064e8:	e25b      	b.n	80069a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80e1 	beq.w	80066b6 <HAL_UART_IRQHandler+0x232>
 80064f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d106      	bne.n	800650e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006504:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80d4 	beq.w	80066b6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <HAL_UART_IRQHandler+0xae>
 800651a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f043 0201 	orr.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <HAL_UART_IRQHandler+0xd2>
 800653e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f043 0202 	orr.w	r2, r3, #2
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <HAL_UART_IRQHandler+0xf6>
 8006562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f043 0204 	orr.w	r2, r3, #4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d011      	beq.n	80065aa <HAL_UART_IRQHandler+0x126>
 8006586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d105      	bne.n	800659e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f043 0208 	orr.w	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 81f2 	beq.w	8006998 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_UART_IRQHandler+0x14e>
 80065c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fc6e 	bl	8006eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	bf0c      	ite	eq
 80065e0:	2301      	moveq	r3, #1
 80065e2:	2300      	movne	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d103      	bne.n	80065fe <HAL_UART_IRQHandler+0x17a>
 80065f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d051      	beq.n	80066a2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fb74 	bl	8006cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d142      	bne.n	8006698 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800662c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3314      	adds	r3, #20
 800663a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800663e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800664a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1d9      	bne.n	8006612 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	2b00      	cmp	r3, #0
 8006664:	d013      	beq.n	800668e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	4a7f      	ldr	r2, [pc, #508]	; (8006868 <HAL_UART_IRQHandler+0x3e4>)
 800666c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	4618      	mov	r0, r3
 8006674:	f7fc ffac 	bl	80035d0 <HAL_DMA_Abort_IT>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d019      	beq.n	80066b2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	e011      	b.n	80066b2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006696:	e00c      	b.n	80066b2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	e007      	b.n	80066b2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066b0:	e172      	b.n	8006998 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b2:	bf00      	nop
    return;
 80066b4:	e170      	b.n	8006998 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	f040 814c 	bne.w	8006958 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8145 	beq.w	8006958 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d2:	f003 0310 	and.w	r3, r3, #16
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 813e 	beq.w	8006958 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066dc:	2300      	movs	r3, #0
 80066de:	60bb      	str	r3, [r7, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60bb      	str	r3, [r7, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	f040 80b5 	bne.w	800686c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800670e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8142 	beq.w	800699c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800671c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006720:	429a      	cmp	r2, r3
 8006722:	f080 813b 	bcs.w	800699c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800672c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006738:	f000 8088 	beq.w	800684c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	330c      	adds	r3, #12
 8006764:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006768:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800676c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006774:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1d9      	bne.n	800673c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3314      	adds	r3, #20
 800678e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3314      	adds	r3, #20
 80067a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e1      	bne.n	8006788 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3314      	adds	r3, #20
 80067ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e3      	bne.n	80067c4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800681a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681c:	f023 0310 	bic.w	r3, r3, #16
 8006820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800682e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006830:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800683c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e3      	bne.n	800680a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	4618      	mov	r0, r3
 8006848:	f7fc fe52 	bl	80034f0 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006858:	b292      	uxth	r2, r2
 800685a:	1a8a      	subs	r2, r1, r2
 800685c:	b292      	uxth	r2, r2
 800685e:	4611      	mov	r1, r2
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006864:	e09a      	b.n	800699c <HAL_UART_IRQHandler+0x518>
 8006866:	bf00      	nop
 8006868:	08006db3 	.word	0x08006db3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006874:	b29b      	uxth	r3, r3
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 808c 	beq.w	80069a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8087 	beq.w	80069a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	330c      	adds	r3, #12
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068b6:	647a      	str	r2, [r7, #68]	; 0x44
 80068b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e3      	bne.n	8006892 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	623b      	str	r3, [r7, #32]
   return(result);
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3314      	adds	r3, #20
 80068ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068ee:	633a      	str	r2, [r7, #48]	; 0x30
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e3      	bne.n	80068ca <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0310 	bic.w	r3, r3, #16
 8006926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006934:	61fa      	str	r2, [r7, #28]
 8006936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	69b9      	ldr	r1, [r7, #24]
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	617b      	str	r3, [r7, #20]
   return(result);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e3      	bne.n	8006910 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006950:	4611      	mov	r1, r2
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006956:	e023      	b.n	80069a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <HAL_UART_IRQHandler+0x4f4>
 8006964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fa33 	bl	8006ddc <UART_Transmit_IT>
    return;
 8006976:	e014      	b.n	80069a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <HAL_UART_IRQHandler+0x51e>
 8006984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fa73 	bl	8006e7c <UART_EndTransmit_IT>
    return;
 8006996:	e004      	b.n	80069a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006998:	bf00      	nop
 800699a:	e002      	b.n	80069a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80069a0:	bf00      	nop
  }
}
 80069a2:	37e8      	adds	r7, #232	; 0xe8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a10      	ldr	r2, [pc, #64]	; (8006aac <UART_InitCallbacksToDefault+0x4c>)
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <UART_InitCallbacksToDefault+0x50>)
 8006a72:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a0f      	ldr	r2, [pc, #60]	; (8006ab4 <UART_InitCallbacksToDefault+0x54>)
 8006a78:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a0e      	ldr	r2, [pc, #56]	; (8006ab8 <UART_InitCallbacksToDefault+0x58>)
 8006a7e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a0e      	ldr	r2, [pc, #56]	; (8006abc <UART_InitCallbacksToDefault+0x5c>)
 8006a84:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <UART_InitCallbacksToDefault+0x60>)
 8006a8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a0d      	ldr	r2, [pc, #52]	; (8006ac4 <UART_InitCallbacksToDefault+0x64>)
 8006a90:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a0c      	ldr	r2, [pc, #48]	; (8006ac8 <UART_InitCallbacksToDefault+0x68>)
 8006a96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <UART_InitCallbacksToDefault+0x6c>)
 8006a9c:	669a      	str	r2, [r3, #104]	; 0x68

}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	080069bd 	.word	0x080069bd
 8006ab0:	080069a9 	.word	0x080069a9
 8006ab4:	080069e5 	.word	0x080069e5
 8006ab8:	080069d1 	.word	0x080069d1
 8006abc:	080069f9 	.word	0x080069f9
 8006ac0:	08006a0d 	.word	0x08006a0d
 8006ac4:	08006a21 	.word	0x08006a21
 8006ac8:	08006a35 	.word	0x08006a35
 8006acc:	08006a49 	.word	0x08006a49

08006ad0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b090      	sub	sp, #64	; 0x40
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d137      	bne.n	8006b5c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aee:	2200      	movs	r2, #0
 8006af0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3314      	adds	r3, #20
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	623b      	str	r3, [r7, #32]
   return(result);
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3314      	adds	r3, #20
 8006b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b12:	633a      	str	r2, [r7, #48]	; 0x30
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e5      	bne.n	8006af2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b46:	61fa      	str	r2, [r7, #28]
 8006b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	69b9      	ldr	r1, [r7, #24]
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	617b      	str	r3, [r7, #20]
   return(result);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e5      	bne.n	8006b26 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b5a:	e003      	b.n	8006b64 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8006b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b62:	4798      	blx	r3
}
 8006b64:	bf00      	nop
 8006b66:	3740      	adds	r7, #64	; 0x40
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b80      	cmp	r3, #128	; 0x80
 8006ba8:	bf0c      	ite	eq
 8006baa:	2301      	moveq	r3, #1
 8006bac:	2300      	movne	r3, #0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b21      	cmp	r3, #33	; 0x21
 8006bbc:	d108      	bne.n	8006bd0 <UART_DMAError+0x46>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006bca:	68b8      	ldr	r0, [r7, #8]
 8006bcc:	f000 f866 	bl	8006c9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	bf0c      	ite	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	2300      	movne	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b22      	cmp	r3, #34	; 0x22
 8006bf0:	d108      	bne.n	8006c04 <UART_DMAError+0x7a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006bfe:	68b8      	ldr	r0, [r7, #8]
 8006c00:	f000 f874 	bl	8006cec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f043 0210 	orr.w	r2, r3, #16
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c14:	68b8      	ldr	r0, [r7, #8]
 8006c16:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	88fa      	ldrh	r2, [r7, #6]
 8006c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2222      	movs	r2, #34	; 0x22
 8006c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0201 	orr.w	r2, r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0220 	orr.w	r2, r2, #32
 8006c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	; 0x24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	330c      	adds	r3, #12
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	61ba      	str	r2, [r7, #24]
 8006cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6979      	ldr	r1, [r7, #20]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e5      	bne.n	8006ca4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006ce0:	bf00      	nop
 8006ce2:	3724      	adds	r7, #36	; 0x24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b095      	sub	sp, #84	; 0x54
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	330c      	adds	r3, #12
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d14:	643a      	str	r2, [r7, #64]	; 0x40
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e5      	bne.n	8006cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3314      	adds	r3, #20
 8006d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d119      	bne.n	8006d98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d84:	61ba      	str	r2, [r7, #24]
 8006d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6979      	ldr	r1, [r7, #20]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	613b      	str	r3, [r7, #16]
   return(result);
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006da6:	bf00      	nop
 8006da8:	3754      	adds	r7, #84	; 0x54
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b21      	cmp	r3, #33	; 0x21
 8006dee:	d13e      	bne.n	8006e6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df8:	d114      	bne.n	8006e24 <UART_Transmit_IT+0x48>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d110      	bne.n	8006e24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	1c9a      	adds	r2, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]
 8006e22:	e008      	b.n	8006e36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6211      	str	r1, [r2, #32]
 8006e2e:	781a      	ldrb	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	4619      	mov	r1, r3
 8006e44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10f      	bne.n	8006e6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e000      	b.n	8006e70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e6e:	2302      	movs	r3, #2
  }
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b08c      	sub	sp, #48	; 0x30
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b22      	cmp	r3, #34	; 0x22
 8006ec0:	f040 80ad 	bne.w	800701e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ecc:	d117      	bne.n	8006efe <UART_Receive_IT+0x50>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d113      	bne.n	8006efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	1c9a      	adds	r2, r3, #2
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	629a      	str	r2, [r3, #40]	; 0x28
 8006efc:	e026      	b.n	8006f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f10:	d007      	beq.n	8006f22 <UART_Receive_IT+0x74>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <UART_Receive_IT+0x82>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e008      	b.n	8006f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d15c      	bne.n	800701a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0220 	bic.w	r2, r2, #32
 8006f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0201 	bic.w	r2, r2, #1
 8006f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d136      	bne.n	800700e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	330c      	adds	r3, #12
 8006fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f023 0310 	bic.w	r3, r3, #16
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc6:	623a      	str	r2, [r7, #32]
 8006fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	69f9      	ldr	r1, [r7, #28]
 8006fcc:	6a3a      	ldr	r2, [r7, #32]
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e5      	bne.n	8006fa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d10a      	bne.n	8006ffe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007006:	4611      	mov	r1, r2
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	4798      	blx	r3
 800700c:	e003      	b.n	8007016 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	e002      	b.n	8007020 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	e000      	b.n	8007020 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800701e:	2302      	movs	r3, #2
  }
}
 8007020:	4618      	mov	r0, r3
 8007022:	3730      	adds	r7, #48	; 0x30
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800702c:	b0c0      	sub	sp, #256	; 0x100
 800702e:	af00      	add	r7, sp, #0
 8007030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007044:	68d9      	ldr	r1, [r3, #12]
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	ea40 0301 	orr.w	r3, r0, r1
 8007050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	431a      	orrs	r2, r3
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	431a      	orrs	r2, r3
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007080:	f021 010c 	bic.w	r1, r1, #12
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800708e:	430b      	orrs	r3, r1
 8007090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a2:	6999      	ldr	r1, [r3, #24]
 80070a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	ea40 0301 	orr.w	r3, r0, r1
 80070ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b8f      	ldr	r3, [pc, #572]	; (80072f4 <UART_SetConfig+0x2cc>)
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d005      	beq.n	80070c8 <UART_SetConfig+0xa0>
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b8d      	ldr	r3, [pc, #564]	; (80072f8 <UART_SetConfig+0x2d0>)
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d104      	bne.n	80070d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070c8:	f7fd fb54 	bl	8004774 <HAL_RCC_GetPCLK2Freq>
 80070cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80070d0:	e003      	b.n	80070da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070d2:	f7fd fb3b 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 80070d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e4:	f040 810c 	bne.w	8007300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070fa:	4622      	mov	r2, r4
 80070fc:	462b      	mov	r3, r5
 80070fe:	1891      	adds	r1, r2, r2
 8007100:	65b9      	str	r1, [r7, #88]	; 0x58
 8007102:	415b      	adcs	r3, r3
 8007104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800710a:	4621      	mov	r1, r4
 800710c:	eb12 0801 	adds.w	r8, r2, r1
 8007110:	4629      	mov	r1, r5
 8007112:	eb43 0901 	adc.w	r9, r3, r1
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800712a:	4690      	mov	r8, r2
 800712c:	4699      	mov	r9, r3
 800712e:	4623      	mov	r3, r4
 8007130:	eb18 0303 	adds.w	r3, r8, r3
 8007134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007138:	462b      	mov	r3, r5
 800713a:	eb49 0303 	adc.w	r3, r9, r3
 800713e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800714e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007156:	460b      	mov	r3, r1
 8007158:	18db      	adds	r3, r3, r3
 800715a:	653b      	str	r3, [r7, #80]	; 0x50
 800715c:	4613      	mov	r3, r2
 800715e:	eb42 0303 	adc.w	r3, r2, r3
 8007162:	657b      	str	r3, [r7, #84]	; 0x54
 8007164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800716c:	f7f9 fcda 	bl	8000b24 <__aeabi_uldivmod>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4b61      	ldr	r3, [pc, #388]	; (80072fc <UART_SetConfig+0x2d4>)
 8007176:	fba3 2302 	umull	r2, r3, r3, r2
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	011c      	lsls	r4, r3, #4
 800717e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007182:	2200      	movs	r2, #0
 8007184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800718c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007190:	4642      	mov	r2, r8
 8007192:	464b      	mov	r3, r9
 8007194:	1891      	adds	r1, r2, r2
 8007196:	64b9      	str	r1, [r7, #72]	; 0x48
 8007198:	415b      	adcs	r3, r3
 800719a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800719c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071a0:	4641      	mov	r1, r8
 80071a2:	eb12 0a01 	adds.w	sl, r2, r1
 80071a6:	4649      	mov	r1, r9
 80071a8:	eb43 0b01 	adc.w	fp, r3, r1
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071c0:	4692      	mov	sl, r2
 80071c2:	469b      	mov	fp, r3
 80071c4:	4643      	mov	r3, r8
 80071c6:	eb1a 0303 	adds.w	r3, sl, r3
 80071ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071ce:	464b      	mov	r3, r9
 80071d0:	eb4b 0303 	adc.w	r3, fp, r3
 80071d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071ec:	460b      	mov	r3, r1
 80071ee:	18db      	adds	r3, r3, r3
 80071f0:	643b      	str	r3, [r7, #64]	; 0x40
 80071f2:	4613      	mov	r3, r2
 80071f4:	eb42 0303 	adc.w	r3, r2, r3
 80071f8:	647b      	str	r3, [r7, #68]	; 0x44
 80071fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007202:	f7f9 fc8f 	bl	8000b24 <__aeabi_uldivmod>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4611      	mov	r1, r2
 800720c:	4b3b      	ldr	r3, [pc, #236]	; (80072fc <UART_SetConfig+0x2d4>)
 800720e:	fba3 2301 	umull	r2, r3, r3, r1
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	2264      	movs	r2, #100	; 0x64
 8007216:	fb02 f303 	mul.w	r3, r2, r3
 800721a:	1acb      	subs	r3, r1, r3
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007222:	4b36      	ldr	r3, [pc, #216]	; (80072fc <UART_SetConfig+0x2d4>)
 8007224:	fba3 2302 	umull	r2, r3, r3, r2
 8007228:	095b      	lsrs	r3, r3, #5
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007230:	441c      	add	r4, r3
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800723c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	1891      	adds	r1, r2, r2
 800724a:	63b9      	str	r1, [r7, #56]	; 0x38
 800724c:	415b      	adcs	r3, r3
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007254:	4641      	mov	r1, r8
 8007256:	1851      	adds	r1, r2, r1
 8007258:	6339      	str	r1, [r7, #48]	; 0x30
 800725a:	4649      	mov	r1, r9
 800725c:	414b      	adcs	r3, r1
 800725e:	637b      	str	r3, [r7, #52]	; 0x34
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800726c:	4659      	mov	r1, fp
 800726e:	00cb      	lsls	r3, r1, #3
 8007270:	4651      	mov	r1, sl
 8007272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007276:	4651      	mov	r1, sl
 8007278:	00ca      	lsls	r2, r1, #3
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	4603      	mov	r3, r0
 8007280:	4642      	mov	r2, r8
 8007282:	189b      	adds	r3, r3, r2
 8007284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007288:	464b      	mov	r3, r9
 800728a:	460a      	mov	r2, r1
 800728c:	eb42 0303 	adc.w	r3, r2, r3
 8007290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072a8:	460b      	mov	r3, r1
 80072aa:	18db      	adds	r3, r3, r3
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ae:	4613      	mov	r3, r2
 80072b0:	eb42 0303 	adc.w	r3, r2, r3
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072be:	f7f9 fc31 	bl	8000b24 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <UART_SetConfig+0x2d4>)
 80072c8:	fba3 1302 	umull	r1, r3, r3, r2
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	2164      	movs	r1, #100	; 0x64
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	3332      	adds	r3, #50	; 0x32
 80072da:	4a08      	ldr	r2, [pc, #32]	; (80072fc <UART_SetConfig+0x2d4>)
 80072dc:	fba2 2303 	umull	r2, r3, r2, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	f003 0207 	and.w	r2, r3, #7
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4422      	add	r2, r4
 80072ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072f0:	e105      	b.n	80074fe <UART_SetConfig+0x4d6>
 80072f2:	bf00      	nop
 80072f4:	40011000 	.word	0x40011000
 80072f8:	40011400 	.word	0x40011400
 80072fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007304:	2200      	movs	r2, #0
 8007306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800730a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800730e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007312:	4642      	mov	r2, r8
 8007314:	464b      	mov	r3, r9
 8007316:	1891      	adds	r1, r2, r2
 8007318:	6239      	str	r1, [r7, #32]
 800731a:	415b      	adcs	r3, r3
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
 800731e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007322:	4641      	mov	r1, r8
 8007324:	1854      	adds	r4, r2, r1
 8007326:	4649      	mov	r1, r9
 8007328:	eb43 0501 	adc.w	r5, r3, r1
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	00eb      	lsls	r3, r5, #3
 8007336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800733a:	00e2      	lsls	r2, r4, #3
 800733c:	4614      	mov	r4, r2
 800733e:	461d      	mov	r5, r3
 8007340:	4643      	mov	r3, r8
 8007342:	18e3      	adds	r3, r4, r3
 8007344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007348:	464b      	mov	r3, r9
 800734a:	eb45 0303 	adc.w	r3, r5, r3
 800734e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800735e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800736e:	4629      	mov	r1, r5
 8007370:	008b      	lsls	r3, r1, #2
 8007372:	4621      	mov	r1, r4
 8007374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007378:	4621      	mov	r1, r4
 800737a:	008a      	lsls	r2, r1, #2
 800737c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007380:	f7f9 fbd0 	bl	8000b24 <__aeabi_uldivmod>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4b60      	ldr	r3, [pc, #384]	; (800750c <UART_SetConfig+0x4e4>)
 800738a:	fba3 2302 	umull	r2, r3, r3, r2
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	011c      	lsls	r4, r3, #4
 8007392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007396:	2200      	movs	r2, #0
 8007398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800739c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	1891      	adds	r1, r2, r2
 80073aa:	61b9      	str	r1, [r7, #24]
 80073ac:	415b      	adcs	r3, r3
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b4:	4641      	mov	r1, r8
 80073b6:	1851      	adds	r1, r2, r1
 80073b8:	6139      	str	r1, [r7, #16]
 80073ba:	4649      	mov	r1, r9
 80073bc:	414b      	adcs	r3, r1
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073cc:	4659      	mov	r1, fp
 80073ce:	00cb      	lsls	r3, r1, #3
 80073d0:	4651      	mov	r1, sl
 80073d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d6:	4651      	mov	r1, sl
 80073d8:	00ca      	lsls	r2, r1, #3
 80073da:	4610      	mov	r0, r2
 80073dc:	4619      	mov	r1, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	4642      	mov	r2, r8
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073e8:	464b      	mov	r3, r9
 80073ea:	460a      	mov	r2, r1
 80073ec:	eb42 0303 	adc.w	r3, r2, r3
 80073f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80073fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800740c:	4649      	mov	r1, r9
 800740e:	008b      	lsls	r3, r1, #2
 8007410:	4641      	mov	r1, r8
 8007412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007416:	4641      	mov	r1, r8
 8007418:	008a      	lsls	r2, r1, #2
 800741a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800741e:	f7f9 fb81 	bl	8000b24 <__aeabi_uldivmod>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4b39      	ldr	r3, [pc, #228]	; (800750c <UART_SetConfig+0x4e4>)
 8007428:	fba3 1302 	umull	r1, r3, r3, r2
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	2164      	movs	r1, #100	; 0x64
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	3332      	adds	r3, #50	; 0x32
 800743a:	4a34      	ldr	r2, [pc, #208]	; (800750c <UART_SetConfig+0x4e4>)
 800743c:	fba2 2303 	umull	r2, r3, r2, r3
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007446:	441c      	add	r4, r3
 8007448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800744c:	2200      	movs	r2, #0
 800744e:	673b      	str	r3, [r7, #112]	; 0x70
 8007450:	677a      	str	r2, [r7, #116]	; 0x74
 8007452:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007456:	4642      	mov	r2, r8
 8007458:	464b      	mov	r3, r9
 800745a:	1891      	adds	r1, r2, r2
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	415b      	adcs	r3, r3
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007466:	4641      	mov	r1, r8
 8007468:	1851      	adds	r1, r2, r1
 800746a:	6039      	str	r1, [r7, #0]
 800746c:	4649      	mov	r1, r9
 800746e:	414b      	adcs	r3, r1
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800747e:	4659      	mov	r1, fp
 8007480:	00cb      	lsls	r3, r1, #3
 8007482:	4651      	mov	r1, sl
 8007484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007488:	4651      	mov	r1, sl
 800748a:	00ca      	lsls	r2, r1, #3
 800748c:	4610      	mov	r0, r2
 800748e:	4619      	mov	r1, r3
 8007490:	4603      	mov	r3, r0
 8007492:	4642      	mov	r2, r8
 8007494:	189b      	adds	r3, r3, r2
 8007496:	66bb      	str	r3, [r7, #104]	; 0x68
 8007498:	464b      	mov	r3, r9
 800749a:	460a      	mov	r2, r1
 800749c:	eb42 0303 	adc.w	r3, r2, r3
 80074a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	663b      	str	r3, [r7, #96]	; 0x60
 80074ac:	667a      	str	r2, [r7, #100]	; 0x64
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074ba:	4649      	mov	r1, r9
 80074bc:	008b      	lsls	r3, r1, #2
 80074be:	4641      	mov	r1, r8
 80074c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c4:	4641      	mov	r1, r8
 80074c6:	008a      	lsls	r2, r1, #2
 80074c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80074cc:	f7f9 fb2a 	bl	8000b24 <__aeabi_uldivmod>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4b0d      	ldr	r3, [pc, #52]	; (800750c <UART_SetConfig+0x4e4>)
 80074d6:	fba3 1302 	umull	r1, r3, r3, r2
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2164      	movs	r1, #100	; 0x64
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	3332      	adds	r3, #50	; 0x32
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <UART_SetConfig+0x4e4>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	f003 020f 	and.w	r2, r3, #15
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4422      	add	r2, r4
 80074fc:	609a      	str	r2, [r3, #8]
}
 80074fe:	bf00      	nop
 8007500:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007504:	46bd      	mov	sp, r7
 8007506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800750a:	bf00      	nop
 800750c:	51eb851f 	.word	0x51eb851f

08007510 <__libc_init_array>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4d0d      	ldr	r5, [pc, #52]	; (8007548 <__libc_init_array+0x38>)
 8007514:	4c0d      	ldr	r4, [pc, #52]	; (800754c <__libc_init_array+0x3c>)
 8007516:	1b64      	subs	r4, r4, r5
 8007518:	10a4      	asrs	r4, r4, #2
 800751a:	2600      	movs	r6, #0
 800751c:	42a6      	cmp	r6, r4
 800751e:	d109      	bne.n	8007534 <__libc_init_array+0x24>
 8007520:	4d0b      	ldr	r5, [pc, #44]	; (8007550 <__libc_init_array+0x40>)
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <__libc_init_array+0x44>)
 8007524:	f000 faa6 	bl	8007a74 <_init>
 8007528:	1b64      	subs	r4, r4, r5
 800752a:	10a4      	asrs	r4, r4, #2
 800752c:	2600      	movs	r6, #0
 800752e:	42a6      	cmp	r6, r4
 8007530:	d105      	bne.n	800753e <__libc_init_array+0x2e>
 8007532:	bd70      	pop	{r4, r5, r6, pc}
 8007534:	f855 3b04 	ldr.w	r3, [r5], #4
 8007538:	4798      	blx	r3
 800753a:	3601      	adds	r6, #1
 800753c:	e7ee      	b.n	800751c <__libc_init_array+0xc>
 800753e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007542:	4798      	blx	r3
 8007544:	3601      	adds	r6, #1
 8007546:	e7f2      	b.n	800752e <__libc_init_array+0x1e>
 8007548:	08008330 	.word	0x08008330
 800754c:	08008330 	.word	0x08008330
 8007550:	08008330 	.word	0x08008330
 8007554:	08008334 	.word	0x08008334

08007558 <memcpy>:
 8007558:	440a      	add	r2, r1
 800755a:	4291      	cmp	r1, r2
 800755c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007560:	d100      	bne.n	8007564 <memcpy+0xc>
 8007562:	4770      	bx	lr
 8007564:	b510      	push	{r4, lr}
 8007566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800756a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800756e:	4291      	cmp	r1, r2
 8007570:	d1f9      	bne.n	8007566 <memcpy+0xe>
 8007572:	bd10      	pop	{r4, pc}

08007574 <memset>:
 8007574:	4402      	add	r2, r0
 8007576:	4603      	mov	r3, r0
 8007578:	4293      	cmp	r3, r2
 800757a:	d100      	bne.n	800757e <memset+0xa>
 800757c:	4770      	bx	lr
 800757e:	f803 1b01 	strb.w	r1, [r3], #1
 8007582:	e7f9      	b.n	8007578 <memset+0x4>

08007584 <atan2>:
 8007584:	f000 b800 	b.w	8007588 <__ieee754_atan2>

08007588 <__ieee754_atan2>:
 8007588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758c:	ec57 6b11 	vmov	r6, r7, d1
 8007590:	4273      	negs	r3, r6
 8007592:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007718 <__ieee754_atan2+0x190>
 8007596:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800759a:	4333      	orrs	r3, r6
 800759c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80075a0:	4573      	cmp	r3, lr
 80075a2:	ec51 0b10 	vmov	r0, r1, d0
 80075a6:	ee11 8a10 	vmov	r8, s2
 80075aa:	d80a      	bhi.n	80075c2 <__ieee754_atan2+0x3a>
 80075ac:	4244      	negs	r4, r0
 80075ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075b2:	4304      	orrs	r4, r0
 80075b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80075b8:	4574      	cmp	r4, lr
 80075ba:	ee10 9a10 	vmov	r9, s0
 80075be:	468c      	mov	ip, r1
 80075c0:	d907      	bls.n	80075d2 <__ieee754_atan2+0x4a>
 80075c2:	4632      	mov	r2, r6
 80075c4:	463b      	mov	r3, r7
 80075c6:	f7f8 fe0d 	bl	80001e4 <__adddf3>
 80075ca:	ec41 0b10 	vmov	d0, r0, r1
 80075ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80075d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075da:	4334      	orrs	r4, r6
 80075dc:	d103      	bne.n	80075e6 <__ieee754_atan2+0x5e>
 80075de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e2:	f000 b89d 	b.w	8007720 <atan>
 80075e6:	17bc      	asrs	r4, r7, #30
 80075e8:	f004 0402 	and.w	r4, r4, #2
 80075ec:	ea53 0909 	orrs.w	r9, r3, r9
 80075f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80075f4:	d107      	bne.n	8007606 <__ieee754_atan2+0x7e>
 80075f6:	2c02      	cmp	r4, #2
 80075f8:	d060      	beq.n	80076bc <__ieee754_atan2+0x134>
 80075fa:	2c03      	cmp	r4, #3
 80075fc:	d1e5      	bne.n	80075ca <__ieee754_atan2+0x42>
 80075fe:	a142      	add	r1, pc, #264	; (adr r1, 8007708 <__ieee754_atan2+0x180>)
 8007600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007604:	e7e1      	b.n	80075ca <__ieee754_atan2+0x42>
 8007606:	ea52 0808 	orrs.w	r8, r2, r8
 800760a:	d106      	bne.n	800761a <__ieee754_atan2+0x92>
 800760c:	f1bc 0f00 	cmp.w	ip, #0
 8007610:	da5f      	bge.n	80076d2 <__ieee754_atan2+0x14a>
 8007612:	a13f      	add	r1, pc, #252	; (adr r1, 8007710 <__ieee754_atan2+0x188>)
 8007614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007618:	e7d7      	b.n	80075ca <__ieee754_atan2+0x42>
 800761a:	4572      	cmp	r2, lr
 800761c:	d10f      	bne.n	800763e <__ieee754_atan2+0xb6>
 800761e:	4293      	cmp	r3, r2
 8007620:	f104 34ff 	add.w	r4, r4, #4294967295
 8007624:	d107      	bne.n	8007636 <__ieee754_atan2+0xae>
 8007626:	2c02      	cmp	r4, #2
 8007628:	d84c      	bhi.n	80076c4 <__ieee754_atan2+0x13c>
 800762a:	4b35      	ldr	r3, [pc, #212]	; (8007700 <__ieee754_atan2+0x178>)
 800762c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007630:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007634:	e7c9      	b.n	80075ca <__ieee754_atan2+0x42>
 8007636:	2c02      	cmp	r4, #2
 8007638:	d848      	bhi.n	80076cc <__ieee754_atan2+0x144>
 800763a:	4b32      	ldr	r3, [pc, #200]	; (8007704 <__ieee754_atan2+0x17c>)
 800763c:	e7f6      	b.n	800762c <__ieee754_atan2+0xa4>
 800763e:	4573      	cmp	r3, lr
 8007640:	d0e4      	beq.n	800760c <__ieee754_atan2+0x84>
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007648:	ea4f 5223 	mov.w	r2, r3, asr #20
 800764c:	da1e      	bge.n	800768c <__ieee754_atan2+0x104>
 800764e:	2f00      	cmp	r7, #0
 8007650:	da01      	bge.n	8007656 <__ieee754_atan2+0xce>
 8007652:	323c      	adds	r2, #60	; 0x3c
 8007654:	db1e      	blt.n	8007694 <__ieee754_atan2+0x10c>
 8007656:	4632      	mov	r2, r6
 8007658:	463b      	mov	r3, r7
 800765a:	f7f9 f8a3 	bl	80007a4 <__aeabi_ddiv>
 800765e:	ec41 0b10 	vmov	d0, r0, r1
 8007662:	f000 f9fd 	bl	8007a60 <fabs>
 8007666:	f000 f85b 	bl	8007720 <atan>
 800766a:	ec51 0b10 	vmov	r0, r1, d0
 800766e:	2c01      	cmp	r4, #1
 8007670:	d013      	beq.n	800769a <__ieee754_atan2+0x112>
 8007672:	2c02      	cmp	r4, #2
 8007674:	d015      	beq.n	80076a2 <__ieee754_atan2+0x11a>
 8007676:	2c00      	cmp	r4, #0
 8007678:	d0a7      	beq.n	80075ca <__ieee754_atan2+0x42>
 800767a:	a319      	add	r3, pc, #100	; (adr r3, 80076e0 <__ieee754_atan2+0x158>)
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f7f8 fdae 	bl	80001e0 <__aeabi_dsub>
 8007684:	a318      	add	r3, pc, #96	; (adr r3, 80076e8 <__ieee754_atan2+0x160>)
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	e014      	b.n	80076b6 <__ieee754_atan2+0x12e>
 800768c:	a118      	add	r1, pc, #96	; (adr r1, 80076f0 <__ieee754_atan2+0x168>)
 800768e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007692:	e7ec      	b.n	800766e <__ieee754_atan2+0xe6>
 8007694:	2000      	movs	r0, #0
 8007696:	2100      	movs	r1, #0
 8007698:	e7e9      	b.n	800766e <__ieee754_atan2+0xe6>
 800769a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800769e:	4619      	mov	r1, r3
 80076a0:	e793      	b.n	80075ca <__ieee754_atan2+0x42>
 80076a2:	a30f      	add	r3, pc, #60	; (adr r3, 80076e0 <__ieee754_atan2+0x158>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 fd9a 	bl	80001e0 <__aeabi_dsub>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	a10d      	add	r1, pc, #52	; (adr r1, 80076e8 <__ieee754_atan2+0x160>)
 80076b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076b6:	f7f8 fd93 	bl	80001e0 <__aeabi_dsub>
 80076ba:	e786      	b.n	80075ca <__ieee754_atan2+0x42>
 80076bc:	a10a      	add	r1, pc, #40	; (adr r1, 80076e8 <__ieee754_atan2+0x160>)
 80076be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c2:	e782      	b.n	80075ca <__ieee754_atan2+0x42>
 80076c4:	a10c      	add	r1, pc, #48	; (adr r1, 80076f8 <__ieee754_atan2+0x170>)
 80076c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ca:	e77e      	b.n	80075ca <__ieee754_atan2+0x42>
 80076cc:	2000      	movs	r0, #0
 80076ce:	2100      	movs	r1, #0
 80076d0:	e77b      	b.n	80075ca <__ieee754_atan2+0x42>
 80076d2:	a107      	add	r1, pc, #28	; (adr r1, 80076f0 <__ieee754_atan2+0x168>)
 80076d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d8:	e777      	b.n	80075ca <__ieee754_atan2+0x42>
 80076da:	bf00      	nop
 80076dc:	f3af 8000 	nop.w
 80076e0:	33145c07 	.word	0x33145c07
 80076e4:	3ca1a626 	.word	0x3ca1a626
 80076e8:	54442d18 	.word	0x54442d18
 80076ec:	400921fb 	.word	0x400921fb
 80076f0:	54442d18 	.word	0x54442d18
 80076f4:	3ff921fb 	.word	0x3ff921fb
 80076f8:	54442d18 	.word	0x54442d18
 80076fc:	3fe921fb 	.word	0x3fe921fb
 8007700:	080082b8 	.word	0x080082b8
 8007704:	080082d0 	.word	0x080082d0
 8007708:	54442d18 	.word	0x54442d18
 800770c:	c00921fb 	.word	0xc00921fb
 8007710:	54442d18 	.word	0x54442d18
 8007714:	bff921fb 	.word	0xbff921fb
 8007718:	7ff00000 	.word	0x7ff00000
 800771c:	00000000 	.word	0x00000000

08007720 <atan>:
 8007720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	ec55 4b10 	vmov	r4, r5, d0
 8007728:	4bc3      	ldr	r3, [pc, #780]	; (8007a38 <atan+0x318>)
 800772a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800772e:	429e      	cmp	r6, r3
 8007730:	46ab      	mov	fp, r5
 8007732:	dd18      	ble.n	8007766 <atan+0x46>
 8007734:	4bc1      	ldr	r3, [pc, #772]	; (8007a3c <atan+0x31c>)
 8007736:	429e      	cmp	r6, r3
 8007738:	dc01      	bgt.n	800773e <atan+0x1e>
 800773a:	d109      	bne.n	8007750 <atan+0x30>
 800773c:	b144      	cbz	r4, 8007750 <atan+0x30>
 800773e:	4622      	mov	r2, r4
 8007740:	462b      	mov	r3, r5
 8007742:	4620      	mov	r0, r4
 8007744:	4629      	mov	r1, r5
 8007746:	f7f8 fd4d 	bl	80001e4 <__adddf3>
 800774a:	4604      	mov	r4, r0
 800774c:	460d      	mov	r5, r1
 800774e:	e006      	b.n	800775e <atan+0x3e>
 8007750:	f1bb 0f00 	cmp.w	fp, #0
 8007754:	f300 8131 	bgt.w	80079ba <atan+0x29a>
 8007758:	a59b      	add	r5, pc, #620	; (adr r5, 80079c8 <atan+0x2a8>)
 800775a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800775e:	ec45 4b10 	vmov	d0, r4, r5
 8007762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007766:	4bb6      	ldr	r3, [pc, #728]	; (8007a40 <atan+0x320>)
 8007768:	429e      	cmp	r6, r3
 800776a:	dc14      	bgt.n	8007796 <atan+0x76>
 800776c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007770:	429e      	cmp	r6, r3
 8007772:	dc0d      	bgt.n	8007790 <atan+0x70>
 8007774:	a396      	add	r3, pc, #600	; (adr r3, 80079d0 <atan+0x2b0>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	ee10 0a10 	vmov	r0, s0
 800777e:	4629      	mov	r1, r5
 8007780:	f7f8 fd30 	bl	80001e4 <__adddf3>
 8007784:	4baf      	ldr	r3, [pc, #700]	; (8007a44 <atan+0x324>)
 8007786:	2200      	movs	r2, #0
 8007788:	f7f9 f972 	bl	8000a70 <__aeabi_dcmpgt>
 800778c:	2800      	cmp	r0, #0
 800778e:	d1e6      	bne.n	800775e <atan+0x3e>
 8007790:	f04f 3aff 	mov.w	sl, #4294967295
 8007794:	e02b      	b.n	80077ee <atan+0xce>
 8007796:	f000 f963 	bl	8007a60 <fabs>
 800779a:	4bab      	ldr	r3, [pc, #684]	; (8007a48 <atan+0x328>)
 800779c:	429e      	cmp	r6, r3
 800779e:	ec55 4b10 	vmov	r4, r5, d0
 80077a2:	f300 80bf 	bgt.w	8007924 <atan+0x204>
 80077a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80077aa:	429e      	cmp	r6, r3
 80077ac:	f300 80a0 	bgt.w	80078f0 <atan+0x1d0>
 80077b0:	ee10 2a10 	vmov	r2, s0
 80077b4:	ee10 0a10 	vmov	r0, s0
 80077b8:	462b      	mov	r3, r5
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f8 fd12 	bl	80001e4 <__adddf3>
 80077c0:	4ba0      	ldr	r3, [pc, #640]	; (8007a44 <atan+0x324>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	f7f8 fd0c 	bl	80001e0 <__aeabi_dsub>
 80077c8:	2200      	movs	r2, #0
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077d2:	4620      	mov	r0, r4
 80077d4:	4629      	mov	r1, r5
 80077d6:	f7f8 fd05 	bl	80001e4 <__adddf3>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f8 ffdf 	bl	80007a4 <__aeabi_ddiv>
 80077e6:	f04f 0a00 	mov.w	sl, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	460d      	mov	r5, r1
 80077ee:	4622      	mov	r2, r4
 80077f0:	462b      	mov	r3, r5
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f8 feab 	bl	8000550 <__aeabi_dmul>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4680      	mov	r8, r0
 8007800:	4689      	mov	r9, r1
 8007802:	f7f8 fea5 	bl	8000550 <__aeabi_dmul>
 8007806:	a374      	add	r3, pc, #464	; (adr r3, 80079d8 <atan+0x2b8>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	4606      	mov	r6, r0
 800780e:	460f      	mov	r7, r1
 8007810:	f7f8 fe9e 	bl	8000550 <__aeabi_dmul>
 8007814:	a372      	add	r3, pc, #456	; (adr r3, 80079e0 <atan+0x2c0>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f8 fce3 	bl	80001e4 <__adddf3>
 800781e:	4632      	mov	r2, r6
 8007820:	463b      	mov	r3, r7
 8007822:	f7f8 fe95 	bl	8000550 <__aeabi_dmul>
 8007826:	a370      	add	r3, pc, #448	; (adr r3, 80079e8 <atan+0x2c8>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fcda 	bl	80001e4 <__adddf3>
 8007830:	4632      	mov	r2, r6
 8007832:	463b      	mov	r3, r7
 8007834:	f7f8 fe8c 	bl	8000550 <__aeabi_dmul>
 8007838:	a36d      	add	r3, pc, #436	; (adr r3, 80079f0 <atan+0x2d0>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fcd1 	bl	80001e4 <__adddf3>
 8007842:	4632      	mov	r2, r6
 8007844:	463b      	mov	r3, r7
 8007846:	f7f8 fe83 	bl	8000550 <__aeabi_dmul>
 800784a:	a36b      	add	r3, pc, #428	; (adr r3, 80079f8 <atan+0x2d8>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fcc8 	bl	80001e4 <__adddf3>
 8007854:	4632      	mov	r2, r6
 8007856:	463b      	mov	r3, r7
 8007858:	f7f8 fe7a 	bl	8000550 <__aeabi_dmul>
 800785c:	a368      	add	r3, pc, #416	; (adr r3, 8007a00 <atan+0x2e0>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f7f8 fcbf 	bl	80001e4 <__adddf3>
 8007866:	4642      	mov	r2, r8
 8007868:	464b      	mov	r3, r9
 800786a:	f7f8 fe71 	bl	8000550 <__aeabi_dmul>
 800786e:	a366      	add	r3, pc, #408	; (adr r3, 8007a08 <atan+0x2e8>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	4680      	mov	r8, r0
 8007876:	4689      	mov	r9, r1
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f8 fe68 	bl	8000550 <__aeabi_dmul>
 8007880:	a363      	add	r3, pc, #396	; (adr r3, 8007a10 <atan+0x2f0>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 fcab 	bl	80001e0 <__aeabi_dsub>
 800788a:	4632      	mov	r2, r6
 800788c:	463b      	mov	r3, r7
 800788e:	f7f8 fe5f 	bl	8000550 <__aeabi_dmul>
 8007892:	a361      	add	r3, pc, #388	; (adr r3, 8007a18 <atan+0x2f8>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f8 fca2 	bl	80001e0 <__aeabi_dsub>
 800789c:	4632      	mov	r2, r6
 800789e:	463b      	mov	r3, r7
 80078a0:	f7f8 fe56 	bl	8000550 <__aeabi_dmul>
 80078a4:	a35e      	add	r3, pc, #376	; (adr r3, 8007a20 <atan+0x300>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fc99 	bl	80001e0 <__aeabi_dsub>
 80078ae:	4632      	mov	r2, r6
 80078b0:	463b      	mov	r3, r7
 80078b2:	f7f8 fe4d 	bl	8000550 <__aeabi_dmul>
 80078b6:	a35c      	add	r3, pc, #368	; (adr r3, 8007a28 <atan+0x308>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f7f8 fc90 	bl	80001e0 <__aeabi_dsub>
 80078c0:	4632      	mov	r2, r6
 80078c2:	463b      	mov	r3, r7
 80078c4:	f7f8 fe44 	bl	8000550 <__aeabi_dmul>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4640      	mov	r0, r8
 80078ce:	4649      	mov	r1, r9
 80078d0:	f7f8 fc88 	bl	80001e4 <__adddf3>
 80078d4:	4622      	mov	r2, r4
 80078d6:	462b      	mov	r3, r5
 80078d8:	f7f8 fe3a 	bl	8000550 <__aeabi_dmul>
 80078dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	d14b      	bne.n	800797e <atan+0x25e>
 80078e6:	4620      	mov	r0, r4
 80078e8:	4629      	mov	r1, r5
 80078ea:	f7f8 fc79 	bl	80001e0 <__aeabi_dsub>
 80078ee:	e72c      	b.n	800774a <atan+0x2a>
 80078f0:	ee10 0a10 	vmov	r0, s0
 80078f4:	4b53      	ldr	r3, [pc, #332]	; (8007a44 <atan+0x324>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f8 fc71 	bl	80001e0 <__aeabi_dsub>
 80078fe:	4b51      	ldr	r3, [pc, #324]	; (8007a44 <atan+0x324>)
 8007900:	4606      	mov	r6, r0
 8007902:	460f      	mov	r7, r1
 8007904:	2200      	movs	r2, #0
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fc6b 	bl	80001e4 <__adddf3>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4630      	mov	r0, r6
 8007914:	4639      	mov	r1, r7
 8007916:	f7f8 ff45 	bl	80007a4 <__aeabi_ddiv>
 800791a:	f04f 0a01 	mov.w	sl, #1
 800791e:	4604      	mov	r4, r0
 8007920:	460d      	mov	r5, r1
 8007922:	e764      	b.n	80077ee <atan+0xce>
 8007924:	4b49      	ldr	r3, [pc, #292]	; (8007a4c <atan+0x32c>)
 8007926:	429e      	cmp	r6, r3
 8007928:	da1d      	bge.n	8007966 <atan+0x246>
 800792a:	ee10 0a10 	vmov	r0, s0
 800792e:	4b48      	ldr	r3, [pc, #288]	; (8007a50 <atan+0x330>)
 8007930:	2200      	movs	r2, #0
 8007932:	4629      	mov	r1, r5
 8007934:	f7f8 fc54 	bl	80001e0 <__aeabi_dsub>
 8007938:	4b45      	ldr	r3, [pc, #276]	; (8007a50 <atan+0x330>)
 800793a:	4606      	mov	r6, r0
 800793c:	460f      	mov	r7, r1
 800793e:	2200      	movs	r2, #0
 8007940:	4620      	mov	r0, r4
 8007942:	4629      	mov	r1, r5
 8007944:	f7f8 fe04 	bl	8000550 <__aeabi_dmul>
 8007948:	4b3e      	ldr	r3, [pc, #248]	; (8007a44 <atan+0x324>)
 800794a:	2200      	movs	r2, #0
 800794c:	f7f8 fc4a 	bl	80001e4 <__adddf3>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f8 ff24 	bl	80007a4 <__aeabi_ddiv>
 800795c:	f04f 0a02 	mov.w	sl, #2
 8007960:	4604      	mov	r4, r0
 8007962:	460d      	mov	r5, r1
 8007964:	e743      	b.n	80077ee <atan+0xce>
 8007966:	462b      	mov	r3, r5
 8007968:	ee10 2a10 	vmov	r2, s0
 800796c:	4939      	ldr	r1, [pc, #228]	; (8007a54 <atan+0x334>)
 800796e:	2000      	movs	r0, #0
 8007970:	f7f8 ff18 	bl	80007a4 <__aeabi_ddiv>
 8007974:	f04f 0a03 	mov.w	sl, #3
 8007978:	4604      	mov	r4, r0
 800797a:	460d      	mov	r5, r1
 800797c:	e737      	b.n	80077ee <atan+0xce>
 800797e:	4b36      	ldr	r3, [pc, #216]	; (8007a58 <atan+0x338>)
 8007980:	4e36      	ldr	r6, [pc, #216]	; (8007a5c <atan+0x33c>)
 8007982:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007986:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800798a:	e9da 2300 	ldrd	r2, r3, [sl]
 800798e:	f7f8 fc27 	bl	80001e0 <__aeabi_dsub>
 8007992:	4622      	mov	r2, r4
 8007994:	462b      	mov	r3, r5
 8007996:	f7f8 fc23 	bl	80001e0 <__aeabi_dsub>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80079a2:	f7f8 fc1d 	bl	80001e0 <__aeabi_dsub>
 80079a6:	f1bb 0f00 	cmp.w	fp, #0
 80079aa:	4604      	mov	r4, r0
 80079ac:	460d      	mov	r5, r1
 80079ae:	f6bf aed6 	bge.w	800775e <atan+0x3e>
 80079b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079b6:	461d      	mov	r5, r3
 80079b8:	e6d1      	b.n	800775e <atan+0x3e>
 80079ba:	a51d      	add	r5, pc, #116	; (adr r5, 8007a30 <atan+0x310>)
 80079bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079c0:	e6cd      	b.n	800775e <atan+0x3e>
 80079c2:	bf00      	nop
 80079c4:	f3af 8000 	nop.w
 80079c8:	54442d18 	.word	0x54442d18
 80079cc:	bff921fb 	.word	0xbff921fb
 80079d0:	8800759c 	.word	0x8800759c
 80079d4:	7e37e43c 	.word	0x7e37e43c
 80079d8:	e322da11 	.word	0xe322da11
 80079dc:	3f90ad3a 	.word	0x3f90ad3a
 80079e0:	24760deb 	.word	0x24760deb
 80079e4:	3fa97b4b 	.word	0x3fa97b4b
 80079e8:	a0d03d51 	.word	0xa0d03d51
 80079ec:	3fb10d66 	.word	0x3fb10d66
 80079f0:	c54c206e 	.word	0xc54c206e
 80079f4:	3fb745cd 	.word	0x3fb745cd
 80079f8:	920083ff 	.word	0x920083ff
 80079fc:	3fc24924 	.word	0x3fc24924
 8007a00:	5555550d 	.word	0x5555550d
 8007a04:	3fd55555 	.word	0x3fd55555
 8007a08:	2c6a6c2f 	.word	0x2c6a6c2f
 8007a0c:	bfa2b444 	.word	0xbfa2b444
 8007a10:	52defd9a 	.word	0x52defd9a
 8007a14:	3fadde2d 	.word	0x3fadde2d
 8007a18:	af749a6d 	.word	0xaf749a6d
 8007a1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007a20:	fe231671 	.word	0xfe231671
 8007a24:	3fbc71c6 	.word	0x3fbc71c6
 8007a28:	9998ebc4 	.word	0x9998ebc4
 8007a2c:	3fc99999 	.word	0x3fc99999
 8007a30:	54442d18 	.word	0x54442d18
 8007a34:	3ff921fb 	.word	0x3ff921fb
 8007a38:	440fffff 	.word	0x440fffff
 8007a3c:	7ff00000 	.word	0x7ff00000
 8007a40:	3fdbffff 	.word	0x3fdbffff
 8007a44:	3ff00000 	.word	0x3ff00000
 8007a48:	3ff2ffff 	.word	0x3ff2ffff
 8007a4c:	40038000 	.word	0x40038000
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	bff00000 	.word	0xbff00000
 8007a58:	08008308 	.word	0x08008308
 8007a5c:	080082e8 	.word	0x080082e8

08007a60 <fabs>:
 8007a60:	ec51 0b10 	vmov	r0, r1, d0
 8007a64:	ee10 2a10 	vmov	r2, s0
 8007a68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a6c:	ec43 2b10 	vmov	d0, r2, r3
 8007a70:	4770      	bx	lr
	...

08007a74 <_init>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr

08007a80 <_fini>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr
