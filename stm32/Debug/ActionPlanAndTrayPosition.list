
ActionPlanAndTrayPosition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007874  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08007a10  08007a10  00017a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a8  080082a8  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b0  080082b0  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b0  080082b0  000182b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  080082b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000258  0800850c  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000df8  0800850c  00020df8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d32  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a5  00000000  00000000  00032fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00035460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  000362d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018571  00000000  00000000  00037050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e80  00000000  00000000  0004f5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb9b  00000000  00000000  00061441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdfdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f0c  00000000  00000000  000fe02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000258 	.word	0x20000258
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080079f4 	.word	0x080079f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000025c 	.word	0x2000025c
 80001d4:	080079f4 	.word	0x080079f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b974 	b.w	8000e24 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	468e      	mov	lr, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d14d      	bne.n	8000bfe <__udivmoddi4+0xaa>
 8000b62:	428a      	cmp	r2, r1
 8000b64:	4694      	mov	ip, r2
 8000b66:	d969      	bls.n	8000c3c <__udivmoddi4+0xe8>
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b152      	cbz	r2, 8000b84 <__udivmoddi4+0x30>
 8000b6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b72:	f1c2 0120 	rsb	r1, r2, #32
 8000b76:	fa20 f101 	lsr.w	r1, r0, r1
 8000b7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b82:	4094      	lsls	r4, r2
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	0c21      	lsrs	r1, r4, #16
 8000b8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b8e:	fa1f f78c 	uxth.w	r7, ip
 8000b92:	fb08 e316 	mls	r3, r8, r6, lr
 8000b96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b9a:	fb06 f107 	mul.w	r1, r6, r7
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	d90a      	bls.n	8000bb8 <__udivmoddi4+0x64>
 8000ba2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000baa:	f080 811f 	bcs.w	8000dec <__udivmoddi4+0x298>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 811c 	bls.w	8000dec <__udivmoddi4+0x298>
 8000bb4:	3e02      	subs	r6, #2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb00 f707 	mul.w	r7, r0, r7
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x92>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd8:	f080 810a 	bcs.w	8000df0 <__udivmoddi4+0x29c>
 8000bdc:	42a7      	cmp	r7, r4
 8000bde:	f240 8107 	bls.w	8000df0 <__udivmoddi4+0x29c>
 8000be2:	4464      	add	r4, ip
 8000be4:	3802      	subs	r0, #2
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	1be4      	subs	r4, r4, r7
 8000bec:	2600      	movs	r6, #0
 8000bee:	b11d      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0xc2>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	f000 80ef 	beq.w	8000de6 <__udivmoddi4+0x292>
 8000c08:	2600      	movs	r6, #0
 8000c0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f683 	clz	r6, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d14a      	bne.n	8000cb4 <__udivmoddi4+0x160>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xd4>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80f9 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	469e      	mov	lr, r3
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d0e0      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c3a:	e7dd      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c3c:	b902      	cbnz	r2, 8000c40 <__udivmoddi4+0xec>
 8000c3e:	deff      	udf	#255	; 0xff
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f040 8092 	bne.w	8000d6e <__udivmoddi4+0x21a>
 8000c4a:	eba1 010c 	sub.w	r1, r1, ip
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2601      	movs	r6, #1
 8000c58:	0c20      	lsrs	r0, r4, #16
 8000c5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c66:	fb0e f003 	mul.w	r0, lr, r3
 8000c6a:	4288      	cmp	r0, r1
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x12c>
 8000c6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x12a>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	1a09      	subs	r1, r1, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c88:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x156>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x154>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2ca>
 8000ca8:	4608      	mov	r0, r1
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cb2:	e79c      	b.n	8000bee <__udivmoddi4+0x9a>
 8000cb4:	f1c6 0720 	rsb	r7, r6, #32
 8000cb8:	40b3      	lsls	r3, r6
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cca:	431c      	orrs	r4, r3
 8000ccc:	40f9      	lsrs	r1, r7
 8000cce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cda:	0c20      	lsrs	r0, r4, #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ce4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cec:	4288      	cmp	r0, r1
 8000cee:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2bc>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2bc>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4461      	add	r1, ip
 8000d0c:	1a09      	subs	r1, r1, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d14:	fb09 1110 	mls	r1, r9, r0, r1
 8000d18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d20:	458e      	cmp	lr, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1e2>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2b4>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2b4>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d3e:	eba1 010e 	sub.w	r1, r1, lr
 8000d42:	42a1      	cmp	r1, r4
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46a6      	mov	lr, r4
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x2a4>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x2a0>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x212>
 8000d4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d52:	eb61 010e 	sbc.w	r1, r1, lr
 8000d56:	fa01 f707 	lsl.w	r7, r1, r7
 8000d5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d5e:	40f1      	lsrs	r1, r6
 8000d60:	431f      	orrs	r7, r3
 8000d62:	e9c5 7100 	strd	r7, r1, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	40d8      	lsrs	r0, r3
 8000d74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d78:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4301      	orrs	r1, r0
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d90:	0c0b      	lsrs	r3, r1, #16
 8000d92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d96:	fb00 f60e 	mul.w	r6, r0, lr
 8000d9a:	429e      	cmp	r6, r3
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x260>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b8>
 8000dac:	429e      	cmp	r6, r3
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b8>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	1b9b      	subs	r3, r3, r6
 8000db6:	b289      	uxth	r1, r1
 8000db8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x28a>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2b0>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2b0>
 8000dda:	3e02      	subs	r6, #2
 8000ddc:	4461      	add	r1, ip
 8000dde:	1ac9      	subs	r1, r1, r3
 8000de0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0x104>
 8000de6:	462e      	mov	r6, r5
 8000de8:	4628      	mov	r0, r5
 8000dea:	e705      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000dec:	4606      	mov	r6, r0
 8000dee:	e6e3      	b.n	8000bb8 <__udivmoddi4+0x64>
 8000df0:	4618      	mov	r0, r3
 8000df2:	e6f8      	b.n	8000be6 <__udivmoddi4+0x92>
 8000df4:	454b      	cmp	r3, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f8>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e00:	3801      	subs	r0, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f8>
 8000e04:	4646      	mov	r6, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x28a>
 8000e08:	4620      	mov	r0, r4
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1e2>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x260>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b8>
 8000e14:	3b02      	subs	r3, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x12c>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e709      	b.n	8000c32 <__udivmoddi4+0xde>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x156>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <modbus_1t5_Timeout+0x1c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2201      	movs	r2, #1
 8000e36:	751a      	strb	r2, [r3, #20]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000274 	.word	0x20000274

08000e48 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <modbus_3t5_Timeout+0x1c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	755a      	strb	r2, [r3, #21]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000274 	.word	0x20000274

08000e68 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000e82:	1c59      	adds	r1, r3, #1
 8000e84:	b289      	uxth	r1, r1
 8000e86:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000e8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e8e:	d210      	bcs.n	8000eb2 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68d8      	ldr	r0, [r3, #12]
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000ea2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4619      	mov	r1, r3
 8000eae:	f005 f955 	bl	800615c <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <modbus_UART_Recived+0x60>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000274 	.word	0x20000274

08000ecc <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <Modbus_init+0x9c>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <Modbus_init+0x9c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <Modbus_init+0x9c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <Modbus_init+0xa0>)
 8000eec:	2114      	movs	r1, #20
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fae6 	bl	80054c0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <Modbus_init+0x9c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <Modbus_init+0xa4>)
 8000efc:	210e      	movs	r1, #14
 8000efe:	4618      	mov	r0, r3
 8000f00:	f004 fade 	bl	80054c0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <Modbus_init+0x9c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <Modbus_init+0xa8>)
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 f87c 	bl	800600c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <Modbus_init+0x9c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68d8      	ldr	r0, [r3, #12]
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <Modbus_init+0x9c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <Modbus_init+0x9c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f26:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4619      	mov	r1, r3
 8000f32:	f005 f913 	bl	800615c <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <Modbus_init+0x9c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d10c      	bne.n	8000f60 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <Modbus_init+0x9c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fc99 	bl	8004884 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <Modbus_init+0x9c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fed8 	bl	8004d10 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000274 	.word	0x20000274
 8000f6c:	08000e29 	.word	0x08000e29
 8000f70:	08000e49 	.word	0x08000e49
 8000f74:	08000e69 	.word	0x08000e69

08000f78 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000f84:	23ff      	movs	r3, #255	; 0xff
 8000f86:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000f8c:	e013      	b.n	8000fb6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	4053      	eors	r3, r2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <CRC16+0x64>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4053      	eors	r3, r2
 8000faa:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <CRC16+0x68>)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000fb6:	883b      	ldrh	r3, [r7, #0]
 8000fb8:	1e5a      	subs	r2, r3, #1
 8000fba:	803a      	strh	r2, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1e6      	bne.n	8000f8e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b29b      	uxth	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20000100 	.word	0x20000100
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000fea:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d80a      	bhi.n	800100c <Modbus_Protocal_Worker+0x28>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <Modbus_Protocal_Worker+0x18>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	08001017 	.word	0x08001017
 8001000:	080011b7 	.word	0x080011b7
 8001004:	080010a3 	.word	0x080010a3
 8001008:	080010c9 	.word	0x080010c9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800100c:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	761a      	strb	r2, [r3, #24]
		break;
 8001014:	e0e8      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001022:	f000 f9dd 	bl	80013e0 <Modbus_Emission>
 8001026:	e01c      	b.n	8001062 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001028:	4b71      	ldr	r3, [pc, #452]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	7d9b      	ldrb	r3, [r3, #22]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d017      	beq.n	8001062 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001032:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800103a:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001042:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0201 	orr.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800105a:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2203      	movs	r2, #3
 8001060:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001062:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b20      	cmp	r3, #32
 8001070:	f040 80b3 	bne.w	80011da <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001074:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68d8      	ldr	r0, [r3, #12]
 8001084:	4b5a      	ldr	r3, [pc, #360]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001090:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001094:	4413      	add	r3, r2
 8001096:	3302      	adds	r3, #2
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	f005 f85e 	bl	800615c <HAL_UART_Receive_IT>
		}
		break;
 80010a0:	e09b      	b.n	80011da <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	7d1b      	ldrb	r3, [r3, #20]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 8098 	beq.w	80011de <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80010ae:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	22fe      	movs	r2, #254	; 0xfe
 80010bc:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80010be:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2204      	movs	r2, #4
 80010c4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80010c6:	e08a      	b.n	80011de <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80010c8:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7d9b      	ldrb	r3, [r3, #22]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d103      	bne.n	80010e6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80010e6:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80010ee:	f113 0f02 	cmn.w	r3, #2
 80010f2:	d150      	bne.n	8001196 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80010f4:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	3b02      	subs	r3, #2
 800110e:	4619      	mov	r1, r3
 8001110:	4610      	mov	r0, r2
 8001112:	f7ff ff31 	bl	8000f78 <CRC16>
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800111a:	793a      	ldrb	r2, [r7, #4]
 800111c:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001128:	3b02      	subs	r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001130:	429a      	cmp	r2, r3
 8001132:	d10c      	bne.n	800114e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001134:	797a      	ldrb	r2, [r7, #5]
 8001136:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001142:	3b01      	subs	r3, #1
 8001144:	440b      	add	r3, r1
 8001146:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800114a:	429a      	cmp	r2, r3
 800114c:	d004      	beq.n	8001158 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	75da      	strb	r2, [r3, #23]
				break;
 8001156:	e047      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d113      	bne.n	8001192 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800117a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001184:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001186:	461a      	mov	r2, r3
 8001188:	f006 f9a4 	bl	80074d4 <memcpy>

			//execute command
			Modbus_frame_response();
 800118c:	f000 f910 	bl	80013b0 <Modbus_frame_response>
 8001190:	e001      	b.n	8001196 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001192:	bf00      	nop
					}
		break;


	}
}
 8001194:	e028      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	7d5b      	ldrb	r3, [r3, #21]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2201      	movs	r2, #1
 80011a6:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 f882 	bl	80062b8 <HAL_UART_AbortReceive>
		break;
 80011b4:	e015      	b.n	80011e2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	d10f      	bne.n	80011e6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <Modbus_Protocal_Worker+0x20c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2201      	movs	r2, #1
 80011d6:	761a      	strb	r2, [r3, #24]
		break;
 80011d8:	e005      	b.n	80011e6 <Modbus_Protocal_Worker+0x202>
		break;
 80011da:	bf00      	nop
 80011dc:	e004      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
		break;
 80011de:	bf00      	nop
 80011e0:	e002      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
		break;
 80011e2:	bf00      	nop
 80011e4:	e000      	b.n	80011e8 <Modbus_Protocal_Worker+0x204>
		break;
 80011e6:	bf00      	nop
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000274 	.word	0x20000274

080011f4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <modbusWrite1Register+0x80>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	7e9b      	ldrb	r3, [r3, #26]
 8001200:	b29b      	uxth	r3, r3
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <modbusWrite1Register+0x80>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	7edb      	ldrb	r3, [r3, #27]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <modbusWrite1Register+0x80>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	429a      	cmp	r2, r3
 800121c:	d903      	bls.n	8001226 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800121e:	2002      	movs	r0, #2
 8001220:	f000 f8a4 	bl	800136c <ModbusErrorReply>
			 return;
 8001224:	e023      	b.n	800126e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <modbusWrite1Register+0x80>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <modbusWrite1Register+0x80>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	440b      	add	r3, r1
 8001236:	7f12      	ldrb	r2, [r2, #28]
 8001238:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <modbusWrite1Register+0x80>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <modbusWrite1Register+0x80>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6859      	ldr	r1, [r3, #4]
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	440b      	add	r3, r1
 800124a:	7f52      	ldrb	r2, [r2, #29]
 800124c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <modbusWrite1Register+0x80>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <modbusWrite1Register+0x80>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800125c:	2208      	movs	r2, #8
 800125e:	4619      	mov	r1, r3
 8001260:	f006 f938 	bl	80074d4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <modbusWrite1Register+0x80>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2205      	movs	r2, #5
 800126a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000274 	.word	0x20000274

08001278 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <modbusRead1Register+0xf0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	7f1b      	ldrb	r3, [r3, #28]
 8001284:	b29b      	uxth	r3, r3
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <modbusRead1Register+0xf0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	7f5b      	ldrb	r3, [r3, #29]
 8001290:	b29b      	uxth	r3, r3
 8001292:	4413      	add	r3, r2
 8001294:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <modbusRead1Register+0xf0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7e9b      	ldrb	r3, [r3, #26]
 800129c:	b29b      	uxth	r3, r3
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <modbusRead1Register+0xf0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	7edb      	ldrb	r3, [r3, #27]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <modbusRead1Register+0x42>
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	2b7d      	cmp	r3, #125	; 0x7d
 80012b8:	d903      	bls.n	80012c2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f000 f856 	bl	800136c <ModbusErrorReply>
		 return;
 80012c0:	e04e      	b.n	8001360 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012c2:	88ba      	ldrh	r2, [r7, #4]
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <modbusRead1Register+0xf0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d808      	bhi.n	80012e0 <modbusRead1Register+0x68>
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4413      	add	r3, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <modbusRead1Register+0xf0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d903      	bls.n	80012e8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012e0:	2002      	movs	r0, #2
 80012e2:	f000 f843 	bl	800136c <ModbusErrorReply>
		 return;
 80012e6:	e03b      	b.n	8001360 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <modbusRead1Register+0xf0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2203      	movs	r2, #3
 80012ee:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <modbusRead1Register+0xf0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	0052      	lsls	r2, r2, #1
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001302:	2400      	movs	r4, #0
 8001304:	e020      	b.n	8001348 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	4423      	add	r3, r4
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	18d1      	adds	r1, r2, r3
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <modbusRead1Register+0xf0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	1c63      	adds	r3, r4, #1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	7849      	ldrb	r1, [r1, #1]
 800131e:	4413      	add	r3, r2
 8001320:	460a      	mov	r2, r1
 8001322:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <modbusRead1Register+0xf0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	4423      	add	r3, r4
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	18d1      	adds	r1, r2, r3
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <modbusRead1Register+0xf0>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	0063      	lsls	r3, r4, #1
 800133a:	3303      	adds	r3, #3
 800133c:	7809      	ldrb	r1, [r1, #0]
 800133e:	4413      	add	r3, r2
 8001340:	460a      	mov	r2, r1
 8001342:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001346:	3401      	adds	r4, #1
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	429c      	cmp	r4, r3
 800134c:	dbdb      	blt.n	8001306 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	3301      	adds	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <modbusRead1Register+0xf0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0052      	lsls	r2, r2, #1
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000274 	.word	0x20000274

0800136c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <ModbusErrorReply+0x40>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7e5a      	ldrb	r2, [r3, #25]
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <ModbusErrorReply+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <ModbusErrorReply+0x40>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <ModbusErrorReply+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2202      	movs	r2, #2
 800139a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000274 	.word	0x20000274

080013b0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <Modbus_frame_response+0x2c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	7e5b      	ldrb	r3, [r3, #25]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d004      	beq.n	80013c8 <Modbus_frame_response+0x18>
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d105      	bne.n	80013ce <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013c2:	f7ff ff17 	bl	80011f4 <modbusWrite1Register>
		break;
 80013c6:	e006      	b.n	80013d6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013c8:	f7ff ff56 	bl	8001278 <modbusRead1Register>
		break;
 80013cc:	e003      	b.n	80013d6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ffcc 	bl	800136c <ModbusErrorReply>
		break;
 80013d4:	bf00      	nop

	}
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000274 	.word	0x20000274

080013e0 <Modbus_Emission>:

void Modbus_Emission()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <Modbus_Emission+0xfc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d15e      	bne.n	80014b4 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <Modbus_Emission+0xfc>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <Modbus_Emission+0xfc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <Modbus_Emission+0xfc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 800140c:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <Modbus_Emission+0xfc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <Modbus_Emission+0xfc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800141e:	461a      	mov	r2, r3
 8001420:	f006 f858 	bl	80074d4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <Modbus_Emission+0xfc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <Modbus_Emission+0xfc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3203      	adds	r2, #3
 8001434:	b292      	uxth	r2, r2
 8001436:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <Modbus_Emission+0xfc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <Modbus_Emission+0xfc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800144a:	3b02      	subs	r3, #2
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f7ff fd92 	bl	8000f78 <CRC16>
 8001454:	4603      	mov	r3, r0
 8001456:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <Modbus_Emission+0xfc>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <Modbus_Emission+0xfc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001464:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001466:	7939      	ldrb	r1, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	460a      	mov	r2, r1
 800146c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <Modbus_Emission+0xfc>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <Modbus_Emission+0xfc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800147c:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800147e:	7979      	ldrb	r1, [r7, #5]
 8001480:	4413      	add	r3, r2
 8001482:	460a      	mov	r2, r1
 8001484:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <Modbus_Emission+0xfc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b20      	cmp	r3, #32
 8001496:	d10d      	bne.n	80014b4 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <Modbus_Emission+0xfc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <Modbus_Emission+0xfc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <Modbus_Emission+0xfc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014aa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014ae:	461a      	mov	r2, r3
 80014b0:	f004 fe84 	bl	80061bc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <Modbus_Emission+0xfc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <Modbus_Emission+0xfc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <Modbus_Emission+0xfc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <Modbus_Emission+0xfc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2202      	movs	r2, #2
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000274 	.word	0x20000274

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f001 f935 	bl	8002754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ea:	f000 f889 	bl	8001600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ee:	f000 faf3 	bl	8001ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f2:	f000 fabb 	bl	8001a6c <MX_DMA_Init>
  MX_ADC1_Init();
 80014f6:	f000 f8eb 	bl	80016d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80014fa:	f000 fa8b 	bl	8001a14 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80014fe:	f000 fa35 	bl	800196c <MX_TIM11_Init>
  MX_TIM5_Init();
 8001502:	f000 f9e5 	bl	80018d0 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001506:	f000 f943 	bl	8001790 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //nine holes of tray-----------------
  //here for change x,y,degrees--------
  SetTwoPointsForCalibrate();
 800150a:	f000 fb91 	bl	8001c30 <SetTwoPointsForCalibrate>
  float32_t xy_axis[2] = {reference[0], reference[1]};
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <main+0xf0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	edc7 7a00 	vstr	s15, [r7]
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <main+0xf0>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	edc7 7a01 	vstr	s15, [r7, #4]
  HolePositionsCartesian(xy_axis, rotationAngleRadian);
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <main+0xf4>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	463b      	mov	r3, r7
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fc08 	bl	8001d50 <HolePositionsCartesian>
  //-----------------------------------
  //joy stick--------------------------
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawData, 20);
 8001540:	2214      	movs	r2, #20
 8001542:	4925      	ldr	r1, [pc, #148]	; (80015d8 <main+0xf8>)
 8001544:	4825      	ldr	r0, [pc, #148]	; (80015dc <main+0xfc>)
 8001546:	f001 f9bb 	bl	80028c0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 800154a:	4825      	ldr	r0, [pc, #148]	; (80015e0 <main+0x100>)
 800154c:	f003 f940 	bl	80047d0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001550:	4824      	ldr	r0, [pc, #144]	; (80015e4 <main+0x104>)
 8001552:	f003 f93d 	bl	80047d0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001556:	2100      	movs	r1, #0
 8001558:	4821      	ldr	r0, [pc, #132]	; (80015e0 <main+0x100>)
 800155a:	f003 fac1 	bl	8004ae0 <HAL_TIM_PWM_Start>
  hmodbus.huart = &huart2;
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <main+0x108>)
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <main+0x10c>)
 8001562:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <main+0x108>)
 8001566:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <main+0x110>)
 8001568:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <main+0x108>)
 800156c:	2215      	movs	r2, #21
 800156e:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <main+0x108>)
 8001572:	22c8      	movs	r2, #200	; 0xc8
 8001574:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001576:	491f      	ldr	r1, [pc, #124]	; (80015f4 <main+0x114>)
 8001578:	481b      	ldr	r0, [pc, #108]	; (80015e8 <main+0x108>)
 800157a:	f7ff fca7 	bl	8000ecc <Modbus_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 800157e:	f7ff fd31 	bl	8000fe4 <Modbus_Protocal_Worker>

	  GetJoystickXYaxisValue();
 8001582:	f000 fc97 	bl	8001eb4 <GetJoystickXYaxisValue>

	  JoyStickControlCartesian();
 8001586:	f000 fd25 	bl	8001fd4 <JoyStickControlCartesian>

	  static uint32_t timestamp = 0;
	  currentTime = micros();
 800158a:	f000 fb21 	bl	8001bd0 <micros>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4919      	ldr	r1, [pc, #100]	; (80015f8 <main+0x118>)
 8001594:	e9c1 2300 	strd	r2, r3, [r1]
	  if(currentTime > timestamp)
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <main+0x11c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	461c      	mov	r4, r3
 80015a0:	4615      	mov	r5, r2
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <main+0x118>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	4294      	cmp	r4, r2
 80015aa:	eb75 0303 	sbcs.w	r3, r5, r3
 80015ae:	dae6      	bge.n	800157e <main+0x9e>
	  {
		  timestamp = currentTime + 200000; //200000 microsecond = 0.2 --> 200 millisecond
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <main+0x118>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	4613      	mov	r3, r2
 80015b8:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 80015bc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <main+0x11c>)
 80015c2:	6013      	str	r3, [r2, #0]

		  registerFrame[0].U16 = 0b0101100101100001; //Ya 22881
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <main+0x114>)
 80015c6:	f645 1261 	movw	r2, #22881	; 0x5961
 80015ca:	801a      	strh	r2, [r3, #0]
  {
 80015cc:	e7d7      	b.n	800157e <main+0x9e>
 80015ce:	bf00      	nop
 80015d0:	20000614 	.word	0x20000614
 80015d4:	20000624 	.word	0x20000624
 80015d8:	20000d38 	.word	0x20000d38
 80015dc:	20000278 	.word	0x20000278
 80015e0:	20000320 	.word	0x20000320
 80015e4:	200003d4 	.word	0x200003d4
 80015e8:	200006d0 	.word	0x200006d0
 80015ec:	2000053c 	.word	0x2000053c
 80015f0:	20000488 	.word	0x20000488
 80015f4:	20000ba8 	.word	0x20000ba8
 80015f8:	200006c8 	.word	0x200006c8
 80015fc:	20000df0 	.word	0x20000df0

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b094      	sub	sp, #80	; 0x50
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	2230      	movs	r2, #48	; 0x30
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f005 ff6e 	bl	80074f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <SystemClock_Config+0xc8>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <SystemClock_Config+0xc8>)
 800162e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <SystemClock_Config+0xc8>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <SystemClock_Config+0xcc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a20      	ldr	r2, [pc, #128]	; (80016cc <SystemClock_Config+0xcc>)
 800164a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <SystemClock_Config+0xcc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800165c:	2302      	movs	r3, #2
 800165e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001660:	2301      	movs	r3, #1
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001664:	2310      	movs	r3, #16
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001668:	2302      	movs	r3, #2
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800166c:	2300      	movs	r3, #0
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001670:	2308      	movs	r3, #8
 8001672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001678:	2302      	movs	r3, #2
 800167a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800167c:	2304      	movs	r3, #4
 800167e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fbaf 	bl	8003de8 <HAL_RCC_OscConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001690:	f000 fcf6 	bl	8002080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001694:	230f      	movs	r3, #15
 8001696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001698:	2302      	movs	r3, #2
 800169a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2103      	movs	r1, #3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fe11 	bl	80042d8 <HAL_RCC_ClockConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016bc:	f000 fce0 	bl	8002080 <Error_Handler>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3750      	adds	r7, #80	; 0x50
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000

080016d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	463b      	mov	r3, r7
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016e4:	4a28      	ldr	r2, [pc, #160]	; (8001788 <MX_ADC1_Init+0xb8>)
 80016e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016fe:	2201      	movs	r2, #1
 8001700:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_ADC1_Init+0xb4>)
 800170c:	2200      	movs	r2, #0
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <MX_ADC1_Init+0xbc>)
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_ADC1_Init+0xb4>)
 800171e:	2202      	movs	r2, #2
 8001720:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_ADC1_Init+0xb4>)
 800172c:	2201      	movs	r2, #1
 800172e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001730:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001732:	f001 f881 	bl	8002838 <HAL_ADC_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800173c:	f000 fca0 	bl	8002080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001748:	2303      	movs	r3, #3
 800174a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174c:	463b      	mov	r3, r7
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001752:	f001 f9c3 	bl	8002adc <HAL_ADC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800175c:	f000 fc90 	bl	8002080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001760:	2301      	movs	r3, #1
 8001762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001764:	2302      	movs	r3, #2
 8001766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_ADC1_Init+0xb4>)
 800176e:	f001 f9b5 	bl	8002adc <HAL_ADC_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001778:	f000 fc82 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000278 	.word	0x20000278
 8001788:	40012000 	.word	0x40012000
 800178c:	0f000001 	.word	0x0f000001

08001790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b096      	sub	sp, #88	; 0x58
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001796:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2220      	movs	r2, #32
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f005 fe91 	bl	80074f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <MX_TIM1_Init+0x138>)
 80017d0:	4a3e      	ldr	r2, [pc, #248]	; (80018cc <MX_TIM1_Init+0x13c>)
 80017d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <MX_TIM1_Init+0x138>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <MX_TIM1_Init+0x138>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <MX_TIM1_Init+0x138>)
 80017e2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80017e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <MX_TIM1_Init+0x138>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <MX_TIM1_Init+0x138>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <MX_TIM1_Init+0x138>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017fa:	4833      	ldr	r0, [pc, #204]	; (80018c8 <MX_TIM1_Init+0x138>)
 80017fc:	f002 ff8c 	bl	8004718 <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001806:	f000 fc3b 	bl	8002080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001814:	4619      	mov	r1, r3
 8001816:	482c      	ldr	r0, [pc, #176]	; (80018c8 <MX_TIM1_Init+0x138>)
 8001818:	f003 fd26 	bl	8005268 <HAL_TIM_ConfigClockSource>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001822:	f000 fc2d 	bl	8002080 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001826:	4828      	ldr	r0, [pc, #160]	; (80018c8 <MX_TIM1_Init+0x138>)
 8001828:	f003 f8f4 	bl	8004a14 <HAL_TIM_PWM_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001832:	f000 fc25 	bl	8002080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001842:	4619      	mov	r1, r3
 8001844:	4820      	ldr	r0, [pc, #128]	; (80018c8 <MX_TIM1_Init+0x138>)
 8001846:	f004 faa9 	bl	8005d9c <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001850:	f000 fc16 	bl	8002080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001854:	2360      	movs	r3, #96	; 0x60
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	4813      	ldr	r0, [pc, #76]	; (80018c8 <MX_TIM1_Init+0x138>)
 800187a:	f003 fc33 	bl	80050e4 <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001884:	f000 fbfc 	bl	8002080 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <MX_TIM1_Init+0x138>)
 80018ac:	f004 fae4 	bl	8005e78 <HAL_TIMEx_ConfigBreakDeadTime>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80018b6:	f000 fbe3 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <MX_TIM1_Init+0x138>)
 80018bc:	f000 fcea 	bl	8002294 <HAL_TIM_MspPostInit>

}
 80018c0:	bf00      	nop
 80018c2:	3758      	adds	r7, #88	; 0x58
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000320 	.word	0x20000320
 80018cc:	40010000 	.word	0x40010000

080018d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_TIM5_Init+0x94>)
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <MX_TIM5_Init+0x98>)
 80018f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_TIM5_Init+0x94>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_TIM5_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_TIM5_Init+0x94>)
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_TIM5_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM5_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001912:	4814      	ldr	r0, [pc, #80]	; (8001964 <MX_TIM5_Init+0x94>)
 8001914:	f002 ff00 	bl	8004718 <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800191e:	f000 fbaf 	bl	8002080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4619      	mov	r1, r3
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <MX_TIM5_Init+0x94>)
 8001930:	f003 fc9a 	bl	8005268 <HAL_TIM_ConfigClockSource>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800193a:	f000 fba1 	bl	8002080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	4619      	mov	r1, r3
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <MX_TIM5_Init+0x94>)
 800194c:	f004 fa26 	bl	8005d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001956:	f000 fb93 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200003d4 	.word	0x200003d4
 8001968:	40000c00 	.word	0x40000c00

0800196c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <MX_TIM11_Init+0xa0>)
 8001986:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <MX_TIM11_Init+0xa4>)
 8001988:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <MX_TIM11_Init+0xa0>)
 800198c:	2263      	movs	r2, #99	; 0x63
 800198e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <MX_TIM11_Init+0xa0>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_TIM11_Init+0xa0>)
 8001998:	f240 72d5 	movw	r2, #2005	; 0x7d5
 800199c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <MX_TIM11_Init+0xa0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <MX_TIM11_Init+0xa0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80019aa:	4818      	ldr	r0, [pc, #96]	; (8001a0c <MX_TIM11_Init+0xa0>)
 80019ac:	f002 feb4 	bl	8004718 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80019b6:	f000 fb63 	bl	8002080 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <MX_TIM11_Init+0xa0>)
 80019bc:	f002 ffc4 	bl	8004948 <HAL_TIM_OC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80019c6:	f000 fb5b 	bl	8002080 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80019ca:	2108      	movs	r1, #8
 80019cc:	480f      	ldr	r0, [pc, #60]	; (8001a0c <MX_TIM11_Init+0xa0>)
 80019ce:	f003 f937 	bl	8004c40 <HAL_TIM_OnePulse_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80019d8:	f000 fb52 	bl	8002080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80019dc:	2310      	movs	r3, #16
 80019de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80019e0:	f240 5399 	movw	r3, #1433	; 0x599
 80019e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_TIM11_Init+0xa0>)
 80019f6:	f003 fb19 	bl	800502c <HAL_TIM_OC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001a00:	f000 fb3e 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000488 	.word	0x20000488
 8001a10:	40014800 	.word	0x40014800

08001a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a1a:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <MX_USART2_UART_Init+0x54>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a20:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a2c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_USART2_UART_Init+0x50>)
 8001a50:	f004 fa82 	bl	8005f58 <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001a5a:	f000 fb11 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000053c 	.word	0x2000053c
 8001a68:	40004400 	.word	0x40004400

08001a6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_DMA_Init+0x68>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <MX_DMA_Init+0x68>)
 8001a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_DMA_Init+0x68>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_DMA_Init+0x68>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <MX_DMA_Init+0x68>)
 8001a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <MX_DMA_Init+0x68>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2011      	movs	r0, #17
 8001ab0:	f001 fb9f 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ab4:	2011      	movs	r0, #17
 8001ab6:	f001 fbb8 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2038      	movs	r0, #56	; 0x38
 8001ac0:	f001 fb97 	bl	80031f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ac4:	2038      	movs	r0, #56	; 0x38
 8001ac6:	f001 fbb0 	bl	800322a <HAL_NVIC_EnableIRQ>

}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_GPIO_Init+0xec>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001b64:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <MX_GPIO_Init+0xf0>)
 8001b66:	f002 f925 	bl	8003db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4812      	ldr	r0, [pc, #72]	; (8001bcc <MX_GPIO_Init+0xf4>)
 8001b82:	f001 ff7b 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b86:	2302      	movs	r3, #2
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MX_GPIO_Init+0xf4>)
 8001b9a:	f001 ff6f 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8001b9e:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_GPIO_Init+0xf0>)
 8001bb8:	f001 ff60 	bl	8003a7c <HAL_GPIO_Init>

}
 8001bbc:	bf00      	nop
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020800 	.word	0x40020800

08001bd0 <micros>:
	{
		_micros += UINT32_MAX;
	}
}
uint64_t micros()
{
 8001bd0:	b4b0      	push	{r4, r5, r7}
 8001bd2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <micros+0x2c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4611      	mov	r1, r2
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <micros+0x30>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	1884      	adds	r4, r0, r2
 8001be8:	eb41 0503 	adc.w	r5, r1, r3
 8001bec:	4622      	mov	r2, r4
 8001bee:	462b      	mov	r3, r5
}
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bcb0      	pop	{r4, r5, r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	200003d4 	.word	0x200003d4
 8001c00:	200006c0 	.word	0x200006c0

08001c04 <swap>:
void swap(int* a, int* b)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    int temp = *a;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]
    *b = temp;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	601a      	str	r2, [r3, #0]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SetTwoPointsForCalibrate>:
void SetTwoPointsForCalibrate()
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
	int x0 = 178, y0 = 100, x1 = 100, y1 = 100; //laser will give two points of tray
 8001c36:	23b2      	movs	r3, #178	; 0xb2
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	2364      	movs	r3, #100	; 0x64
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	2364      	movs	r3, #100	; 0x64
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	2364      	movs	r3, #100	; 0x64
 8001c44:	603b      	str	r3, [r7, #0]
//	float32_t distancebetweenpoints = sqrt(pow(x0 - x1, 2) + pow(y0 - y1, 2));
//	x1 = x0 + distancebetweenpoints * cos((atan(50.0 / 60) + thata) * M_PI / 180);
//	y1 = y0 + distancebetweenpoints * sin((atan(50.0 / 60) + thata) * M_PI / 180);

	if(y0 > y1){swap(&x0, &x1); swap(&y0, &y1);}
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dd0e      	ble.n	8001c6c <SetTwoPointsForCalibrate+0x3c>
 8001c4e:	1d3a      	adds	r2, r7, #4
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffd4 	bl	8001c04 <swap>
 8001c5c:	463a      	mov	r2, r7
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ffcd 	bl	8001c04 <swap>
 8001c6a:	e015      	b.n	8001c98 <SetTwoPointsForCalibrate+0x68>
	else if(y0 == y1)
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d111      	bne.n	8001c98 <SetTwoPointsForCalibrate+0x68>
	{
		if (x0 > x1){swap(&x0, &x1); swap(&y0, &y1);}
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dd0d      	ble.n	8001c98 <SetTwoPointsForCalibrate+0x68>
 8001c7c:	1d3a      	adds	r2, r7, #4
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ffbd 	bl	8001c04 <swap>
 8001c8a:	463a      	mov	r2, r7
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ffb6 	bl	8001c04 <swap>
	}

	reference[0] = x0; reference[1] = y0;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <SetTwoPointsForCalibrate+0x110>)
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4a27      	ldr	r2, [pc, #156]	; (8001d40 <SetTwoPointsForCalibrate+0x110>)
 8001ca2:	6053      	str	r3, [r2, #4]
	opposite[0] = x1; opposite[1] = y1;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <SetTwoPointsForCalibrate+0x114>)
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <SetTwoPointsForCalibrate+0x114>)
 8001cae:	6053      	str	r3, [r2, #4]

	rotationAngleRadian = (atan2(y1 - y0, x1 - x0) - atan2(50, 60));
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fbe0 	bl	800047c <__aeabi_i2d>
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	460d      	mov	r5, r1
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fbd8 	bl	800047c <__aeabi_i2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	ec43 2b11 	vmov	d1, r2, r3
 8001cd4:	ec45 4b10 	vmov	d0, r4, r5
 8001cd8:	f005 fc12 	bl	8007500 <atan2>
 8001cdc:	ec51 0b10 	vmov	r0, r1, d0
 8001ce0:	a313      	add	r3, pc, #76	; (adr r3, 8001d30 <SetTwoPointsForCalibrate+0x100>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fa7b 	bl	80001e0 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe fec7 	bl	8000a84 <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <SetTwoPointsForCalibrate+0x118>)
 8001cfa:	6013      	str	r3, [r2, #0]
	Degrees = rotationAngleRadian * (180 / M_PI);
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <SetTwoPointsForCalibrate+0x118>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fbcd 	bl	80004a0 <__aeabi_f2d>
 8001d06:	a30c      	add	r3, pc, #48	; (adr r3, 8001d38 <SetTwoPointsForCalibrate+0x108>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc20 	bl	8000550 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe feb4 	bl	8000a84 <__aeabi_d2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <SetTwoPointsForCalibrate+0x11c>)
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	c3f16a8a 	.word	0xc3f16a8a
 8001d34:	3fe63b4b 	.word	0x3fe63b4b
 8001d38:	1a63c1f8 	.word	0x1a63c1f8
 8001d3c:	404ca5dc 	.word	0x404ca5dc
 8001d40:	20000614 	.word	0x20000614
 8001d44:	2000061c 	.word	0x2000061c
 8001d48:	20000624 	.word	0x20000624
 8001d4c:	20000628 	.word	0x20000628

08001d50 <HolePositionsCartesian>:
void HolePositionsCartesian(float32_t* bottomleft, float32_t rotationAngleRadian)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	ed87 0a00 	vstr	s0, [r7]
        50, 40
    };

    float32_t rotationMatrix[4] =
    {
    	arm_cos_f32(rotationAngleRadian),  //0
 8001d5c:	ed97 0a00 	vldr	s0, [r7]
 8001d60:	f000 fbf0 	bl	8002544 <arm_cos_f32>
 8001d64:	eef0 7a40 	vmov.f32	s15, s0
    float32_t rotationMatrix[4] =
 8001d68:	edc7 7a03 	vstr	s15, [r7, #12]
		arm_sin_f32(rotationAngleRadian),  //1
 8001d6c:	ed97 0a00 	vldr	s0, [r7]
 8001d70:	f000 fc6e 	bl	8002650 <arm_sin_f32>
 8001d74:	eef0 7a40 	vmov.f32	s15, s0
    float32_t rotationMatrix[4] =
 8001d78:	edc7 7a04 	vstr	s15, [r7, #16]
		-arm_sin_f32(rotationAngleRadian), //2
 8001d7c:	ed97 0a00 	vldr	s0, [r7]
 8001d80:	f000 fc66 	bl	8002650 <arm_sin_f32>
 8001d84:	eef0 7a40 	vmov.f32	s15, s0
 8001d88:	eef1 7a67 	vneg.f32	s15, s15
    float32_t rotationMatrix[4] =
 8001d8c:	edc7 7a05 	vstr	s15, [r7, #20]
		arm_cos_f32(rotationAngleRadian)   //3
 8001d90:	ed97 0a00 	vldr	s0, [r7]
 8001d94:	f000 fbd6 	bl	8002544 <arm_cos_f32>
 8001d98:	eef0 7a40 	vmov.f32	s15, s0
    float32_t rotationMatrix[4] =
 8001d9c:	edc7 7a06 	vstr	s15, [r7, #24]
    };

    test = bottomleft[0];
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001daa:	ee17 2a90 	vmov	r2, s15
 8001dae:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <HolePositionsCartesian+0x154>)
 8001db0:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 9; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e06c      	b.n	8001e92 <HolePositionsCartesian+0x142>
    {
    	//rotation
    	holePositionsCartesianrotation[i*2] = (holePositionsRelativetoBottomLeft[i*2] * rotationMatrix[0]) + (holePositionsRelativetoBottomLeft[i*2+1] * rotationMatrix[2]);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <HolePositionsCartesian+0x158>)
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	ed93 7a00 	vldr	s14, [r3]
 8001dc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4a34      	ldr	r2, [pc, #208]	; (8001ea8 <HolePositionsCartesian+0x158>)
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	edd3 6a00 	vldr	s13, [r3]
 8001dde:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dee:	4a2f      	ldr	r2, [pc, #188]	; (8001eac <HolePositionsCartesian+0x15c>)
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	edc3 7a00 	vstr	s15, [r3]
    	holePositionsCartesianrotation[i*2+1] = (holePositionsRelativetoBottomLeft[i*2] * rotationMatrix[1]) + (holePositionsRelativetoBottomLeft[i*2+1] * rotationMatrix[3]);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <HolePositionsCartesian+0x158>)
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	ed93 7a00 	vldr	s14, [r3]
 8001e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <HolePositionsCartesian+0x158>)
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	edd3 6a00 	vldr	s13, [r3]
 8001e1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e30:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HolePositionsCartesian+0x15c>)
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	edc3 7a00 	vstr	s15, [r3]

    	//translation
    	holePositionsCartesian[i*2] = holePositionsCartesianrotation[i*2] + bottomleft[0];
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HolePositionsCartesian+0x15c>)
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	ed93 7a00 	vldr	s14, [r3]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <HolePositionsCartesian+0x160>)
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	edc3 7a00 	vstr	s15, [r3]
    	holePositionsCartesian[i*2+1] = holePositionsCartesianrotation[i*2+1] + bottomleft[1];
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HolePositionsCartesian+0x15c>)
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	ed93 7a00 	vldr	s14, [r3]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HolePositionsCartesian+0x160>)
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 9; i++)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	dd8f      	ble.n	8001db8 <HolePositionsCartesian+0x68>
    }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000610 	.word	0x20000610
 8001ea8:	20000200 	.word	0x20000200
 8001eac:	20000674 	.word	0x20000674
 8001eb0:	2000062c 	.word	0x2000062c

08001eb4 <GetJoystickXYaxisValue>:
//-------------------------------------------------------------------------------------------------------------------------------------
void GetJoystickXYaxisValue()
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
	JoyStickSwitch = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001eba:	2102      	movs	r1, #2
 8001ebc:	483b      	ldr	r0, [pc, #236]	; (8001fac <GetJoystickXYaxisValue+0xf8>)
 8001ebe:	f001 ff61 	bl	8003d84 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <GetJoystickXYaxisValue+0xfc>)
 8001ec8:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 20; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	e060      	b.n	8001f92 <GetJoystickXYaxisValue+0xde>
	{
		if(i % 2 == 0)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d127      	bne.n	8001f2a <GetJoystickXYaxisValue+0x76>
		{
			IN1[i/2] = adcRawData[i];
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0fda      	lsrs	r2, r3, #31
 8001ede:	4413      	add	r3, r2
 8001ee0:	105b      	asrs	r3, r3, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4a33      	ldr	r2, [pc, #204]	; (8001fb4 <GetJoystickXYaxisValue+0x100>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <GetJoystickXYaxisValue+0x104>)
 8001eee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			Y_axis += IN1[i/2];
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0fda      	lsrs	r2, r3, #31
 8001ef6:	4413      	add	r3, r2
 8001ef8:	105b      	asrs	r3, r3, #1
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <GetJoystickXYaxisValue+0x104>)
 8001efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f02:	4a2e      	ldr	r2, [pc, #184]	; (8001fbc <GetJoystickXYaxisValue+0x108>)
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <GetJoystickXYaxisValue+0x108>)
 8001f0c:	601a      	str	r2, [r3, #0]
			if(i == 18){joystickYaxis = Y_axis/10;}
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b12      	cmp	r3, #18
 8001f12:	d13b      	bne.n	8001f8c <GetJoystickXYaxisValue+0xd8>
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <GetJoystickXYaxisValue+0x108>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <GetJoystickXYaxisValue+0x10c>)
 8001f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f1e:	1092      	asrs	r2, r2, #2
 8001f20:	17db      	asrs	r3, r3, #31
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <GetJoystickXYaxisValue+0x110>)
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e030      	b.n	8001f8c <GetJoystickXYaxisValue+0xd8>
		}
		else if(i % 2 == 1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	bfb8      	it	lt
 8001f34:	425b      	neglt	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d128      	bne.n	8001f8c <GetJoystickXYaxisValue+0xd8>
		{
			IN0[(i-1)/2] = adcRawData[i];
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	0fda      	lsrs	r2, r3, #31
 8001f40:	4413      	add	r3, r2
 8001f42:	105b      	asrs	r3, r3, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <GetJoystickXYaxisValue+0x100>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <GetJoystickXYaxisValue+0x114>)
 8001f50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			X_axis += IN0[(i-1)/2];
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	0fda      	lsrs	r2, r3, #31
 8001f5a:	4413      	add	r3, r2
 8001f5c:	105b      	asrs	r3, r3, #1
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <GetJoystickXYaxisValue+0x114>)
 8001f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <GetJoystickXYaxisValue+0x118>)
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <GetJoystickXYaxisValue+0x118>)
 8001f70:	601a      	str	r2, [r3, #0]
			if(i == 19){joystickXaxis = X_axis/10;}
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b13      	cmp	r3, #19
 8001f76:	d109      	bne.n	8001f8c <GetJoystickXYaxisValue+0xd8>
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <GetJoystickXYaxisValue+0x118>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <GetJoystickXYaxisValue+0x10c>)
 8001f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f82:	1092      	asrs	r2, r2, #2
 8001f84:	17db      	asrs	r3, r3, #31
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <GetJoystickXYaxisValue+0x11c>)
 8001f8a:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 20; i++)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b13      	cmp	r3, #19
 8001f96:	dd9b      	ble.n	8001ed0 <GetJoystickXYaxisValue+0x1c>
		}
	} X_axis = 0; Y_axis = 0;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <GetJoystickXYaxisValue+0x118>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <GetJoystickXYaxisValue+0x108>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	20000dd8 	.word	0x20000dd8
 8001fb4:	20000d38 	.word	0x20000d38
 8001fb8:	20000db0 	.word	0x20000db0
 8001fbc:	20000de0 	.word	0x20000de0
 8001fc0:	66666667 	.word	0x66666667
 8001fc4:	20000de8 	.word	0x20000de8
 8001fc8:	20000d88 	.word	0x20000d88
 8001fcc:	20000ddc 	.word	0x20000ddc
 8001fd0:	20000de4 	.word	0x20000de4

08001fd4 <JoyStickControlCartesian>:

void JoyStickControlCartesian()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fde:	4820      	ldr	r0, [pc, #128]	; (8002060 <JoyStickControlCartesian+0x8c>)
 8001fe0:	f001 fee8 	bl	8003db4 <HAL_GPIO_WritePin>

	//X-axis
	if(joystickXaxis > 2500) //Left
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <JoyStickControlCartesian+0x90>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001fec:	4293      	cmp	r3, r2
 8001fee:	dd04      	ble.n	8001ffa <JoyStickControlCartesian+0x26>
	{registerFrame[64].U16 = 4;}
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <JoyStickControlCartesian+0x94>)
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001ff8:	e00e      	b.n	8002018 <JoyStickControlCartesian+0x44>

	else if(joystickXaxis < 1900) //Right
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <JoyStickControlCartesian+0x90>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f240 726b 	movw	r2, #1899	; 0x76b
 8002002:	4293      	cmp	r3, r2
 8002004:	dc04      	bgt.n	8002010 <JoyStickControlCartesian+0x3c>
	{registerFrame[64].U16 = 8;}
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <JoyStickControlCartesian+0x94>)
 8002008:	2208      	movs	r2, #8
 800200a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800200e:	e003      	b.n	8002018 <JoyStickControlCartesian+0x44>

	else{registerFrame[64].U16 = 0;}
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <JoyStickControlCartesian+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	//Y-axis
	if(joystickYaxis < 1900) //Front
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <JoyStickControlCartesian+0x98>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f240 726b 	movw	r2, #1899	; 0x76b
 8002020:	4293      	cmp	r3, r2
 8002022:	dc03      	bgt.n	800202c <JoyStickControlCartesian+0x58>
	{PulseWidthModulation = 1000;}
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <JoyStickControlCartesian+0x9c>)
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <JoyStickControlCartesian+0xa0>)
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e00d      	b.n	8002048 <JoyStickControlCartesian+0x74>

	else if(joystickYaxis > 2500) //Back
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <JoyStickControlCartesian+0x98>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002034:	4293      	cmp	r3, r2
 8002036:	dd03      	ble.n	8002040 <JoyStickControlCartesian+0x6c>
	{PulseWidthModulation = -1000;}
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <JoyStickControlCartesian+0x9c>)
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <JoyStickControlCartesian+0xa4>)
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e003      	b.n	8002048 <JoyStickControlCartesian+0x74>

	else{PulseWidthModulation = 0;}
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <JoyStickControlCartesian+0x9c>)
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PulseWidthModulation);
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <JoyStickControlCartesian+0x9c>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <JoyStickControlCartesian+0xa8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002056:	ee17 2a90 	vmov	r2, s15
 800205a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40020000 	.word	0x40020000
 8002064:	20000de4 	.word	0x20000de4
 8002068:	20000ba8 	.word	0x20000ba8
 800206c:	20000de8 	.word	0x20000de8
 8002070:	20000dec 	.word	0x20000dec
 8002074:	447a0000 	.word	0x447a0000
 8002078:	c47a0000 	.word	0xc47a0000
 800207c:	20000320 	.word	0x20000320

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002088:	e7fe      	b.n	8002088 <Error_Handler+0x8>
	...

0800208c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_MspInit+0x4c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_MspInit+0x4c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020ca:	2007      	movs	r0, #7
 80020cc:	f001 f886 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800

080020dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <HAL_ADC_MspInit+0xdc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d157      	bne.n	80021ae <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_ADC_MspInit+0xe0>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_ADC_MspInit+0xe0>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_ADC_MspInit+0xe0>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_ADC_MspInit+0xe0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a26      	ldr	r2, [pc, #152]	; (80021bc <HAL_ADC_MspInit+0xe0>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_ADC_MspInit+0xe0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002136:	2303      	movs	r3, #3
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213a:	2303      	movs	r3, #3
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	481d      	ldr	r0, [pc, #116]	; (80021c0 <HAL_ADC_MspInit+0xe4>)
 800214a:	f001 fc97 	bl	8003a7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002150:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_ADC_MspInit+0xec>)
 8002152:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002174:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002178:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800217c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002184:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002188:	2200      	movs	r2, #0
 800218a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800218c:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 800218e:	2200      	movs	r2, #0
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 8002194:	f001 f864 	bl	8003260 <HAL_DMA_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800219e:	f7ff ff6f 	bl	8002080 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <HAL_ADC_MspInit+0xe8>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40012000 	.word	0x40012000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	200002c0 	.word	0x200002c0
 80021c8:	40026410 	.word	0x40026410

080021cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_TIM_Base_MspInit+0xb8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d116      	bne.n	800220c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a28      	ldr	r2, [pc, #160]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	201a      	movs	r0, #26
 8002200:	f000 fff7 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002204:	201a      	movs	r0, #26
 8002206:	f001 f810 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800220a:	e036      	b.n	800227a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1e      	ldr	r2, [pc, #120]	; (800228c <HAL_TIM_Base_MspInit+0xc0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d116      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 8002220:	f043 0308 	orr.w	r3, r3, #8
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	2032      	movs	r0, #50	; 0x32
 8002238:	f000 ffdb 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800223c:	2032      	movs	r0, #50	; 0x32
 800223e:	f000 fff4 	bl	800322a <HAL_NVIC_EnableIRQ>
}
 8002242:	e01a      	b.n	800227a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a11      	ldr	r2, [pc, #68]	; (8002290 <HAL_TIM_Base_MspInit+0xc4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d115      	bne.n	800227a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_TIM_Base_MspInit+0xbc>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	201a      	movs	r0, #26
 8002270:	f000 ffbf 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002274:	201a      	movs	r0, #26
 8002276:	f000 ffd8 	bl	800322a <HAL_NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40023800 	.word	0x40023800
 800228c:	40000c00 	.word	0x40000c00
 8002290:	40014800 	.word	0x40014800

08002294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_TIM_MspPostInit+0x68>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d11e      	bne.n	80022f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_TIM_MspPostInit+0x6c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <HAL_TIM_MspPostInit+0x6c>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_TIM_MspPostInit+0x6c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	4619      	mov	r1, r3
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <HAL_TIM_MspPostInit+0x70>)
 80022f0:	f001 fbc4 	bl	8003a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40010000 	.word	0x40010000
 8002300:	40023800 	.word	0x40023800
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a34      	ldr	r2, [pc, #208]	; (80023f8 <HAL_UART_MspInit+0xf0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d161      	bne.n	80023ee <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_UART_MspInit+0xf4>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_UART_MspInit+0xf4>)
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_UART_MspInit+0xf4>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_UART_MspInit+0xf4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <HAL_UART_MspInit+0xf4>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <HAL_UART_MspInit+0xf4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002362:	230c      	movs	r3, #12
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002372:	2307      	movs	r3, #7
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4820      	ldr	r0, [pc, #128]	; (8002400 <HAL_UART_MspInit+0xf8>)
 800237e:	f001 fb7d 	bl	8003a7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_UART_MspInit+0xfc>)
 8002384:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_UART_MspInit+0x100>)
 8002386:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_UART_MspInit+0xfc>)
 800238a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800238e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002390:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_UART_MspInit+0xfc>)
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_UART_MspInit+0xfc>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_UART_MspInit+0xfc>)
 800239e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_UART_MspInit+0xfc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_UART_MspInit+0xfc>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <HAL_UART_MspInit+0xfc>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_UART_MspInit+0xfc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_UART_MspInit+0xfc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023c2:	4810      	ldr	r0, [pc, #64]	; (8002404 <HAL_UART_MspInit+0xfc>)
 80023c4:	f000 ff4c 	bl	8003260 <HAL_DMA_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80023ce:	f7ff fe57 	bl	8002080 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_UART_MspInit+0xfc>)
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_UART_MspInit+0xfc>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	2026      	movs	r0, #38	; 0x26
 80023e4:	f000 ff05 	bl	80031f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023e8:	2026      	movs	r0, #38	; 0x26
 80023ea:	f000 ff1e 	bl	800322a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40004400 	.word	0x40004400
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020000 	.word	0x40020000
 8002404:	200005b0 	.word	0x200005b0
 8002408:	400260a0 	.word	0x400260a0

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002458:	f000 f9ce 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <DMA1_Stream6_IRQHandler+0x10>)
 8002466:	f001 f893 	bl	8003590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200005b0 	.word	0x200005b0

08002474 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002478:	4803      	ldr	r0, [pc, #12]	; (8002488 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800247a:	f002 fcaf 	bl	8004ddc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002480:	f002 fcac 	bl	8004ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000320 	.word	0x20000320
 800248c:	20000488 	.word	0x20000488

08002490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <USART2_IRQHandler+0x10>)
 8002496:	f003 ffb3 	bl	8006400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000053c 	.word	0x2000053c

080024a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM5_IRQHandler+0x10>)
 80024aa:	f002 fc97 	bl	8004ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003d4 	.word	0x200003d4

080024b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <DMA2_Stream0_IRQHandler+0x10>)
 80024be:	f001 f867 	bl	8003590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200002c0 	.word	0x200002c0

080024cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <SystemInit+0x20>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <SystemInit+0x20>)
 80024d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024f6:	490e      	ldr	r1, [pc, #56]	; (8002530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800250c:	4c0b      	ldr	r4, [pc, #44]	; (800253c <LoopFillZerobss+0x26>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800251a:	f7ff ffd7 	bl	80024cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251e:	f004 ffb5 	bl	800748c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002522:	f7fe ffdd 	bl	80014e0 <main>
  bx  lr    
 8002526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800252c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002530:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002534:	080082b8 	.word	0x080082b8
  ldr r2, =_sbss
 8002538:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800253c:	20000df8 	.word	0x20000df8

08002540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002540:	e7fe      	b.n	8002540 <ADC_IRQHandler>
	...

08002544 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8002544:	b480      	push	{r7}
 8002546:	b08b      	sub	sp, #44	; 0x2c
 8002548:	af00      	add	r7, sp, #0
 800254a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 800254e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002552:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002644 <arm_cos_f32+0x100>
 8002556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800255e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002562:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8002566:	edd7 7a06 	vldr	s15, [r7, #24]
 800256a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256e:	ee17 3a90 	vmov	r3, s15
 8002572:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8002574:	edd7 7a06 	vldr	s15, [r7, #24]
 8002578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d502      	bpl.n	8002588 <arm_cos_f32+0x44>
  {
    n--;
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	3b01      	subs	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002592:	ed97 7a06 	vldr	s14, [r7, #24]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800259e:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002648 <arm_cos_f32+0x104>
 80025a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025aa:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80025ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80025b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b6:	ee17 3a90 	vmov	r3, s15
 80025ba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80025bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c2:	d309      	bcc.n	80025d8 <arm_cos_f32+0x94>
    index = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80025c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80025cc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002648 <arm_cos_f32+0x104>
 80025d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025d4:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80025d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80025e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ea:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 80025ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <arm_cos_f32+0x108>)
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80025fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025fc:	3301      	adds	r3, #1
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <arm_cos_f32+0x108>)
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8002608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800260c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002614:	edd7 7a04 	vldr	s15, [r7, #16]
 8002618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002620:	edd7 7a03 	vldr	s15, [r7, #12]
 8002624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	ee07 3a90 	vmov	s15, r3
}
 8002636:	eeb0 0a67 	vmov.f32	s0, s15
 800263a:	372c      	adds	r7, #44	; 0x2c
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	3e22f983 	.word	0x3e22f983
 8002648:	44000000 	.word	0x44000000
 800264c:	08007a28 	.word	0x08007a28

08002650 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8002650:	b480      	push	{r7}
 8002652:	b08b      	sub	sp, #44	; 0x2c
 8002654:	af00      	add	r7, sp, #0
 8002656:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800265a:	edd7 7a01 	vldr	s15, [r7, #4]
 800265e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002748 <arm_sin_f32+0xf8>
 8002662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002666:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800266a:	edd7 7a06 	vldr	s15, [r7, #24]
 800266e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002672:	ee17 3a90 	vmov	r3, s15
 8002676:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8002678:	edd7 7a06 	vldr	s15, [r7, #24]
 800267c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002684:	d502      	bpl.n	800268c <arm_sin_f32+0x3c>
  {
    n--;
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	3b01      	subs	r3, #1
 800268a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002696:	ed97 7a06 	vldr	s14, [r7, #24]
 800269a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80026a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80026a6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800274c <arm_sin_f32+0xfc>
 80026aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ae:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80026b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80026b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ba:	ee17 3a90 	vmov	r3, s15
 80026be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80026c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c6:	d309      	bcc.n	80026dc <arm_sin_f32+0x8c>
    index = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80026cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80026d0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800274c <arm_sin_f32+0xfc>
 80026d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026d8:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80026dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80026ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ee:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 80026f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026f4:	4a16      	ldr	r2, [pc, #88]	; (8002750 <arm_sin_f32+0x100>)
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80026fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002700:	3301      	adds	r3, #1
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <arm_sin_f32+0x100>)
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800270c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002710:	edd7 7a05 	vldr	s15, [r7, #20]
 8002714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002718:	edd7 7a04 	vldr	s15, [r7, #16]
 800271c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002720:	edd7 6a05 	vldr	s13, [r7, #20]
 8002724:	edd7 7a03 	vldr	s15, [r7, #12]
 8002728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002730:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	ee07 3a90 	vmov	s15, r3
}
 800273a:	eeb0 0a67 	vmov.f32	s0, s15
 800273e:	372c      	adds	r7, #44	; 0x2c
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	3e22f983 	.word	0x3e22f983
 800274c:	44000000 	.word	0x44000000
 8002750:	08007a28 	.word	0x08007a28

08002754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_Init+0x40>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_Init+0x40>)
 800275e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_Init+0x40>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_Init+0x40>)
 800276a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_Init+0x40>)
 8002776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 fd2d 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002782:	2000      	movs	r0, #0
 8002784:	f000 f808 	bl	8002798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002788:	f7ff fc80 	bl	800208c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00

08002798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_InitTick+0x54>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_InitTick+0x58>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fd45 	bl	8003246 <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f000 fd0d 	bl	80031f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <HAL_InitTick+0x5c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000248 	.word	0x20000248
 80027f0:	20000250 	.word	0x20000250
 80027f4:	2000024c 	.word	0x2000024c

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000250 	.word	0x20000250
 800281c:	20000df4 	.word	0x20000df4

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000df4 	.word	0x20000df4

08002838 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e033      	b.n	80028b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fc40 	bl	80020dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800287e:	f023 0302 	bic.w	r3, r3, #2
 8002882:	f043 0202 	orr.w	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa58 	bl	8002d40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
 80028a6:	e001      	b.n	80028ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_ADC_Start_DMA+0x1e>
 80028da:	2302      	movs	r3, #2
 80028dc:	e0ce      	b.n	8002a7c <HAL_ADC_Start_DMA+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d018      	beq.n	8002926 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002904:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <HAL_ADC_Start_DMA+0x1c4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a5f      	ldr	r2, [pc, #380]	; (8002a88 <HAL_ADC_Start_DMA+0x1c8>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0c9a      	lsrs	r2, r3, #18
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002918:	e002      	b.n	8002920 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	3b01      	subs	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f9      	bne.n	800291a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002934:	d107      	bne.n	8002946 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002944:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	f040 8086 	bne.w	8002a62 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002980:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002994:	d106      	bne.n	80029a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f023 0206 	bic.w	r2, r3, #6
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
 80029a2:	e002      	b.n	80029aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_ADC_Start_DMA+0x1cc>)
 80029b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	4a35      	ldr	r2, [pc, #212]	; (8002a90 <HAL_ADC_Start_DMA+0x1d0>)
 80029bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_ADC_Start_DMA+0x1d4>)
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	4a33      	ldr	r2, [pc, #204]	; (8002a98 <HAL_ADC_Start_DMA+0x1d8>)
 80029cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	334c      	adds	r3, #76	; 0x4c
 8002a02:	4619      	mov	r1, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f000 fcd8 	bl	80033bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10f      	bne.n	8002a38 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d129      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	e020      	b.n	8002a7a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <HAL_ADC_Start_DMA+0x1dc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11b      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x1ba>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d114      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e00b      	b.n	8002a7a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000248 	.word	0x20000248
 8002a88:	431bde83 	.word	0x431bde83
 8002a8c:	40012300 	.word	0x40012300
 8002a90:	08002f39 	.word	0x08002f39
 8002a94:	08002ff3 	.word	0x08002ff3
 8002a98:	0800300f 	.word	0x0800300f
 8002a9c:	40012000 	.word	0x40012000

08002aa0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1c>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e113      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x244>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b09      	cmp	r3, #9
 8002b06:	d925      	bls.n	8002b54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68d9      	ldr	r1, [r3, #12]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b1e      	subs	r3, #30
 8002b1e:	2207      	movs	r2, #7
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43da      	mvns	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68d9      	ldr	r1, [r3, #12]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	4603      	mov	r3, r0
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4403      	add	r3, r0
 8002b46:	3b1e      	subs	r3, #30
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	e022      	b.n	8002b9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6919      	ldr	r1, [r3, #16]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	2207      	movs	r2, #7
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	400a      	ands	r2, r1
 8002b76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6919      	ldr	r1, [r3, #16]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4403      	add	r3, r0
 8002b90:	409a      	lsls	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d824      	bhi.n	8002bec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b05      	subs	r3, #5
 8002bb4:	221f      	movs	r2, #31
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b05      	subs	r3, #5
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bea:	e04c      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d824      	bhi.n	8002c3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	3b23      	subs	r3, #35	; 0x23
 8002c06:	221f      	movs	r2, #31
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	400a      	ands	r2, r1
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3b23      	subs	r3, #35	; 0x23
 8002c30:	fa00 f203 	lsl.w	r2, r0, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c3c:	e023      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3b41      	subs	r3, #65	; 0x41
 8002c50:	221f      	movs	r2, #31
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	3b41      	subs	r3, #65	; 0x41
 8002c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_ADC_ConfigChannel+0x250>)
 8002c88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <HAL_ADC_ConfigChannel+0x254>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10f      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1d8>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b12      	cmp	r3, #18
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <HAL_ADC_ConfigChannel+0x254>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12b      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x23a>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_ADC_ConfigChannel+0x258>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <HAL_ADC_ConfigChannel+0x1f4>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b11      	cmp	r3, #17
 8002cce:	d122      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_ADC_ConfigChannel+0x258>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d111      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_ADC_ConfigChannel+0x25c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <HAL_ADC_ConfigChannel+0x260>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	0c9a      	lsrs	r2, r3, #18
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d08:	e002      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f9      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40012300 	.word	0x40012300
 8002d30:	40012000 	.word	0x40012000
 8002d34:	10000012 	.word	0x10000012
 8002d38:	20000248 	.word	0x20000248
 8002d3c:	431bde83 	.word	0x431bde83

08002d40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d48:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <ADC_Init+0x1f0>)
 8002d4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	021a      	lsls	r2, r3, #8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6899      	ldr	r1, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <ADC_Init+0x1f4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d022      	beq.n	8002e1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002de6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6899      	ldr	r1, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e00f      	b.n	8002e3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0202 	bic.w	r2, r2, #2
 8002e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6899      	ldr	r1, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	7e1b      	ldrb	r3, [r3, #24]
 8002e58:	005a      	lsls	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01b      	beq.n	8002ea4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	3b01      	subs	r3, #1
 8002e98:	035a      	lsls	r2, r3, #13
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	e007      	b.n	8002eb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	051a      	lsls	r2, r3, #20
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ef6:	025a      	lsls	r2, r3, #9
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	029a      	lsls	r2, r3, #10
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	40012300 	.word	0x40012300
 8002f34:	0f000001 	.word	0x0f000001

08002f38 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d13c      	bne.n	8002fcc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d12b      	bne.n	8002fc4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d127      	bne.n	8002fc4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d119      	bne.n	8002fc4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0220 	bic.w	r2, r2, #32
 8002f9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fd6b 	bl	8002aa0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fca:	e00e      	b.n	8002fea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff fd75 	bl	8002ac8 <HAL_ADC_ErrorCallback>
}
 8002fde:	e004      	b.n	8002fea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff fd57 	bl	8002ab4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2240      	movs	r2, #64	; 0x40
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f043 0204 	orr.w	r2, r3, #4
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff fd4a 	bl	8002ac8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	; (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	; (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	; (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a8:	d301      	bcc.n	80031ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00f      	b.n	80031ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <SysTick_Config+0x40>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b6:	210f      	movs	r1, #15
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	f7ff ff8e 	bl	80030dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SysTick_Config+0x40>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <SysTick_Config+0x40>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000e010 	.word	0xe000e010

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff ff29 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003204:	f7ff ff3e 	bl	8003084 <__NVIC_GetPriorityGrouping>
 8003208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ff8e 	bl	8003130 <NVIC_EncodePriority>
 8003214:	4602      	mov	r2, r0
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff5d 	bl	80030dc <__NVIC_SetPriority>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff31 	bl	80030a0 <__NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffa2 	bl	8003198 <SysTick_Config>
 8003254:	4603      	mov	r3, r0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800326c:	f7ff fad8 	bl	8002820 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e099      	b.n	80033b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329c:	e00f      	b.n	80032be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800329e:	f7ff fabf 	bl	8002820 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d908      	bls.n	80032be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2203      	movs	r2, #3
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e078      	b.n	80033b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e8      	bne.n	800329e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <HAL_DMA_Init+0x158>)
 80032d8:	4013      	ands	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	2b04      	cmp	r3, #4
 8003316:	d107      	bne.n	8003328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	4313      	orrs	r3, r2
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 0307 	bic.w	r3, r3, #7
 800333e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b04      	cmp	r3, #4
 8003350:	d117      	bne.n	8003382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fb0d 	bl	8003984 <DMA_CheckFifoParam>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2240      	movs	r2, #64	; 0x40
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800337e:	2301      	movs	r3, #1
 8003380:	e016      	b.n	80033b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fac4 	bl	8003918 <DMA_CalcBaseAndBitshift>
 8003390:	4603      	mov	r3, r0
 8003392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	223f      	movs	r2, #63	; 0x3f
 800339a:	409a      	lsls	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	f010803f 	.word	0xf010803f

080033bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Start_IT+0x26>
 80033de:	2302      	movs	r3, #2
 80033e0:	e040      	b.n	8003464 <HAL_DMA_Start_IT+0xa8>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d12f      	bne.n	8003456 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fa56 	bl	80038bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	223f      	movs	r2, #63	; 0x3f
 8003416:	409a      	lsls	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0216 	orr.w	r2, r2, #22
 800342a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0208 	orr.w	r2, r2, #8
 8003442:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e005      	b.n	8003462 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800345e:	2302      	movs	r3, #2
 8003460:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003462:	7dfb      	ldrb	r3, [r7, #23]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800347a:	f7ff f9d1 	bl	8002820 <HAL_GetTick>
 800347e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d008      	beq.n	800349e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e052      	b.n	8003544 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0216 	bic.w	r2, r2, #22
 80034ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <HAL_DMA_Abort+0x62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0208 	bic.w	r2, r2, #8
 80034dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ee:	e013      	b.n	8003518 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f0:	f7ff f996 	bl	8002820 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d90c      	bls.n	8003518 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2203      	movs	r2, #3
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e015      	b.n	8003544 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e4      	bne.n	80034f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352a:	223f      	movs	r2, #63	; 0x3f
 800352c:	409a      	lsls	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d004      	beq.n	800356a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e00c      	b.n	8003584 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2205      	movs	r2, #5
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800359c:	4b8e      	ldr	r3, [pc, #568]	; (80037d8 <HAL_DMA_IRQHandler+0x248>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a8e      	ldr	r2, [pc, #568]	; (80037dc <HAL_DMA_IRQHandler+0x24c>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0a9b      	lsrs	r3, r3, #10
 80035a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	2208      	movs	r2, #8
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01a      	beq.n	80035fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0204 	bic.w	r2, r2, #4
 80035e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	2208      	movs	r2, #8
 80035ea:	409a      	lsls	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	2201      	movs	r2, #1
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d012      	beq.n	8003632 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2201      	movs	r2, #1
 8003620:	409a      	lsls	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	f043 0202 	orr.w	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2204      	movs	r2, #4
 8003638:	409a      	lsls	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d012      	beq.n	8003668 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	2204      	movs	r2, #4
 8003656:	409a      	lsls	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f043 0204 	orr.w	r2, r3, #4
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	2210      	movs	r2, #16
 800366e:	409a      	lsls	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d043      	beq.n	8003700 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d03c      	beq.n	8003700 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368a:	2210      	movs	r2, #16
 800368c:	409a      	lsls	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d024      	beq.n	8003700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
 80036be:	e01f      	b.n	8003700 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
 80036d0:	e016      	b.n	8003700 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0208 	bic.w	r2, r2, #8
 80036ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2220      	movs	r2, #32
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 808f 	beq.w	8003830 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8087 	beq.w	8003830 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	2220      	movs	r2, #32
 8003728:	409a      	lsls	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b05      	cmp	r3, #5
 8003738:	d136      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0216 	bic.w	r2, r2, #22
 8003748:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003758:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <HAL_DMA_IRQHandler+0x1da>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0208 	bic.w	r2, r2, #8
 8003778:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	223f      	movs	r2, #63	; 0x3f
 8003780:	409a      	lsls	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379a:	2b00      	cmp	r3, #0
 800379c:	d07e      	beq.n	800389c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
        }
        return;
 80037a6:	e079      	b.n	800389c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01d      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10d      	bne.n	80037e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d031      	beq.n	8003830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
 80037d4:	e02c      	b.n	8003830 <HAL_DMA_IRQHandler+0x2a0>
 80037d6:	bf00      	nop
 80037d8:	20000248 	.word	0x20000248
 80037dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d023      	beq.n	8003830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
 80037f0:	e01e      	b.n	8003830 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10f      	bne.n	8003820 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0210 	bic.w	r2, r2, #16
 800380e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	2b00      	cmp	r3, #0
 8003836:	d032      	beq.n	800389e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d022      	beq.n	800388a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2205      	movs	r2, #5
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3301      	adds	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	d307      	bcc.n	8003878 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f2      	bne.n	800385c <HAL_DMA_IRQHandler+0x2cc>
 8003876:	e000      	b.n	800387a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003878:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	e000      	b.n	800389e <HAL_DMA_IRQHandler+0x30e>
        return;
 800389c:	bf00      	nop
    }
  }
}
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d108      	bne.n	80038fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038fa:	e007      	b.n	800390c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3b10      	subs	r3, #16
 8003928:	4a14      	ldr	r2, [pc, #80]	; (800397c <DMA_CalcBaseAndBitshift+0x64>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003932:	4a13      	ldr	r2, [pc, #76]	; (8003980 <DMA_CalcBaseAndBitshift+0x68>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d909      	bls.n	800395a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	1d1a      	adds	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	659a      	str	r2, [r3, #88]	; 0x58
 8003958:	e007      	b.n	800396a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	aaaaaaab 	.word	0xaaaaaaab
 8003980:	0800822c 	.word	0x0800822c

08003984 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11f      	bne.n	80039de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d856      	bhi.n	8003a52 <DMA_CheckFifoParam+0xce>
 80039a4:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <DMA_CheckFifoParam+0x28>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039cf 	.word	0x080039cf
 80039b4:	080039bd 	.word	0x080039bd
 80039b8:	08003a53 	.word	0x08003a53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d046      	beq.n	8003a56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039cc:	e043      	b.n	8003a56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039d6:	d140      	bne.n	8003a5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039dc:	e03d      	b.n	8003a5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e6:	d121      	bne.n	8003a2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d837      	bhi.n	8003a5e <DMA_CheckFifoParam+0xda>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <DMA_CheckFifoParam+0x70>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a0b 	.word	0x08003a0b
 80039fc:	08003a05 	.word	0x08003a05
 8003a00:	08003a1d 	.word	0x08003a1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e030      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d025      	beq.n	8003a62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1a:	e022      	b.n	8003a62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a24:	d11f      	bne.n	8003a66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a2a:	e01c      	b.n	8003a66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d903      	bls.n	8003a3a <DMA_CheckFifoParam+0xb6>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d003      	beq.n	8003a40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a38:	e018      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3e:	e015      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e00b      	b.n	8003a6a <DMA_CheckFifoParam+0xe6>
      break;
 8003a52:	bf00      	nop
 8003a54:	e00a      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a56:	bf00      	nop
 8003a58:	e008      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e006      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e004      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <DMA_CheckFifoParam+0xe8>
      break;
 8003a6a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop

08003a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	; 0x24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	e159      	b.n	8003d4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	f040 8148 	bne.w	8003d46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d005      	beq.n	8003ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d130      	bne.n	8003b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	2203      	movs	r2, #3
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b04:	2201      	movs	r2, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 0201 	and.w	r2, r3, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d017      	beq.n	8003b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d123      	bne.n	8003bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	08da      	lsrs	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3208      	adds	r2, #8
 8003b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	220f      	movs	r2, #15
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	08da      	lsrs	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3208      	adds	r2, #8
 8003bba:	69b9      	ldr	r1, [r7, #24]
 8003bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0203 	and.w	r2, r3, #3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80a2 	beq.w	8003d46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	4b57      	ldr	r3, [pc, #348]	; (8003d64 <HAL_GPIO_Init+0x2e8>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	4a56      	ldr	r2, [pc, #344]	; (8003d64 <HAL_GPIO_Init+0x2e8>)
 8003c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c10:	6453      	str	r3, [r2, #68]	; 0x44
 8003c12:	4b54      	ldr	r3, [pc, #336]	; (8003d64 <HAL_GPIO_Init+0x2e8>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c1e:	4a52      	ldr	r2, [pc, #328]	; (8003d68 <HAL_GPIO_Init+0x2ec>)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	089b      	lsrs	r3, r3, #2
 8003c24:	3302      	adds	r3, #2
 8003c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	220f      	movs	r2, #15
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a49      	ldr	r2, [pc, #292]	; (8003d6c <HAL_GPIO_Init+0x2f0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d019      	beq.n	8003c7e <HAL_GPIO_Init+0x202>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a48      	ldr	r2, [pc, #288]	; (8003d70 <HAL_GPIO_Init+0x2f4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0x1fe>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a47      	ldr	r2, [pc, #284]	; (8003d74 <HAL_GPIO_Init+0x2f8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00d      	beq.n	8003c76 <HAL_GPIO_Init+0x1fa>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <HAL_GPIO_Init+0x2fc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <HAL_GPIO_Init+0x1f6>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a45      	ldr	r2, [pc, #276]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_GPIO_Init+0x1f2>
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	e008      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c6e:	2307      	movs	r3, #7
 8003c70:	e006      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c72:	2303      	movs	r3, #3
 8003c74:	e004      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e002      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_GPIO_Init+0x204>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f002 0203 	and.w	r2, r2, #3
 8003c86:	0092      	lsls	r2, r2, #2
 8003c88:	4093      	lsls	r3, r2
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c90:	4935      	ldr	r1, [pc, #212]	; (8003d68 <HAL_GPIO_Init+0x2ec>)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	3302      	adds	r3, #2
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c9e:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc8:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cec:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <HAL_GPIO_Init+0x304>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b0f      	cmp	r3, #15
 8003d50:	f67f aea2 	bls.w	8003a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	3724      	adds	r7, #36	; 0x24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	40020400 	.word	0x40020400
 8003d74:	40020800 	.word	0x40020800
 8003d78:	40020c00 	.word	0x40020c00
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e001      	b.n	8003da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc4:	787b      	ldrb	r3, [r7, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dd0:	e003      	b.n	8003dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	041a      	lsls	r2, r3, #16
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	619a      	str	r2, [r3, #24]
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e267      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d075      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e06:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d00c      	beq.n	8003e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e12:	4b85      	ldr	r3, [pc, #532]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d112      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1e:	4b82      	ldr	r3, [pc, #520]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	4b7e      	ldr	r3, [pc, #504]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d05b      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x108>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d157      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e242      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCC_OscConfig+0x74>
 8003e4e:	4b76      	ldr	r3, [pc, #472]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a75      	ldr	r2, [pc, #468]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e01d      	b.n	8003e98 <HAL_RCC_OscConfig+0xb0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x98>
 8003e66:	4b70      	ldr	r3, [pc, #448]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6f      	ldr	r2, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4b6d      	ldr	r3, [pc, #436]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a6c      	ldr	r2, [pc, #432]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0xb0>
 8003e80:	4b69      	ldr	r3, [pc, #420]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a68      	ldr	r2, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b66      	ldr	r3, [pc, #408]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a65      	ldr	r2, [pc, #404]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fcbe 	bl	8002820 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fe fcba 	bl	8002820 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e207      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xc0>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fcaa 	bl	8002820 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fe fca6 	bl	8002820 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1f3      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	4b51      	ldr	r3, [pc, #324]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0xe8>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d063      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efe:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d11c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f16:	4b44      	ldr	r3, [pc, #272]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d116      	bne.n	8003f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f22:	4b41      	ldr	r3, [pc, #260]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_RCC_OscConfig+0x152>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e1c7      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4937      	ldr	r1, [pc, #220]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4e:	e03a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f58:	4b34      	ldr	r3, [pc, #208]	; (800402c <HAL_RCC_OscConfig+0x244>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fe fc5f 	bl	8002820 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fe fc5b 	bl	8002820 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e1a8      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f78:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4925      	ldr	r1, [pc, #148]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
 8003f98:	e015      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4b24      	ldr	r3, [pc, #144]	; (800402c <HAL_RCC_OscConfig+0x244>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fc3e 	bl	8002820 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fe fc3a 	bl	8002820 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e187      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d036      	beq.n	8004040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_RCC_OscConfig+0x248>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fe fc1e 	bl	8002820 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe8:	f7fe fc1a 	bl	8002820 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e167      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x200>
 8004006:	e01b      	b.n	8004040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_OscConfig+0x248>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400e:	f7fe fc07 	bl	8002820 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	e00e      	b.n	8004034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004016:	f7fe fc03 	bl	8002820 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d907      	bls.n	8004034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e150      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
 8004028:	40023800 	.word	0x40023800
 800402c:	42470000 	.word	0x42470000
 8004030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ea      	bne.n	8004016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8097 	beq.w	800417c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004052:	4b81      	ldr	r3, [pc, #516]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	4b7d      	ldr	r3, [pc, #500]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	4a7c      	ldr	r2, [pc, #496]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	6413      	str	r3, [r2, #64]	; 0x40
 800406e:	4b7a      	ldr	r3, [pc, #488]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b77      	ldr	r3, [pc, #476]	; (800425c <HAL_RCC_OscConfig+0x474>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d118      	bne.n	80040bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	4b74      	ldr	r3, [pc, #464]	; (800425c <HAL_RCC_OscConfig+0x474>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a73      	ldr	r2, [pc, #460]	; (800425c <HAL_RCC_OscConfig+0x474>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fe fbc3 	bl	8002820 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fe fbbf 	bl	8002820 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e10c      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b6a      	ldr	r3, [pc, #424]	; (800425c <HAL_RCC_OscConfig+0x474>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x2ea>
 80040c4:	4b64      	ldr	r3, [pc, #400]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4a63      	ldr	r2, [pc, #396]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
 80040d0:	e01c      	b.n	800410c <HAL_RCC_OscConfig+0x324>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x30c>
 80040da:	4b5f      	ldr	r3, [pc, #380]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a5e      	ldr	r2, [pc, #376]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	4b5c      	ldr	r3, [pc, #368]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a5b      	ldr	r2, [pc, #364]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0x324>
 80040f4:	4b58      	ldr	r3, [pc, #352]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a57      	ldr	r2, [pc, #348]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004100:	4b55      	ldr	r3, [pc, #340]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	4a54      	ldr	r2, [pc, #336]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004106:	f023 0304 	bic.w	r3, r3, #4
 800410a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fe fb84 	bl	8002820 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fe fb80 	bl	8002820 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0cb      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	4b49      	ldr	r3, [pc, #292]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ee      	beq.n	800411c <HAL_RCC_OscConfig+0x334>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004140:	f7fe fb6e 	bl	8002820 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fe fb6a 	bl	8002820 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0b5      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415e:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ee      	bne.n	8004148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d105      	bne.n	800417c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004170:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	4a38      	ldr	r2, [pc, #224]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80a1 	beq.w	80042c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b08      	cmp	r3, #8
 8004190:	d05c      	beq.n	800424c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d141      	bne.n	800421e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b31      	ldr	r3, [pc, #196]	; (8004260 <HAL_RCC_OscConfig+0x478>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fe fb3e 	bl	8002820 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fe fb3a 	bl	8002820 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e087      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	3b01      	subs	r3, #1
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	491b      	ldr	r1, [pc, #108]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_RCC_OscConfig+0x478>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fe fb13 	bl	8002820 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fe fb0f 	bl	8002820 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e05c      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x416>
 800421c:	e054      	b.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCC_OscConfig+0x478>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe fafc 	bl	8002820 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422c:	f7fe faf8 	bl	8002820 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e045      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x444>
 800424a:	e03d      	b.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d107      	bne.n	8004264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e038      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
 8004258:	40023800 	.word	0x40023800
 800425c:	40007000 	.word	0x40007000
 8004260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x4ec>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d028      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d121      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d11a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800429a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800429c:	4293      	cmp	r3, r2
 800429e:	d111      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	3b01      	subs	r3, #1
 80042ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0cc      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ec:	4b68      	ldr	r3, [pc, #416]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d90c      	bls.n	8004314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b65      	ldr	r3, [pc, #404]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0b8      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d020      	beq.n	8004362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800432c:	4b59      	ldr	r3, [pc, #356]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a58      	ldr	r2, [pc, #352]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004344:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800434e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b50      	ldr	r3, [pc, #320]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	494d      	ldr	r1, [pc, #308]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d044      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d119      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e07f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d003      	beq.n	8004396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e06f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e067      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b37      	ldr	r3, [pc, #220]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4934      	ldr	r1, [pc, #208]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c8:	f7fe fa2a 	bl	8002820 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fe fa26 	bl	8002820 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e04f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 020c 	and.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d1eb      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d20c      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e032      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4916      	ldr	r1, [pc, #88]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	490e      	ldr	r1, [pc, #56]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800445e:	f000 f821 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8004462:	4602      	mov	r2, r0
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	490a      	ldr	r1, [pc, #40]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	5ccb      	ldrb	r3, [r1, r3]
 8004472:	fa22 f303 	lsr.w	r3, r2, r3
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_ClockConfig+0x1c8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe f98a 	bl	8002798 <HAL_InitTick>

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023c00 	.word	0x40023c00
 8004494:	40023800 	.word	0x40023800
 8004498:	08007a10 	.word	0x08007a10
 800449c:	20000248 	.word	0x20000248
 80044a0:	2000024c 	.word	0x2000024c

080044a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b094      	sub	sp, #80	; 0x50
 80044aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
 80044b0:	2300      	movs	r3, #0
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	2300      	movs	r3, #0
 80044b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044bc:	4b79      	ldr	r3, [pc, #484]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d00d      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x40>
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	f200 80e1 	bhi.w	8004690 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x34>
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d003      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x3a>
 80044d6:	e0db      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b73      	ldr	r3, [pc, #460]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044dc:	e0db      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044de:	4b73      	ldr	r3, [pc, #460]	; (80046ac <HAL_RCC_GetSysClockFreq+0x208>)
 80044e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044e2:	e0d8      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e4:	4b6f      	ldr	r3, [pc, #444]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ee:	4b6d      	ldr	r3, [pc, #436]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d063      	beq.n	80045c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fa:	4b6a      	ldr	r3, [pc, #424]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	2200      	movs	r2, #0
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38
 8004504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
 8004512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004516:	4622      	mov	r2, r4
 8004518:	462b      	mov	r3, r5
 800451a:	f04f 0000 	mov.w	r0, #0
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	0159      	lsls	r1, r3, #5
 8004524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004528:	0150      	lsls	r0, r2, #5
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4621      	mov	r1, r4
 8004530:	1a51      	subs	r1, r2, r1
 8004532:	6139      	str	r1, [r7, #16]
 8004534:	4629      	mov	r1, r5
 8004536:	eb63 0301 	sbc.w	r3, r3, r1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004548:	4659      	mov	r1, fp
 800454a:	018b      	lsls	r3, r1, #6
 800454c:	4651      	mov	r1, sl
 800454e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004552:	4651      	mov	r1, sl
 8004554:	018a      	lsls	r2, r1, #6
 8004556:	4651      	mov	r1, sl
 8004558:	ebb2 0801 	subs.w	r8, r2, r1
 800455c:	4659      	mov	r1, fp
 800455e:	eb63 0901 	sbc.w	r9, r3, r1
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800456e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004576:	4690      	mov	r8, r2
 8004578:	4699      	mov	r9, r3
 800457a:	4623      	mov	r3, r4
 800457c:	eb18 0303 	adds.w	r3, r8, r3
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	462b      	mov	r3, r5
 8004584:	eb49 0303 	adc.w	r3, r9, r3
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004596:	4629      	mov	r1, r5
 8004598:	024b      	lsls	r3, r1, #9
 800459a:	4621      	mov	r1, r4
 800459c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045a0:	4621      	mov	r1, r4
 80045a2:	024a      	lsls	r2, r1, #9
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045aa:	2200      	movs	r2, #0
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045b4:	f7fc fab6 	bl	8000b24 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4613      	mov	r3, r2
 80045be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c0:	e058      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c2:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	2200      	movs	r2, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	4611      	mov	r1, r2
 80045ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	2300      	movs	r3, #0
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
 80045d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	f04f 0000 	mov.w	r0, #0
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	0159      	lsls	r1, r3, #5
 80045ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ee:	0150      	lsls	r0, r2, #5
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4641      	mov	r1, r8
 80045f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80045fa:	4649      	mov	r1, r9
 80045fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800460c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004610:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004614:	ebb2 040a 	subs.w	r4, r2, sl
 8004618:	eb63 050b 	sbc.w	r5, r3, fp
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	00eb      	lsls	r3, r5, #3
 8004626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800462a:	00e2      	lsls	r2, r4, #3
 800462c:	4614      	mov	r4, r2
 800462e:	461d      	mov	r5, r3
 8004630:	4643      	mov	r3, r8
 8004632:	18e3      	adds	r3, r4, r3
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	464b      	mov	r3, r9
 8004638:	eb45 0303 	adc.w	r3, r5, r3
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800464a:	4629      	mov	r1, r5
 800464c:	028b      	lsls	r3, r1, #10
 800464e:	4621      	mov	r1, r4
 8004650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004654:	4621      	mov	r1, r4
 8004656:	028a      	lsls	r2, r1, #10
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465e:	2200      	movs	r2, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	61fa      	str	r2, [r7, #28]
 8004664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004668:	f7fc fa5c 	bl	8000b24 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4613      	mov	r3, r2
 8004672:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	3301      	adds	r3, #1
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800468e:	e002      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004692:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004698:	4618      	mov	r0, r3
 800469a:	3750      	adds	r7, #80	; 0x50
 800469c:	46bd      	mov	sp, r7
 800469e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800
 80046a8:	00f42400 	.word	0x00f42400
 80046ac:	007a1200 	.word	0x007a1200

080046b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000248 	.word	0x20000248

080046c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046cc:	f7ff fff0 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0a9b      	lsrs	r3, r3, #10
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	; (80046ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	08007a20 	.word	0x08007a20

080046f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046f4:	f7ff ffdc 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0b5b      	lsrs	r3, r3, #13
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4903      	ldr	r1, [pc, #12]	; (8004714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40023800 	.word	0x40023800
 8004714:	08007a20 	.word	0x08007a20

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e04c      	b.n	80047c4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d111      	bne.n	800475a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f001 fad4 	bl	8005cec <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_TIM_Base_Init+0xb4>)
 8004750:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f000 fff1 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	080021cd 	.word	0x080021cd

080047d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d001      	beq.n	80047e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e03c      	b.n	8004862 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <HAL_TIM_Base_Start+0xa0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d018      	beq.n	800482c <HAL_TIM_Base_Start+0x5c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004802:	d013      	beq.n	800482c <HAL_TIM_Base_Start+0x5c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <HAL_TIM_Base_Start+0xa4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_TIM_Base_Start+0x5c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_TIM_Base_Start+0xa8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_TIM_Base_Start+0x5c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a17      	ldr	r2, [pc, #92]	; (800487c <HAL_TIM_Base_Start+0xac>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_TIM_Base_Start+0x5c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a16      	ldr	r2, [pc, #88]	; (8004880 <HAL_TIM_Base_Start+0xb0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d111      	bne.n	8004850 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b06      	cmp	r3, #6
 800483c:	d010      	beq.n	8004860 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0201 	orr.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484e:	e007      	b.n	8004860 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40010000 	.word	0x40010000
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40014000 	.word	0x40014000

08004884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d001      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e044      	b.n	8004926 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_TIM_Base_Start_IT+0xb0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d013      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_TIM_Base_Start_IT+0xb4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_TIM_Base_Start_IT+0xb8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_TIM_Base_Start_IT+0xbc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x6c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <HAL_TIM_Base_Start_IT+0xc0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d111      	bne.n	8004914 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d010      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	e007      	b.n	8004924 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40010000 	.word	0x40010000
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40014000 	.word	0x40014000

08004948 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e04c      	b.n	80049f4 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d111      	bne.n	800498a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 f9bc 	bl	8005cec <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <HAL_TIM_OC_Init+0xb4>)
 8004980:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f000 fed9 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	08004a01 	.word	0x08004a01

08004a00 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e04c      	b.n	8004ac0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d111      	bne.n	8004a56 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f001 f956 	bl	8005cec <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <HAL_TIM_PWM_Init+0xb4>)
 8004a4c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f000 fe73 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	08004acd 	.word	0x08004acd

08004acc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_TIM_PWM_Start+0x24>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e022      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d109      	bne.n	8004b1e <HAL_TIM_PWM_Start+0x3e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	bf14      	ite	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	2300      	moveq	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e015      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d109      	bne.n	8004b38 <HAL_TIM_PWM_Start+0x58>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e008      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e068      	b.n	8004c24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start+0x82>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b60:	e013      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start+0x92>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b70:	e00b      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_PWM_Start+0xa2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b80:	e003      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 f884 	bl	8005ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <HAL_TIM_PWM_Start+0x14c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <HAL_TIM_PWM_Start+0x14c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d013      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a19      	ldr	r2, [pc, #100]	; (8004c30 <HAL_TIM_PWM_Start+0x150>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <HAL_TIM_PWM_Start+0x154>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <HAL_TIM_PWM_Start+0x158>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <HAL_TIM_PWM_Start+0x15c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d111      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d010      	beq.n	8004c22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c10:	e007      	b.n	8004c22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40014000 	.word	0x40014000

08004c40 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e04c      	b.n	8004cee <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d111      	bne.n	8004c84 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f001 f83f 	bl	8005cec <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d102      	bne.n	8004c7c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <HAL_TIM_OnePulse_Init+0xb8>)
 8004c7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f000 fd5c 	bl	8005754 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0208 	bic.w	r2, r2, #8
 8004caa:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	08004cfd 	.word	0x08004cfd

08004cfc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d38:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d108      	bne.n	8004d52 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d40:	7bbb      	ldrb	r3, [r7, #14]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	7b7b      	ldrb	r3, [r7, #13]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d102      	bne.n	8004d52 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d4c:	7b3b      	ldrb	r3, [r7, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e03b      	b.n	8004dce <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0202 	orr.w	r2, r2, #2
 8004d84:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0204 	orr.w	r2, r2, #4
 8004d94:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 ff7e 	bl	8005ca0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2201      	movs	r2, #1
 8004daa:	2104      	movs	r1, #4
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 ff77 	bl	8005ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40010000 	.word	0x40010000

08004ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d128      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d121      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0202 	mvn.w	r2, #2
 8004e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
 8004e28:	e009      	b.n	8004e3e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d128      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d121      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0204 	mvn.w	r2, #4
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
 8004e88:	e009      	b.n	8004e9e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d128      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d121      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0208 	mvn.w	r2, #8
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
 8004ee8:	e009      	b.n	8004efe <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d128      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d121      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4798      	blx	r3
 8004f48:	e009      	b.n	8004f5e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d110      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d109      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0201 	mvn.w	r2, #1
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b80      	cmp	r3, #128	; 0x80
 8004fa0:	d110      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d109      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d110      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d109      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d110      	bne.n	8005024 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b20      	cmp	r3, #32
 800500e:	d109      	bne.n	8005024 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0220 	mvn.w	r2, #32
 8005018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005046:	2302      	movs	r3, #2
 8005048:	e048      	b.n	80050dc <HAL_TIM_OC_ConfigChannel+0xb0>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d839      	bhi.n	80050cc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <HAL_TIM_OC_ConfigChannel+0x34>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005095 	.word	0x08005095
 8005064:	080050cd 	.word	0x080050cd
 8005068:	080050cd 	.word	0x080050cd
 800506c:	080050cd 	.word	0x080050cd
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050cd 	.word	0x080050cd
 8005078:	080050cd 	.word	0x080050cd
 800507c:	080050cd 	.word	0x080050cd
 8005080:	080050b1 	.word	0x080050b1
 8005084:	080050cd 	.word	0x080050cd
 8005088:	080050cd 	.word	0x080050cd
 800508c:	080050cd 	.word	0x080050cd
 8005090:	080050bf 	.word	0x080050bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fbda 	bl	8005854 <TIM_OC1_SetConfig>
      break;
 80050a0:	e017      	b.n	80050d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fc39 	bl	8005920 <TIM_OC2_SetConfig>
      break;
 80050ae:	e010      	b.n	80050d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fc9e 	bl	80059f8 <TIM_OC3_SetConfig>
      break;
 80050bc:	e009      	b.n	80050d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fd01 	bl	8005acc <TIM_OC4_SetConfig>
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	75fb      	strb	r3, [r7, #23]
      break;
 80050d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050fe:	2302      	movs	r3, #2
 8005100:	e0ae      	b.n	8005260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	f200 809f 	bhi.w	8005250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005112:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	0800514d 	.word	0x0800514d
 800511c:	08005251 	.word	0x08005251
 8005120:	08005251 	.word	0x08005251
 8005124:	08005251 	.word	0x08005251
 8005128:	0800518d 	.word	0x0800518d
 800512c:	08005251 	.word	0x08005251
 8005130:	08005251 	.word	0x08005251
 8005134:	08005251 	.word	0x08005251
 8005138:	080051cf 	.word	0x080051cf
 800513c:	08005251 	.word	0x08005251
 8005140:	08005251 	.word	0x08005251
 8005144:	08005251 	.word	0x08005251
 8005148:	0800520f 	.word	0x0800520f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fb7e 	bl	8005854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0208 	orr.w	r2, r2, #8
 8005166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0204 	bic.w	r2, r2, #4
 8005176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6999      	ldr	r1, [r3, #24]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	619a      	str	r2, [r3, #24]
      break;
 800518a:	e064      	b.n	8005256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fbc4 	bl	8005920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	021a      	lsls	r2, r3, #8
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	619a      	str	r2, [r3, #24]
      break;
 80051cc:	e043      	b.n	8005256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fc0f 	bl	80059f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0208 	orr.w	r2, r2, #8
 80051e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0204 	bic.w	r2, r2, #4
 80051f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69d9      	ldr	r1, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	61da      	str	r2, [r3, #28]
      break;
 800520c:	e023      	b.n	8005256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fc59 	bl	8005acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69d9      	ldr	r1, [r3, #28]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	021a      	lsls	r2, r3, #8
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	61da      	str	r2, [r3, #28]
      break;
 800524e:	e002      	b.n	8005256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	75fb      	strb	r3, [r7, #23]
      break;
 8005254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800525e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_TIM_ConfigClockSource+0x1c>
 8005280:	2302      	movs	r3, #2
 8005282:	e0b4      	b.n	80053ee <HAL_TIM_ConfigClockSource+0x186>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052bc:	d03e      	beq.n	800533c <HAL_TIM_ConfigClockSource+0xd4>
 80052be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c2:	f200 8087 	bhi.w	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ca:	f000 8086 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x172>
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d2:	d87f      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052d4:	2b70      	cmp	r3, #112	; 0x70
 80052d6:	d01a      	beq.n	800530e <HAL_TIM_ConfigClockSource+0xa6>
 80052d8:	2b70      	cmp	r3, #112	; 0x70
 80052da:	d87b      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052dc:	2b60      	cmp	r3, #96	; 0x60
 80052de:	d050      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x11a>
 80052e0:	2b60      	cmp	r3, #96	; 0x60
 80052e2:	d877      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052e4:	2b50      	cmp	r3, #80	; 0x50
 80052e6:	d03c      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0xfa>
 80052e8:	2b50      	cmp	r3, #80	; 0x50
 80052ea:	d873      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d058      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x13a>
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d86f      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052f4:	2b30      	cmp	r3, #48	; 0x30
 80052f6:	d064      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x15a>
 80052f8:	2b30      	cmp	r3, #48	; 0x30
 80052fa:	d86b      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d060      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005300:	2b20      	cmp	r3, #32
 8005302:	d867      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d05c      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005308:	2b10      	cmp	r3, #16
 800530a:	d05a      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x15a>
 800530c:	e062      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6899      	ldr	r1, [r3, #8]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f000 fc9f 	bl	8005c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	609a      	str	r2, [r3, #8]
      break;
 800533a:	e04f      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	6899      	ldr	r1, [r3, #8]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f000 fc88 	bl	8005c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800535e:	609a      	str	r2, [r3, #8]
      break;
 8005360:	e03c      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	461a      	mov	r2, r3
 8005370:	f000 fbfc 	bl	8005b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2150      	movs	r1, #80	; 0x50
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fc55 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 8005380:	e02c      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	461a      	mov	r2, r3
 8005390:	f000 fc1b 	bl	8005bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2160      	movs	r1, #96	; 0x60
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc45 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80053a0:	e01c      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f000 fbdc 	bl	8005b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2140      	movs	r1, #64	; 0x40
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fc35 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80053c0:	e00c      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f000 fc2c 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80053d2:	e003      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	e000      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	460b      	mov	r3, r1
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e135      	b.n	8005748 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_RegisterCallback+0x2a>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e12e      	b.n	8005748 <HAL_TIM_RegisterCallback+0x288>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	f040 80ba 	bne.w	8005674 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8005500:	7afb      	ldrb	r3, [r7, #11]
 8005502:	2b1a      	cmp	r3, #26
 8005504:	f200 80b3 	bhi.w	800566e <HAL_TIM_RegisterCallback+0x1ae>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <HAL_TIM_RegisterCallback+0x50>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	0800557d 	.word	0x0800557d
 8005514:	08005585 	.word	0x08005585
 8005518:	0800558d 	.word	0x0800558d
 800551c:	08005595 	.word	0x08005595
 8005520:	0800559d 	.word	0x0800559d
 8005524:	080055a5 	.word	0x080055a5
 8005528:	080055ad 	.word	0x080055ad
 800552c:	080055b5 	.word	0x080055b5
 8005530:	080055bd 	.word	0x080055bd
 8005534:	080055c5 	.word	0x080055c5
 8005538:	080055cd 	.word	0x080055cd
 800553c:	080055d5 	.word	0x080055d5
 8005540:	080055dd 	.word	0x080055dd
 8005544:	080055e5 	.word	0x080055e5
 8005548:	080055ed 	.word	0x080055ed
 800554c:	080055f7 	.word	0x080055f7
 8005550:	08005601 	.word	0x08005601
 8005554:	0800560b 	.word	0x0800560b
 8005558:	08005615 	.word	0x08005615
 800555c:	0800561f 	.word	0x0800561f
 8005560:	08005629 	.word	0x08005629
 8005564:	08005633 	.word	0x08005633
 8005568:	0800563d 	.word	0x0800563d
 800556c:	08005647 	.word	0x08005647
 8005570:	08005651 	.word	0x08005651
 8005574:	0800565b 	.word	0x0800565b
 8005578:	08005665 	.word	0x08005665
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005582:	e0dc      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800558a:	e0d8      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005592:	e0d4      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800559a:	e0d0      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80055a2:	e0cc      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80055aa:	e0c8      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80055b2:	e0c4      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80055ba:	e0c0      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80055c2:	e0bc      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80055ca:	e0b8      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80055d2:	e0b4      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80055da:	e0b0      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80055e2:	e0ac      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80055ea:	e0a8      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80055f4:	e0a3      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80055fe:	e09e      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005608:	e099      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8005612:	e094      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800561c:	e08f      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8005626:	e08a      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8005630:	e085      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800563a:	e080      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8005644:	e07b      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800564e:	e076      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8005658:	e071      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8005662:	e06c      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800566c:	e067      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
        break;
 8005672:	e064      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d15c      	bne.n	800573a <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8005680:	7afb      	ldrb	r3, [r7, #11]
 8005682:	2b0d      	cmp	r3, #13
 8005684:	d856      	bhi.n	8005734 <HAL_TIM_RegisterCallback+0x274>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <HAL_TIM_RegisterCallback+0x1cc>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056c5 	.word	0x080056c5
 8005690:	080056cd 	.word	0x080056cd
 8005694:	080056d5 	.word	0x080056d5
 8005698:	080056dd 	.word	0x080056dd
 800569c:	080056e5 	.word	0x080056e5
 80056a0:	080056ed 	.word	0x080056ed
 80056a4:	080056f5 	.word	0x080056f5
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	08005705 	.word	0x08005705
 80056b0:	0800570d 	.word	0x0800570d
 80056b4:	08005715 	.word	0x08005715
 80056b8:	0800571d 	.word	0x0800571d
 80056bc:	08005725 	.word	0x08005725
 80056c0:	0800572d 	.word	0x0800572d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80056ca:	e038      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80056d2:	e034      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80056da:	e030      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80056e2:	e02c      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80056ea:	e028      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80056f2:	e024      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80056fa:	e020      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8005702:	e01c      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800570a:	e018      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005712:	e014      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800571a:	e010      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8005722:	e00c      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800572a:	e008      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8005732:	e004      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	75fb      	strb	r3, [r7, #23]
        break;
 8005738:	e001      	b.n	800573e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005746:	7dfb      	ldrb	r3, [r7, #23]
}
 8005748:	4618      	mov	r0, r3
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a34      	ldr	r2, [pc, #208]	; (8005838 <TIM_Base_SetConfig+0xe4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d00b      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a31      	ldr	r2, [pc, #196]	; (800583c <TIM_Base_SetConfig+0xe8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a30      	ldr	r2, [pc, #192]	; (8005840 <TIM_Base_SetConfig+0xec>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_Base_SetConfig+0x38>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <TIM_Base_SetConfig+0xf0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a25      	ldr	r2, [pc, #148]	; (8005838 <TIM_Base_SetConfig+0xe4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01b      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d017      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a22      	ldr	r2, [pc, #136]	; (800583c <TIM_Base_SetConfig+0xe8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a21      	ldr	r2, [pc, #132]	; (8005840 <TIM_Base_SetConfig+0xec>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00f      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a20      	ldr	r2, [pc, #128]	; (8005844 <TIM_Base_SetConfig+0xf0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00b      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <TIM_Base_SetConfig+0xf4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1e      	ldr	r2, [pc, #120]	; (800584c <TIM_Base_SetConfig+0xf8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_Base_SetConfig+0x8a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1d      	ldr	r2, [pc, #116]	; (8005850 <TIM_Base_SetConfig+0xfc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a08      	ldr	r2, [pc, #32]	; (8005838 <TIM_Base_SetConfig+0xe4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d103      	bne.n	8005824 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	615a      	str	r2, [r3, #20]
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40010000 	.word	0x40010000
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800

08005854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0201 	bic.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 0302 	bic.w	r3, r3, #2
 800589c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <TIM_OC1_SetConfig+0xc8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10c      	bne.n	80058ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0308 	bic.w	r3, r3, #8
 80058b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f023 0304 	bic.w	r3, r3, #4
 80058c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a13      	ldr	r2, [pc, #76]	; (800591c <TIM_OC1_SetConfig+0xc8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d111      	bne.n	80058f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40010000 	.word	0x40010000

08005920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f023 0210 	bic.w	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0320 	bic.w	r3, r3, #32
 800596a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <TIM_OC2_SetConfig+0xd4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d10d      	bne.n	800599c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <TIM_OC2_SetConfig+0xd4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d113      	bne.n	80059cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40010000 	.word	0x40010000

080059f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <TIM_OC3_SetConfig+0xd0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10d      	bne.n	8005a72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <TIM_OC3_SetConfig+0xd0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d113      	bne.n	8005aa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	621a      	str	r2, [r3, #32]
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	40010000 	.word	0x40010000

08005acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a10      	ldr	r2, [pc, #64]	; (8005b68 <TIM_OC4_SetConfig+0x9c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	019b      	lsls	r3, r3, #6
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40010000 	.word	0x40010000

08005b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0201 	bic.w	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 030a 	bic.w	r3, r3, #10
 8005ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b087      	sub	sp, #28
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0210 	bic.w	r2, r3, #16
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	031b      	lsls	r3, r3, #12
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f043 0307 	orr.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1a      	ldr	r2, [r3, #32]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <TIM_ResetCallback+0x7c>)
 8005cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <TIM_ResetCallback+0x80>)
 8005d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <TIM_ResetCallback+0x84>)
 8005d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <TIM_ResetCallback+0x88>)
 8005d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <TIM_ResetCallback+0x8c>)
 8005d18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a17      	ldr	r2, [pc, #92]	; (8005d7c <TIM_ResetCallback+0x90>)
 8005d20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <TIM_ResetCallback+0x94>)
 8005d28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <TIM_ResetCallback+0x98>)
 8005d30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <TIM_ResetCallback+0x9c>)
 8005d38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a13      	ldr	r2, [pc, #76]	; (8005d8c <TIM_ResetCallback+0xa0>)
 8005d40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <TIM_ResetCallback+0xa4>)
 8005d48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <TIM_ResetCallback+0xa8>)
 8005d50:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a10      	ldr	r2, [pc, #64]	; (8005d98 <TIM_ResetCallback+0xac>)
 8005d58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	080053f7 	.word	0x080053f7
 8005d6c:	0800540b 	.word	0x0800540b
 8005d70:	08005483 	.word	0x08005483
 8005d74:	08005497 	.word	0x08005497
 8005d78:	08005433 	.word	0x08005433
 8005d7c:	08005447 	.word	0x08005447
 8005d80:	0800541f 	.word	0x0800541f
 8005d84:	0800545b 	.word	0x0800545b
 8005d88:	0800546f 	.word	0x0800546f
 8005d8c:	080054ab 	.word	0x080054ab
 8005d90:	08005f1d 	.word	0x08005f1d
 8005d94:	08005f31 	.word	0x08005f31
 8005d98:	08005f45 	.word	0x08005f45

08005d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e050      	b.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e00:	d013      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10c      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40014000 	.word	0x40014000

08005e78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e03d      	b.n	8005f10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e04a      	b.n	8006000 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d111      	bne.n	8005f9a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fd2c 	bl	80069dc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <HAL_UART_Init+0xb0>)
 8005f90:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2224      	movs	r2, #36	; 0x24
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fff6 	bl	8006fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	08002309 	.word	0x08002309

0800600c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	460b      	mov	r3, r1
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d107      	bne.n	8006034 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e08c      	b.n	800614e <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_UART_RegisterCallback+0x36>
 800603e:	2302      	movs	r3, #2
 8006040:	e085      	b.n	800614e <HAL_UART_RegisterCallback+0x142>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b20      	cmp	r3, #32
 8006054:	d151      	bne.n	80060fa <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	2b0c      	cmp	r3, #12
 800605a:	d845      	bhi.n	80060e8 <HAL_UART_RegisterCallback+0xdc>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <HAL_UART_RegisterCallback+0x58>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006099 	.word	0x08006099
 8006068:	080060a1 	.word	0x080060a1
 800606c:	080060a9 	.word	0x080060a9
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060b9 	.word	0x080060b9
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060c9 	.word	0x080060c9
 8006080:	080060d1 	.word	0x080060d1
 8006084:	080060e9 	.word	0x080060e9
 8006088:	080060e9 	.word	0x080060e9
 800608c:	080060e9 	.word	0x080060e9
 8006090:	080060d9 	.word	0x080060d9
 8006094:	080060e1 	.word	0x080060e1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800609e:	e051      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80060a6:	e04d      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80060ae:	e049      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80060b6:	e045      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80060be:	e041      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80060c6:	e03d      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80060ce:	e039      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80060d6:	e035      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80060de:	e031      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80060e6:	e02d      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	f043 0220 	orr.w	r2, r3, #32
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
        break;
 80060f8:	e024      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d116      	bne.n	8006134 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	2b0b      	cmp	r3, #11
 800610a:	d002      	beq.n	8006112 <HAL_UART_RegisterCallback+0x106>
 800610c:	2b0c      	cmp	r3, #12
 800610e:	d004      	beq.n	800611a <HAL_UART_RegisterCallback+0x10e>
 8006110:	e007      	b.n	8006122 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006118:	e014      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006120:	e010      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	f043 0220 	orr.w	r2, r3, #32
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	75fb      	strb	r3, [r7, #23]
        break;
 8006132:	e007      	b.n	8006144 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
}
 800614e:	4618      	mov	r0, r3
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop

0800615c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b20      	cmp	r3, #32
 8006174:	d11d      	bne.n	80061b2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_UART_Receive_IT+0x26>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e016      	b.n	80061b4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_UART_Receive_IT+0x38>
 8006190:	2302      	movs	r3, #2
 8006192:	e00f      	b.n	80061b4 <HAL_UART_Receive_IT+0x58>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	461a      	mov	r2, r3
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fcf7 	bl	8006b9c <UART_Start_Receive_IT>
 80061ae:	4603      	mov	r3, r0
 80061b0:	e000      	b.n	80061b4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08c      	sub	sp, #48	; 0x30
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d165      	bne.n	80062a2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_UART_Transmit_DMA+0x26>
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e05e      	b.n	80062a4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_UART_Transmit_DMA+0x38>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e057      	b.n	80062a4 <HAL_UART_Transmit_DMA+0xe8>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	88fa      	ldrh	r2, [r7, #6]
 800620c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2221      	movs	r2, #33	; 0x21
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006220:	4a22      	ldr	r2, [pc, #136]	; (80062ac <HAL_UART_Transmit_DMA+0xf0>)
 8006222:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <HAL_UART_Transmit_DMA+0xf4>)
 800622a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006230:	4a20      	ldr	r2, [pc, #128]	; (80062b4 <HAL_UART_Transmit_DMA+0xf8>)
 8006232:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	2200      	movs	r2, #0
 800623a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800623c:	f107 0308 	add.w	r3, r7, #8
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	6819      	ldr	r1, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3304      	adds	r3, #4
 8006250:	461a      	mov	r2, r3
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	f7fd f8b2 	bl	80033bc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006260:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3314      	adds	r3, #20
 8006270:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	617b      	str	r3, [r7, #20]
   return(result);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800628a:	627a      	str	r2, [r7, #36]	; 0x24
 800628c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6a39      	ldr	r1, [r7, #32]
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	61fb      	str	r3, [r7, #28]
   return(result);
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e5      	bne.n	800626a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3730      	adds	r7, #48	; 0x30
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	08006a4d 	.word	0x08006a4d
 80062b0:	08006ae9 	.word	0x08006ae9
 80062b4:	08006b07 	.word	0x08006b07

080062b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b09a      	sub	sp, #104	; 0x68
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80062d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062d6:	667b      	str	r3, [r7, #100]	; 0x64
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	330c      	adds	r3, #12
 80062de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80062e0:	657a      	str	r2, [r7, #84]	; 0x54
 80062e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e5      	bne.n	80062c0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3314      	adds	r3, #20
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	663b      	str	r3, [r7, #96]	; 0x60
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3314      	adds	r3, #20
 8006312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006314:	643a      	str	r2, [r7, #64]	; 0x40
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800631a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e5      	bne.n	80062f4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632c:	2b01      	cmp	r3, #1
 800632e:	d119      	bne.n	8006364 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	330c      	adds	r3, #12
 8006336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f023 0310 	bic.w	r3, r3, #16
 8006346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e5      	bne.n	8006330 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d136      	bne.n	80063e0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3314      	adds	r3, #20
 8006378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	60bb      	str	r3, [r7, #8]
   return(result);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006388:	65bb      	str	r3, [r7, #88]	; 0x58
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006392:	61ba      	str	r2, [r7, #24]
 8006394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6979      	ldr	r1, [r7, #20]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	613b      	str	r3, [r7, #16]
   return(result);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d018      	beq.n	80063e0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	2200      	movs	r2, #0
 80063b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd f856 	bl	800346c <HAL_DMA_Abort>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fd fa6a 	bl	80038a4 <HAL_DMA_GetError>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d104      	bne.n	80063e0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2210      	movs	r2, #16
 80063da:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e00a      	b.n	80063f6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3768      	adds	r7, #104	; 0x68
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b0ba      	sub	sp, #232	; 0xe8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006426:	2300      	movs	r3, #0
 8006428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800642c:	2300      	movs	r3, #0
 800642e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800643e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <HAL_UART_IRQHandler+0x66>
 8006452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fce3 	bl	8006e2a <UART_Receive_IT>
      return;
 8006464:	e25b      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80e1 	beq.w	8006632 <HAL_UART_IRQHandler+0x232>
 8006470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800647c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006480:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80d4 	beq.w	8006632 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <HAL_UART_IRQHandler+0xae>
 8006496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f043 0201 	orr.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00b      	beq.n	80064d2 <HAL_UART_IRQHandler+0xd2>
 80064ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f043 0202 	orr.w	r2, r3, #2
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <HAL_UART_IRQHandler+0xf6>
 80064de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f043 0204 	orr.w	r2, r3, #4
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d011      	beq.n	8006526 <HAL_UART_IRQHandler+0x126>
 8006502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d105      	bne.n	800651a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800650e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f043 0208 	orr.w	r2, r3, #8
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 81f2 	beq.w	8006914 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_UART_IRQHandler+0x14e>
 800653c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc6e 	bl	8006e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	bf0c      	ite	eq
 800655c:	2301      	moveq	r3, #1
 800655e:	2300      	movne	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <HAL_UART_IRQHandler+0x17a>
 8006572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d051      	beq.n	800661e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb74 	bl	8006c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d142      	bne.n	8006614 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3314      	adds	r3, #20
 80065b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1d9      	bne.n	800658e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d013      	beq.n	800660a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	4a7f      	ldr	r2, [pc, #508]	; (80067e4 <HAL_UART_IRQHandler+0x3e4>)
 80065e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fc ffac 	bl	800354c <HAL_DMA_Abort_IT>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d019      	beq.n	800662e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006604:	4610      	mov	r0, r2
 8006606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	e011      	b.n	800662e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006612:	e00c      	b.n	800662e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	e007      	b.n	800662e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800662c:	e172      	b.n	8006914 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662e:	bf00      	nop
    return;
 8006630:	e170      	b.n	8006914 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	2b01      	cmp	r3, #1
 8006638:	f040 814c 	bne.w	80068d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8145 	beq.w	80068d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800664a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664e:	f003 0310 	and.w	r3, r3, #16
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 813e 	beq.w	80068d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006658:	2300      	movs	r3, #0
 800665a:	60bb      	str	r3, [r7, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	60bb      	str	r3, [r7, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	f040 80b5 	bne.w	80067e8 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800668a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8142 	beq.w	8006918 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006698:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800669c:	429a      	cmp	r2, r3
 800669e:	f080 813b 	bcs.w	8006918 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b4:	f000 8088 	beq.w	80067c8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066e4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1d9      	bne.n	80066b8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3314      	adds	r3, #20
 800670a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3314      	adds	r3, #20
 8006724:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006728:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800672c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006730:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800673a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e1      	bne.n	8006704 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3314      	adds	r3, #20
 8006746:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006764:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006766:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800676a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e3      	bne.n	8006740 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006798:	f023 0310 	bic.w	r3, r3, #16
 800679c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80067ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e3      	bne.n	8006786 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fc fe52 	bl	800346c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80067d4:	b292      	uxth	r2, r2
 80067d6:	1a8a      	subs	r2, r1, r2
 80067d8:	b292      	uxth	r2, r2
 80067da:	4611      	mov	r1, r2
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067e0:	e09a      	b.n	8006918 <HAL_UART_IRQHandler+0x518>
 80067e2:	bf00      	nop
 80067e4:	08006d2f 	.word	0x08006d2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 808c 	beq.w	800691c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006804:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8087 	beq.w	800691c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	330c      	adds	r3, #12
 800682e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006832:	647a      	str	r2, [r7, #68]	; 0x44
 8006834:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e3      	bne.n	800680e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	623b      	str	r3, [r7, #32]
   return(result);
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3314      	adds	r3, #20
 8006866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800686a:	633a      	str	r2, [r7, #48]	; 0x30
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e3      	bne.n	8006846 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	60fb      	str	r3, [r7, #12]
   return(result);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0310 	bic.w	r3, r3, #16
 80068a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068b0:	61fa      	str	r2, [r7, #28]
 80068b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	69b9      	ldr	r1, [r7, #24]
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	617b      	str	r3, [r7, #20]
   return(result);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e3      	bne.n	800688c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80068cc:	4611      	mov	r1, r2
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068d2:	e023      	b.n	800691c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d009      	beq.n	80068f4 <HAL_UART_IRQHandler+0x4f4>
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa33 	bl	8006d58 <UART_Transmit_IT>
    return;
 80068f2:	e014      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <HAL_UART_IRQHandler+0x51e>
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa73 	bl	8006df8 <UART_EndTransmit_IT>
    return;
 8006912:	e004      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
    return;
 8006914:	bf00      	nop
 8006916:	e002      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
      return;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
      return;
 800691c:	bf00      	nop
  }
}
 800691e:	37e8      	adds	r7, #232	; 0xe8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <UART_InitCallbacksToDefault+0x4c>)
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a0f      	ldr	r2, [pc, #60]	; (8006a2c <UART_InitCallbacksToDefault+0x50>)
 80069ee:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a0f      	ldr	r2, [pc, #60]	; (8006a30 <UART_InitCallbacksToDefault+0x54>)
 80069f4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a0e      	ldr	r2, [pc, #56]	; (8006a34 <UART_InitCallbacksToDefault+0x58>)
 80069fa:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a0e      	ldr	r2, [pc, #56]	; (8006a38 <UART_InitCallbacksToDefault+0x5c>)
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <UART_InitCallbacksToDefault+0x60>)
 8006a06:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a0d      	ldr	r2, [pc, #52]	; (8006a40 <UART_InitCallbacksToDefault+0x64>)
 8006a0c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <UART_InitCallbacksToDefault+0x68>)
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a0c      	ldr	r2, [pc, #48]	; (8006a48 <UART_InitCallbacksToDefault+0x6c>)
 8006a18:	669a      	str	r2, [r3, #104]	; 0x68

}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	08006939 	.word	0x08006939
 8006a2c:	08006925 	.word	0x08006925
 8006a30:	08006961 	.word	0x08006961
 8006a34:	0800694d 	.word	0x0800694d
 8006a38:	08006975 	.word	0x08006975
 8006a3c:	08006989 	.word	0x08006989
 8006a40:	0800699d 	.word	0x0800699d
 8006a44:	080069b1 	.word	0x080069b1
 8006a48:	080069c5 	.word	0x080069c5

08006a4c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b090      	sub	sp, #64	; 0x40
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d137      	bne.n	8006ad8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ac2:	61fa      	str	r2, [r7, #28]
 8006ac4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ad6:	e003      	b.n	8006ae0 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8006ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006adc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ade:	4798      	blx	r3
}
 8006ae0:	bf00      	nop
 8006ae2:	3740      	adds	r7, #64	; 0x40
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b80      	cmp	r3, #128	; 0x80
 8006b24:	bf0c      	ite	eq
 8006b26:	2301      	moveq	r3, #1
 8006b28:	2300      	movne	r3, #0
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b21      	cmp	r3, #33	; 0x21
 8006b38:	d108      	bne.n	8006b4c <UART_DMAError+0x46>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006b46:	68b8      	ldr	r0, [r7, #8]
 8006b48:	f000 f866 	bl	8006c18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2300      	movne	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b22      	cmp	r3, #34	; 0x22
 8006b6c:	d108      	bne.n	8006b80 <UART_DMAError+0x7a>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006b7a:	68b8      	ldr	r0, [r7, #8]
 8006b7c:	f000 f874 	bl	8006c68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	f043 0210 	orr.w	r2, r3, #16
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b90:	68b8      	ldr	r0, [r7, #8]
 8006b92:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b94:	bf00      	nop
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	88fa      	ldrh	r2, [r7, #6]
 8006bba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2222      	movs	r2, #34	; 0x22
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006be8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695a      	ldr	r2, [r3, #20]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0201 	orr.w	r2, r2, #1
 8006bf8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0220 	orr.w	r2, r2, #32
 8006c08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b089      	sub	sp, #36	; 0x24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	61ba      	str	r2, [r7, #24]
 8006c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e5      	bne.n	8006c20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006c5c:	bf00      	nop
 8006c5e:	3724      	adds	r7, #36	; 0x24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b095      	sub	sp, #84	; 0x54
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c90:	643a      	str	r2, [r7, #64]	; 0x40
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e5      	bne.n	8006c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e5      	bne.n	8006ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d119      	bne.n	8006d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f023 0310 	bic.w	r3, r3, #16
 8006cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d00:	61ba      	str	r2, [r7, #24]
 8006d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e5      	bne.n	8006ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d22:	bf00      	nop
 8006d24:	3754      	adds	r7, #84	; 0x54
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b21      	cmp	r3, #33	; 0x21
 8006d6a:	d13e      	bne.n	8006dea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d74:	d114      	bne.n	8006da0 <UART_Transmit_IT+0x48>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d110      	bne.n	8006da0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	1c9a      	adds	r2, r3, #2
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	621a      	str	r2, [r3, #32]
 8006d9e:	e008      	b.n	8006db2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	1c59      	adds	r1, r3, #1
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6211      	str	r1, [r2, #32]
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10f      	bne.n	8006de6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e000      	b.n	8006dec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
  }
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b08c      	sub	sp, #48	; 0x30
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b22      	cmp	r3, #34	; 0x22
 8006e3c:	f040 80ad 	bne.w	8006f9a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e48:	d117      	bne.n	8006e7a <UART_Receive_IT+0x50>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d113      	bne.n	8006e7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	1c9a      	adds	r2, r3, #2
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28
 8006e78:	e026      	b.n	8006ec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8c:	d007      	beq.n	8006e9e <UART_Receive_IT+0x74>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <UART_Receive_IT+0x82>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e008      	b.n	8006ebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d15c      	bne.n	8006f96 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0220 	bic.w	r2, r2, #32
 8006eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695a      	ldr	r2, [r3, #20]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0201 	bic.w	r2, r2, #1
 8006f0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d136      	bne.n	8006f8a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	330c      	adds	r3, #12
 8006f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	613b      	str	r3, [r7, #16]
   return(result);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f023 0310 	bic.w	r3, r3, #16
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	330c      	adds	r3, #12
 8006f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f42:	623a      	str	r2, [r7, #32]
 8006f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	69f9      	ldr	r1, [r7, #28]
 8006f48:	6a3a      	ldr	r2, [r7, #32]
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e5      	bne.n	8006f22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	d10a      	bne.n	8006f7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006f82:	4611      	mov	r1, r2
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
 8006f88:	e003      	b.n	8006f92 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e002      	b.n	8006f9c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e000      	b.n	8006f9c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8006f9a:	2302      	movs	r3, #2
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3730      	adds	r7, #48	; 0x30
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa8:	b0c0      	sub	sp, #256	; 0x100
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc0:	68d9      	ldr	r1, [r3, #12]
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	ea40 0301 	orr.w	r3, r0, r1
 8006fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ffc:	f021 010c 	bic.w	r1, r1, #12
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800700a:	430b      	orrs	r3, r1
 800700c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701e:	6999      	ldr	r1, [r3, #24]
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	ea40 0301 	orr.w	r3, r0, r1
 800702a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b8f      	ldr	r3, [pc, #572]	; (8007270 <UART_SetConfig+0x2cc>)
 8007034:	429a      	cmp	r2, r3
 8007036:	d005      	beq.n	8007044 <UART_SetConfig+0xa0>
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b8d      	ldr	r3, [pc, #564]	; (8007274 <UART_SetConfig+0x2d0>)
 8007040:	429a      	cmp	r2, r3
 8007042:	d104      	bne.n	800704e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007044:	f7fd fb54 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8007048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800704c:	e003      	b.n	8007056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800704e:	f7fd fb3b 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8007052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007060:	f040 810c 	bne.w	800727c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007068:	2200      	movs	r2, #0
 800706a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800706e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007076:	4622      	mov	r2, r4
 8007078:	462b      	mov	r3, r5
 800707a:	1891      	adds	r1, r2, r2
 800707c:	65b9      	str	r1, [r7, #88]	; 0x58
 800707e:	415b      	adcs	r3, r3
 8007080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007086:	4621      	mov	r1, r4
 8007088:	eb12 0801 	adds.w	r8, r2, r1
 800708c:	4629      	mov	r1, r5
 800708e:	eb43 0901 	adc.w	r9, r3, r1
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800709e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070a6:	4690      	mov	r8, r2
 80070a8:	4699      	mov	r9, r3
 80070aa:	4623      	mov	r3, r4
 80070ac:	eb18 0303 	adds.w	r3, r8, r3
 80070b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070b4:	462b      	mov	r3, r5
 80070b6:	eb49 0303 	adc.w	r3, r9, r3
 80070ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070d2:	460b      	mov	r3, r1
 80070d4:	18db      	adds	r3, r3, r3
 80070d6:	653b      	str	r3, [r7, #80]	; 0x50
 80070d8:	4613      	mov	r3, r2
 80070da:	eb42 0303 	adc.w	r3, r2, r3
 80070de:	657b      	str	r3, [r7, #84]	; 0x54
 80070e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070e8:	f7f9 fd1c 	bl	8000b24 <__aeabi_uldivmod>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4b61      	ldr	r3, [pc, #388]	; (8007278 <UART_SetConfig+0x2d4>)
 80070f2:	fba3 2302 	umull	r2, r3, r3, r2
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	011c      	lsls	r4, r3, #4
 80070fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	1891      	adds	r1, r2, r2
 8007112:	64b9      	str	r1, [r7, #72]	; 0x48
 8007114:	415b      	adcs	r3, r3
 8007116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800711c:	4641      	mov	r1, r8
 800711e:	eb12 0a01 	adds.w	sl, r2, r1
 8007122:	4649      	mov	r1, r9
 8007124:	eb43 0b01 	adc.w	fp, r3, r1
 8007128:	f04f 0200 	mov.w	r2, #0
 800712c:	f04f 0300 	mov.w	r3, #0
 8007130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800713c:	4692      	mov	sl, r2
 800713e:	469b      	mov	fp, r3
 8007140:	4643      	mov	r3, r8
 8007142:	eb1a 0303 	adds.w	r3, sl, r3
 8007146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800714a:	464b      	mov	r3, r9
 800714c:	eb4b 0303 	adc.w	r3, fp, r3
 8007150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007168:	460b      	mov	r3, r1
 800716a:	18db      	adds	r3, r3, r3
 800716c:	643b      	str	r3, [r7, #64]	; 0x40
 800716e:	4613      	mov	r3, r2
 8007170:	eb42 0303 	adc.w	r3, r2, r3
 8007174:	647b      	str	r3, [r7, #68]	; 0x44
 8007176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800717a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800717e:	f7f9 fcd1 	bl	8000b24 <__aeabi_uldivmod>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4611      	mov	r1, r2
 8007188:	4b3b      	ldr	r3, [pc, #236]	; (8007278 <UART_SetConfig+0x2d4>)
 800718a:	fba3 2301 	umull	r2, r3, r3, r1
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	2264      	movs	r2, #100	; 0x64
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	1acb      	subs	r3, r1, r3
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800719e:	4b36      	ldr	r3, [pc, #216]	; (8007278 <UART_SetConfig+0x2d4>)
 80071a0:	fba3 2302 	umull	r2, r3, r3, r2
 80071a4:	095b      	lsrs	r3, r3, #5
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071ac:	441c      	add	r4, r3
 80071ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071c0:	4642      	mov	r2, r8
 80071c2:	464b      	mov	r3, r9
 80071c4:	1891      	adds	r1, r2, r2
 80071c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80071c8:	415b      	adcs	r3, r3
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071d0:	4641      	mov	r1, r8
 80071d2:	1851      	adds	r1, r2, r1
 80071d4:	6339      	str	r1, [r7, #48]	; 0x30
 80071d6:	4649      	mov	r1, r9
 80071d8:	414b      	adcs	r3, r1
 80071da:	637b      	str	r3, [r7, #52]	; 0x34
 80071dc:	f04f 0200 	mov.w	r2, #0
 80071e0:	f04f 0300 	mov.w	r3, #0
 80071e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071e8:	4659      	mov	r1, fp
 80071ea:	00cb      	lsls	r3, r1, #3
 80071ec:	4651      	mov	r1, sl
 80071ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071f2:	4651      	mov	r1, sl
 80071f4:	00ca      	lsls	r2, r1, #3
 80071f6:	4610      	mov	r0, r2
 80071f8:	4619      	mov	r1, r3
 80071fa:	4603      	mov	r3, r0
 80071fc:	4642      	mov	r2, r8
 80071fe:	189b      	adds	r3, r3, r2
 8007200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007204:	464b      	mov	r3, r9
 8007206:	460a      	mov	r2, r1
 8007208:	eb42 0303 	adc.w	r3, r2, r3
 800720c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800721c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007224:	460b      	mov	r3, r1
 8007226:	18db      	adds	r3, r3, r3
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
 800722a:	4613      	mov	r3, r2
 800722c:	eb42 0303 	adc.w	r3, r2, r3
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800723a:	f7f9 fc73 	bl	8000b24 <__aeabi_uldivmod>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	4b0d      	ldr	r3, [pc, #52]	; (8007278 <UART_SetConfig+0x2d4>)
 8007244:	fba3 1302 	umull	r1, r3, r3, r2
 8007248:	095b      	lsrs	r3, r3, #5
 800724a:	2164      	movs	r1, #100	; 0x64
 800724c:	fb01 f303 	mul.w	r3, r1, r3
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	3332      	adds	r3, #50	; 0x32
 8007256:	4a08      	ldr	r2, [pc, #32]	; (8007278 <UART_SetConfig+0x2d4>)
 8007258:	fba2 2303 	umull	r2, r3, r2, r3
 800725c:	095b      	lsrs	r3, r3, #5
 800725e:	f003 0207 	and.w	r2, r3, #7
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4422      	add	r2, r4
 800726a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800726c:	e105      	b.n	800747a <UART_SetConfig+0x4d6>
 800726e:	bf00      	nop
 8007270:	40011000 	.word	0x40011000
 8007274:	40011400 	.word	0x40011400
 8007278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800727c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007280:	2200      	movs	r2, #0
 8007282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800728a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800728e:	4642      	mov	r2, r8
 8007290:	464b      	mov	r3, r9
 8007292:	1891      	adds	r1, r2, r2
 8007294:	6239      	str	r1, [r7, #32]
 8007296:	415b      	adcs	r3, r3
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
 800729a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800729e:	4641      	mov	r1, r8
 80072a0:	1854      	adds	r4, r2, r1
 80072a2:	4649      	mov	r1, r9
 80072a4:	eb43 0501 	adc.w	r5, r3, r1
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	00eb      	lsls	r3, r5, #3
 80072b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072b6:	00e2      	lsls	r2, r4, #3
 80072b8:	4614      	mov	r4, r2
 80072ba:	461d      	mov	r5, r3
 80072bc:	4643      	mov	r3, r8
 80072be:	18e3      	adds	r3, r4, r3
 80072c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072c4:	464b      	mov	r3, r9
 80072c6:	eb45 0303 	adc.w	r3, r5, r3
 80072ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	f04f 0300 	mov.w	r3, #0
 80072e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072ea:	4629      	mov	r1, r5
 80072ec:	008b      	lsls	r3, r1, #2
 80072ee:	4621      	mov	r1, r4
 80072f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072f4:	4621      	mov	r1, r4
 80072f6:	008a      	lsls	r2, r1, #2
 80072f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072fc:	f7f9 fc12 	bl	8000b24 <__aeabi_uldivmod>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4b60      	ldr	r3, [pc, #384]	; (8007488 <UART_SetConfig+0x4e4>)
 8007306:	fba3 2302 	umull	r2, r3, r3, r2
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	011c      	lsls	r4, r3, #4
 800730e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007312:	2200      	movs	r2, #0
 8007314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800731c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	1891      	adds	r1, r2, r2
 8007326:	61b9      	str	r1, [r7, #24]
 8007328:	415b      	adcs	r3, r3
 800732a:	61fb      	str	r3, [r7, #28]
 800732c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007330:	4641      	mov	r1, r8
 8007332:	1851      	adds	r1, r2, r1
 8007334:	6139      	str	r1, [r7, #16]
 8007336:	4649      	mov	r1, r9
 8007338:	414b      	adcs	r3, r1
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007348:	4659      	mov	r1, fp
 800734a:	00cb      	lsls	r3, r1, #3
 800734c:	4651      	mov	r1, sl
 800734e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007352:	4651      	mov	r1, sl
 8007354:	00ca      	lsls	r2, r1, #3
 8007356:	4610      	mov	r0, r2
 8007358:	4619      	mov	r1, r3
 800735a:	4603      	mov	r3, r0
 800735c:	4642      	mov	r2, r8
 800735e:	189b      	adds	r3, r3, r2
 8007360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007364:	464b      	mov	r3, r9
 8007366:	460a      	mov	r2, r1
 8007368:	eb42 0303 	adc.w	r3, r2, r3
 800736c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	67bb      	str	r3, [r7, #120]	; 0x78
 800737a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007388:	4649      	mov	r1, r9
 800738a:	008b      	lsls	r3, r1, #2
 800738c:	4641      	mov	r1, r8
 800738e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007392:	4641      	mov	r1, r8
 8007394:	008a      	lsls	r2, r1, #2
 8007396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800739a:	f7f9 fbc3 	bl	8000b24 <__aeabi_uldivmod>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4b39      	ldr	r3, [pc, #228]	; (8007488 <UART_SetConfig+0x4e4>)
 80073a4:	fba3 1302 	umull	r1, r3, r3, r2
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	2164      	movs	r1, #100	; 0x64
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	3332      	adds	r3, #50	; 0x32
 80073b6:	4a34      	ldr	r2, [pc, #208]	; (8007488 <UART_SetConfig+0x4e4>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073c2:	441c      	add	r4, r3
 80073c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073c8:	2200      	movs	r2, #0
 80073ca:	673b      	str	r3, [r7, #112]	; 0x70
 80073cc:	677a      	str	r2, [r7, #116]	; 0x74
 80073ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073d2:	4642      	mov	r2, r8
 80073d4:	464b      	mov	r3, r9
 80073d6:	1891      	adds	r1, r2, r2
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	415b      	adcs	r3, r3
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073e2:	4641      	mov	r1, r8
 80073e4:	1851      	adds	r1, r2, r1
 80073e6:	6039      	str	r1, [r7, #0]
 80073e8:	4649      	mov	r1, r9
 80073ea:	414b      	adcs	r3, r1
 80073ec:	607b      	str	r3, [r7, #4]
 80073ee:	f04f 0200 	mov.w	r2, #0
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073fa:	4659      	mov	r1, fp
 80073fc:	00cb      	lsls	r3, r1, #3
 80073fe:	4651      	mov	r1, sl
 8007400:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007404:	4651      	mov	r1, sl
 8007406:	00ca      	lsls	r2, r1, #3
 8007408:	4610      	mov	r0, r2
 800740a:	4619      	mov	r1, r3
 800740c:	4603      	mov	r3, r0
 800740e:	4642      	mov	r2, r8
 8007410:	189b      	adds	r3, r3, r2
 8007412:	66bb      	str	r3, [r7, #104]	; 0x68
 8007414:	464b      	mov	r3, r9
 8007416:	460a      	mov	r2, r1
 8007418:	eb42 0303 	adc.w	r3, r2, r3
 800741c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800741e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	663b      	str	r3, [r7, #96]	; 0x60
 8007428:	667a      	str	r2, [r7, #100]	; 0x64
 800742a:	f04f 0200 	mov.w	r2, #0
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007436:	4649      	mov	r1, r9
 8007438:	008b      	lsls	r3, r1, #2
 800743a:	4641      	mov	r1, r8
 800743c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007440:	4641      	mov	r1, r8
 8007442:	008a      	lsls	r2, r1, #2
 8007444:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007448:	f7f9 fb6c 	bl	8000b24 <__aeabi_uldivmod>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <UART_SetConfig+0x4e4>)
 8007452:	fba3 1302 	umull	r1, r3, r3, r2
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	2164      	movs	r1, #100	; 0x64
 800745a:	fb01 f303 	mul.w	r3, r1, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	3332      	adds	r3, #50	; 0x32
 8007464:	4a08      	ldr	r2, [pc, #32]	; (8007488 <UART_SetConfig+0x4e4>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	f003 020f 	and.w	r2, r3, #15
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4422      	add	r2, r4
 8007478:	609a      	str	r2, [r3, #8]
}
 800747a:	bf00      	nop
 800747c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007480:	46bd      	mov	sp, r7
 8007482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007486:	bf00      	nop
 8007488:	51eb851f 	.word	0x51eb851f

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4d0d      	ldr	r5, [pc, #52]	; (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	; (80074c8 <__libc_init_array+0x3c>)
 8007492:	1b64      	subs	r4, r4, r5
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2600      	movs	r6, #0
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4d0b      	ldr	r5, [pc, #44]	; (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	; (80074d0 <__libc_init_array+0x44>)
 80074a0:	f000 faa8 	bl	80079f4 <_init>
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2600      	movs	r6, #0
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	080082b0 	.word	0x080082b0
 80074c8:	080082b0 	.word	0x080082b0
 80074cc:	080082b0 	.word	0x080082b0
 80074d0:	080082b4 	.word	0x080082b4

080074d4 <memcpy>:
 80074d4:	440a      	add	r2, r1
 80074d6:	4291      	cmp	r1, r2
 80074d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	4770      	bx	lr
 80074e0:	b510      	push	{r4, lr}
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memcpy+0xe>
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <memset>:
 80074f0:	4402      	add	r2, r0
 80074f2:	4603      	mov	r3, r0
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d100      	bne.n	80074fa <memset+0xa>
 80074f8:	4770      	bx	lr
 80074fa:	f803 1b01 	strb.w	r1, [r3], #1
 80074fe:	e7f9      	b.n	80074f4 <memset+0x4>

08007500 <atan2>:
 8007500:	f000 b802 	b.w	8007508 <__ieee754_atan2>
 8007504:	0000      	movs	r0, r0
	...

08007508 <__ieee754_atan2>:
 8007508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750c:	ec57 6b11 	vmov	r6, r7, d1
 8007510:	4273      	negs	r3, r6
 8007512:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007698 <__ieee754_atan2+0x190>
 8007516:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800751a:	4333      	orrs	r3, r6
 800751c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007520:	4573      	cmp	r3, lr
 8007522:	ec51 0b10 	vmov	r0, r1, d0
 8007526:	ee11 8a10 	vmov	r8, s2
 800752a:	d80a      	bhi.n	8007542 <__ieee754_atan2+0x3a>
 800752c:	4244      	negs	r4, r0
 800752e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007532:	4304      	orrs	r4, r0
 8007534:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007538:	4574      	cmp	r4, lr
 800753a:	ee10 9a10 	vmov	r9, s0
 800753e:	468c      	mov	ip, r1
 8007540:	d907      	bls.n	8007552 <__ieee754_atan2+0x4a>
 8007542:	4632      	mov	r2, r6
 8007544:	463b      	mov	r3, r7
 8007546:	f7f8 fe4d 	bl	80001e4 <__adddf3>
 800754a:	ec41 0b10 	vmov	d0, r0, r1
 800754e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007552:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007556:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800755a:	4334      	orrs	r4, r6
 800755c:	d103      	bne.n	8007566 <__ieee754_atan2+0x5e>
 800755e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007562:	f000 b89d 	b.w	80076a0 <atan>
 8007566:	17bc      	asrs	r4, r7, #30
 8007568:	f004 0402 	and.w	r4, r4, #2
 800756c:	ea53 0909 	orrs.w	r9, r3, r9
 8007570:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007574:	d107      	bne.n	8007586 <__ieee754_atan2+0x7e>
 8007576:	2c02      	cmp	r4, #2
 8007578:	d060      	beq.n	800763c <__ieee754_atan2+0x134>
 800757a:	2c03      	cmp	r4, #3
 800757c:	d1e5      	bne.n	800754a <__ieee754_atan2+0x42>
 800757e:	a142      	add	r1, pc, #264	; (adr r1, 8007688 <__ieee754_atan2+0x180>)
 8007580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007584:	e7e1      	b.n	800754a <__ieee754_atan2+0x42>
 8007586:	ea52 0808 	orrs.w	r8, r2, r8
 800758a:	d106      	bne.n	800759a <__ieee754_atan2+0x92>
 800758c:	f1bc 0f00 	cmp.w	ip, #0
 8007590:	da5f      	bge.n	8007652 <__ieee754_atan2+0x14a>
 8007592:	a13f      	add	r1, pc, #252	; (adr r1, 8007690 <__ieee754_atan2+0x188>)
 8007594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007598:	e7d7      	b.n	800754a <__ieee754_atan2+0x42>
 800759a:	4572      	cmp	r2, lr
 800759c:	d10f      	bne.n	80075be <__ieee754_atan2+0xb6>
 800759e:	4293      	cmp	r3, r2
 80075a0:	f104 34ff 	add.w	r4, r4, #4294967295
 80075a4:	d107      	bne.n	80075b6 <__ieee754_atan2+0xae>
 80075a6:	2c02      	cmp	r4, #2
 80075a8:	d84c      	bhi.n	8007644 <__ieee754_atan2+0x13c>
 80075aa:	4b35      	ldr	r3, [pc, #212]	; (8007680 <__ieee754_atan2+0x178>)
 80075ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80075b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80075b4:	e7c9      	b.n	800754a <__ieee754_atan2+0x42>
 80075b6:	2c02      	cmp	r4, #2
 80075b8:	d848      	bhi.n	800764c <__ieee754_atan2+0x144>
 80075ba:	4b32      	ldr	r3, [pc, #200]	; (8007684 <__ieee754_atan2+0x17c>)
 80075bc:	e7f6      	b.n	80075ac <__ieee754_atan2+0xa4>
 80075be:	4573      	cmp	r3, lr
 80075c0:	d0e4      	beq.n	800758c <__ieee754_atan2+0x84>
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80075c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80075cc:	da1e      	bge.n	800760c <__ieee754_atan2+0x104>
 80075ce:	2f00      	cmp	r7, #0
 80075d0:	da01      	bge.n	80075d6 <__ieee754_atan2+0xce>
 80075d2:	323c      	adds	r2, #60	; 0x3c
 80075d4:	db1e      	blt.n	8007614 <__ieee754_atan2+0x10c>
 80075d6:	4632      	mov	r2, r6
 80075d8:	463b      	mov	r3, r7
 80075da:	f7f9 f8e3 	bl	80007a4 <__aeabi_ddiv>
 80075de:	ec41 0b10 	vmov	d0, r0, r1
 80075e2:	f000 f9fd 	bl	80079e0 <fabs>
 80075e6:	f000 f85b 	bl	80076a0 <atan>
 80075ea:	ec51 0b10 	vmov	r0, r1, d0
 80075ee:	2c01      	cmp	r4, #1
 80075f0:	d013      	beq.n	800761a <__ieee754_atan2+0x112>
 80075f2:	2c02      	cmp	r4, #2
 80075f4:	d015      	beq.n	8007622 <__ieee754_atan2+0x11a>
 80075f6:	2c00      	cmp	r4, #0
 80075f8:	d0a7      	beq.n	800754a <__ieee754_atan2+0x42>
 80075fa:	a319      	add	r3, pc, #100	; (adr r3, 8007660 <__ieee754_atan2+0x158>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f7f8 fdee 	bl	80001e0 <__aeabi_dsub>
 8007604:	a318      	add	r3, pc, #96	; (adr r3, 8007668 <__ieee754_atan2+0x160>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	e014      	b.n	8007636 <__ieee754_atan2+0x12e>
 800760c:	a118      	add	r1, pc, #96	; (adr r1, 8007670 <__ieee754_atan2+0x168>)
 800760e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007612:	e7ec      	b.n	80075ee <__ieee754_atan2+0xe6>
 8007614:	2000      	movs	r0, #0
 8007616:	2100      	movs	r1, #0
 8007618:	e7e9      	b.n	80075ee <__ieee754_atan2+0xe6>
 800761a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800761e:	4619      	mov	r1, r3
 8007620:	e793      	b.n	800754a <__ieee754_atan2+0x42>
 8007622:	a30f      	add	r3, pc, #60	; (adr r3, 8007660 <__ieee754_atan2+0x158>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 fdda 	bl	80001e0 <__aeabi_dsub>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	a10d      	add	r1, pc, #52	; (adr r1, 8007668 <__ieee754_atan2+0x160>)
 8007632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007636:	f7f8 fdd3 	bl	80001e0 <__aeabi_dsub>
 800763a:	e786      	b.n	800754a <__ieee754_atan2+0x42>
 800763c:	a10a      	add	r1, pc, #40	; (adr r1, 8007668 <__ieee754_atan2+0x160>)
 800763e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007642:	e782      	b.n	800754a <__ieee754_atan2+0x42>
 8007644:	a10c      	add	r1, pc, #48	; (adr r1, 8007678 <__ieee754_atan2+0x170>)
 8007646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800764a:	e77e      	b.n	800754a <__ieee754_atan2+0x42>
 800764c:	2000      	movs	r0, #0
 800764e:	2100      	movs	r1, #0
 8007650:	e77b      	b.n	800754a <__ieee754_atan2+0x42>
 8007652:	a107      	add	r1, pc, #28	; (adr r1, 8007670 <__ieee754_atan2+0x168>)
 8007654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007658:	e777      	b.n	800754a <__ieee754_atan2+0x42>
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w
 8007660:	33145c07 	.word	0x33145c07
 8007664:	3ca1a626 	.word	0x3ca1a626
 8007668:	54442d18 	.word	0x54442d18
 800766c:	400921fb 	.word	0x400921fb
 8007670:	54442d18 	.word	0x54442d18
 8007674:	3ff921fb 	.word	0x3ff921fb
 8007678:	54442d18 	.word	0x54442d18
 800767c:	3fe921fb 	.word	0x3fe921fb
 8007680:	08008238 	.word	0x08008238
 8007684:	08008250 	.word	0x08008250
 8007688:	54442d18 	.word	0x54442d18
 800768c:	c00921fb 	.word	0xc00921fb
 8007690:	54442d18 	.word	0x54442d18
 8007694:	bff921fb 	.word	0xbff921fb
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	00000000 	.word	0x00000000

080076a0 <atan>:
 80076a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	ec55 4b10 	vmov	r4, r5, d0
 80076a8:	4bc3      	ldr	r3, [pc, #780]	; (80079b8 <atan+0x318>)
 80076aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80076ae:	429e      	cmp	r6, r3
 80076b0:	46ab      	mov	fp, r5
 80076b2:	dd18      	ble.n	80076e6 <atan+0x46>
 80076b4:	4bc1      	ldr	r3, [pc, #772]	; (80079bc <atan+0x31c>)
 80076b6:	429e      	cmp	r6, r3
 80076b8:	dc01      	bgt.n	80076be <atan+0x1e>
 80076ba:	d109      	bne.n	80076d0 <atan+0x30>
 80076bc:	b144      	cbz	r4, 80076d0 <atan+0x30>
 80076be:	4622      	mov	r2, r4
 80076c0:	462b      	mov	r3, r5
 80076c2:	4620      	mov	r0, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	f7f8 fd8d 	bl	80001e4 <__adddf3>
 80076ca:	4604      	mov	r4, r0
 80076cc:	460d      	mov	r5, r1
 80076ce:	e006      	b.n	80076de <atan+0x3e>
 80076d0:	f1bb 0f00 	cmp.w	fp, #0
 80076d4:	f300 8131 	bgt.w	800793a <atan+0x29a>
 80076d8:	a59b      	add	r5, pc, #620	; (adr r5, 8007948 <atan+0x2a8>)
 80076da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80076de:	ec45 4b10 	vmov	d0, r4, r5
 80076e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e6:	4bb6      	ldr	r3, [pc, #728]	; (80079c0 <atan+0x320>)
 80076e8:	429e      	cmp	r6, r3
 80076ea:	dc14      	bgt.n	8007716 <atan+0x76>
 80076ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80076f0:	429e      	cmp	r6, r3
 80076f2:	dc0d      	bgt.n	8007710 <atan+0x70>
 80076f4:	a396      	add	r3, pc, #600	; (adr r3, 8007950 <atan+0x2b0>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	ee10 0a10 	vmov	r0, s0
 80076fe:	4629      	mov	r1, r5
 8007700:	f7f8 fd70 	bl	80001e4 <__adddf3>
 8007704:	4baf      	ldr	r3, [pc, #700]	; (80079c4 <atan+0x324>)
 8007706:	2200      	movs	r2, #0
 8007708:	f7f9 f9b2 	bl	8000a70 <__aeabi_dcmpgt>
 800770c:	2800      	cmp	r0, #0
 800770e:	d1e6      	bne.n	80076de <atan+0x3e>
 8007710:	f04f 3aff 	mov.w	sl, #4294967295
 8007714:	e02b      	b.n	800776e <atan+0xce>
 8007716:	f000 f963 	bl	80079e0 <fabs>
 800771a:	4bab      	ldr	r3, [pc, #684]	; (80079c8 <atan+0x328>)
 800771c:	429e      	cmp	r6, r3
 800771e:	ec55 4b10 	vmov	r4, r5, d0
 8007722:	f300 80bf 	bgt.w	80078a4 <atan+0x204>
 8007726:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800772a:	429e      	cmp	r6, r3
 800772c:	f300 80a0 	bgt.w	8007870 <atan+0x1d0>
 8007730:	ee10 2a10 	vmov	r2, s0
 8007734:	ee10 0a10 	vmov	r0, s0
 8007738:	462b      	mov	r3, r5
 800773a:	4629      	mov	r1, r5
 800773c:	f7f8 fd52 	bl	80001e4 <__adddf3>
 8007740:	4ba0      	ldr	r3, [pc, #640]	; (80079c4 <atan+0x324>)
 8007742:	2200      	movs	r2, #0
 8007744:	f7f8 fd4c 	bl	80001e0 <__aeabi_dsub>
 8007748:	2200      	movs	r2, #0
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f8 fd45 	bl	80001e4 <__adddf3>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4630      	mov	r0, r6
 8007760:	4639      	mov	r1, r7
 8007762:	f7f9 f81f 	bl	80007a4 <__aeabi_ddiv>
 8007766:	f04f 0a00 	mov.w	sl, #0
 800776a:	4604      	mov	r4, r0
 800776c:	460d      	mov	r5, r1
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	4620      	mov	r0, r4
 8007774:	4629      	mov	r1, r5
 8007776:	f7f8 feeb 	bl	8000550 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4680      	mov	r8, r0
 8007780:	4689      	mov	r9, r1
 8007782:	f7f8 fee5 	bl	8000550 <__aeabi_dmul>
 8007786:	a374      	add	r3, pc, #464	; (adr r3, 8007958 <atan+0x2b8>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	f7f8 fede 	bl	8000550 <__aeabi_dmul>
 8007794:	a372      	add	r3, pc, #456	; (adr r3, 8007960 <atan+0x2c0>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 fd23 	bl	80001e4 <__adddf3>
 800779e:	4632      	mov	r2, r6
 80077a0:	463b      	mov	r3, r7
 80077a2:	f7f8 fed5 	bl	8000550 <__aeabi_dmul>
 80077a6:	a370      	add	r3, pc, #448	; (adr r3, 8007968 <atan+0x2c8>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 fd1a 	bl	80001e4 <__adddf3>
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	f7f8 fecc 	bl	8000550 <__aeabi_dmul>
 80077b8:	a36d      	add	r3, pc, #436	; (adr r3, 8007970 <atan+0x2d0>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fd11 	bl	80001e4 <__adddf3>
 80077c2:	4632      	mov	r2, r6
 80077c4:	463b      	mov	r3, r7
 80077c6:	f7f8 fec3 	bl	8000550 <__aeabi_dmul>
 80077ca:	a36b      	add	r3, pc, #428	; (adr r3, 8007978 <atan+0x2d8>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 fd08 	bl	80001e4 <__adddf3>
 80077d4:	4632      	mov	r2, r6
 80077d6:	463b      	mov	r3, r7
 80077d8:	f7f8 feba 	bl	8000550 <__aeabi_dmul>
 80077dc:	a368      	add	r3, pc, #416	; (adr r3, 8007980 <atan+0x2e0>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 fcff 	bl	80001e4 <__adddf3>
 80077e6:	4642      	mov	r2, r8
 80077e8:	464b      	mov	r3, r9
 80077ea:	f7f8 feb1 	bl	8000550 <__aeabi_dmul>
 80077ee:	a366      	add	r3, pc, #408	; (adr r3, 8007988 <atan+0x2e8>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	4680      	mov	r8, r0
 80077f6:	4689      	mov	r9, r1
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f8 fea8 	bl	8000550 <__aeabi_dmul>
 8007800:	a363      	add	r3, pc, #396	; (adr r3, 8007990 <atan+0x2f0>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f7f8 fceb 	bl	80001e0 <__aeabi_dsub>
 800780a:	4632      	mov	r2, r6
 800780c:	463b      	mov	r3, r7
 800780e:	f7f8 fe9f 	bl	8000550 <__aeabi_dmul>
 8007812:	a361      	add	r3, pc, #388	; (adr r3, 8007998 <atan+0x2f8>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fce2 	bl	80001e0 <__aeabi_dsub>
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	f7f8 fe96 	bl	8000550 <__aeabi_dmul>
 8007824:	a35e      	add	r3, pc, #376	; (adr r3, 80079a0 <atan+0x300>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fcd9 	bl	80001e0 <__aeabi_dsub>
 800782e:	4632      	mov	r2, r6
 8007830:	463b      	mov	r3, r7
 8007832:	f7f8 fe8d 	bl	8000550 <__aeabi_dmul>
 8007836:	a35c      	add	r3, pc, #368	; (adr r3, 80079a8 <atan+0x308>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fcd0 	bl	80001e0 <__aeabi_dsub>
 8007840:	4632      	mov	r2, r6
 8007842:	463b      	mov	r3, r7
 8007844:	f7f8 fe84 	bl	8000550 <__aeabi_dmul>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f8 fcc8 	bl	80001e4 <__adddf3>
 8007854:	4622      	mov	r2, r4
 8007856:	462b      	mov	r3, r5
 8007858:	f7f8 fe7a 	bl	8000550 <__aeabi_dmul>
 800785c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	d14b      	bne.n	80078fe <atan+0x25e>
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	f7f8 fcb9 	bl	80001e0 <__aeabi_dsub>
 800786e:	e72c      	b.n	80076ca <atan+0x2a>
 8007870:	ee10 0a10 	vmov	r0, s0
 8007874:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <atan+0x324>)
 8007876:	2200      	movs	r2, #0
 8007878:	4629      	mov	r1, r5
 800787a:	f7f8 fcb1 	bl	80001e0 <__aeabi_dsub>
 800787e:	4b51      	ldr	r3, [pc, #324]	; (80079c4 <atan+0x324>)
 8007880:	4606      	mov	r6, r0
 8007882:	460f      	mov	r7, r1
 8007884:	2200      	movs	r2, #0
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f8 fcab 	bl	80001e4 <__adddf3>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4630      	mov	r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	f7f8 ff85 	bl	80007a4 <__aeabi_ddiv>
 800789a:	f04f 0a01 	mov.w	sl, #1
 800789e:	4604      	mov	r4, r0
 80078a0:	460d      	mov	r5, r1
 80078a2:	e764      	b.n	800776e <atan+0xce>
 80078a4:	4b49      	ldr	r3, [pc, #292]	; (80079cc <atan+0x32c>)
 80078a6:	429e      	cmp	r6, r3
 80078a8:	da1d      	bge.n	80078e6 <atan+0x246>
 80078aa:	ee10 0a10 	vmov	r0, s0
 80078ae:	4b48      	ldr	r3, [pc, #288]	; (80079d0 <atan+0x330>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 fc94 	bl	80001e0 <__aeabi_dsub>
 80078b8:	4b45      	ldr	r3, [pc, #276]	; (80079d0 <atan+0x330>)
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	2200      	movs	r2, #0
 80078c0:	4620      	mov	r0, r4
 80078c2:	4629      	mov	r1, r5
 80078c4:	f7f8 fe44 	bl	8000550 <__aeabi_dmul>
 80078c8:	4b3e      	ldr	r3, [pc, #248]	; (80079c4 <atan+0x324>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	f7f8 fc8a 	bl	80001e4 <__adddf3>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4630      	mov	r0, r6
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f8 ff64 	bl	80007a4 <__aeabi_ddiv>
 80078dc:	f04f 0a02 	mov.w	sl, #2
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	e743      	b.n	800776e <atan+0xce>
 80078e6:	462b      	mov	r3, r5
 80078e8:	ee10 2a10 	vmov	r2, s0
 80078ec:	4939      	ldr	r1, [pc, #228]	; (80079d4 <atan+0x334>)
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7f8 ff58 	bl	80007a4 <__aeabi_ddiv>
 80078f4:	f04f 0a03 	mov.w	sl, #3
 80078f8:	4604      	mov	r4, r0
 80078fa:	460d      	mov	r5, r1
 80078fc:	e737      	b.n	800776e <atan+0xce>
 80078fe:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <atan+0x338>)
 8007900:	4e36      	ldr	r6, [pc, #216]	; (80079dc <atan+0x33c>)
 8007902:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007906:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800790a:	e9da 2300 	ldrd	r2, r3, [sl]
 800790e:	f7f8 fc67 	bl	80001e0 <__aeabi_dsub>
 8007912:	4622      	mov	r2, r4
 8007914:	462b      	mov	r3, r5
 8007916:	f7f8 fc63 	bl	80001e0 <__aeabi_dsub>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007922:	f7f8 fc5d 	bl	80001e0 <__aeabi_dsub>
 8007926:	f1bb 0f00 	cmp.w	fp, #0
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	f6bf aed6 	bge.w	80076de <atan+0x3e>
 8007932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007936:	461d      	mov	r5, r3
 8007938:	e6d1      	b.n	80076de <atan+0x3e>
 800793a:	a51d      	add	r5, pc, #116	; (adr r5, 80079b0 <atan+0x310>)
 800793c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007940:	e6cd      	b.n	80076de <atan+0x3e>
 8007942:	bf00      	nop
 8007944:	f3af 8000 	nop.w
 8007948:	54442d18 	.word	0x54442d18
 800794c:	bff921fb 	.word	0xbff921fb
 8007950:	8800759c 	.word	0x8800759c
 8007954:	7e37e43c 	.word	0x7e37e43c
 8007958:	e322da11 	.word	0xe322da11
 800795c:	3f90ad3a 	.word	0x3f90ad3a
 8007960:	24760deb 	.word	0x24760deb
 8007964:	3fa97b4b 	.word	0x3fa97b4b
 8007968:	a0d03d51 	.word	0xa0d03d51
 800796c:	3fb10d66 	.word	0x3fb10d66
 8007970:	c54c206e 	.word	0xc54c206e
 8007974:	3fb745cd 	.word	0x3fb745cd
 8007978:	920083ff 	.word	0x920083ff
 800797c:	3fc24924 	.word	0x3fc24924
 8007980:	5555550d 	.word	0x5555550d
 8007984:	3fd55555 	.word	0x3fd55555
 8007988:	2c6a6c2f 	.word	0x2c6a6c2f
 800798c:	bfa2b444 	.word	0xbfa2b444
 8007990:	52defd9a 	.word	0x52defd9a
 8007994:	3fadde2d 	.word	0x3fadde2d
 8007998:	af749a6d 	.word	0xaf749a6d
 800799c:	3fb3b0f2 	.word	0x3fb3b0f2
 80079a0:	fe231671 	.word	0xfe231671
 80079a4:	3fbc71c6 	.word	0x3fbc71c6
 80079a8:	9998ebc4 	.word	0x9998ebc4
 80079ac:	3fc99999 	.word	0x3fc99999
 80079b0:	54442d18 	.word	0x54442d18
 80079b4:	3ff921fb 	.word	0x3ff921fb
 80079b8:	440fffff 	.word	0x440fffff
 80079bc:	7ff00000 	.word	0x7ff00000
 80079c0:	3fdbffff 	.word	0x3fdbffff
 80079c4:	3ff00000 	.word	0x3ff00000
 80079c8:	3ff2ffff 	.word	0x3ff2ffff
 80079cc:	40038000 	.word	0x40038000
 80079d0:	3ff80000 	.word	0x3ff80000
 80079d4:	bff00000 	.word	0xbff00000
 80079d8:	08008288 	.word	0x08008288
 80079dc:	08008268 	.word	0x08008268

080079e0 <fabs>:
 80079e0:	ec51 0b10 	vmov	r0, r1, d0
 80079e4:	ee10 2a10 	vmov	r2, s0
 80079e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079ec:	ec43 2b10 	vmov	d0, r2, r3
 80079f0:	4770      	bx	lr
	...

080079f4 <_init>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr

08007a00 <_fini>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr
