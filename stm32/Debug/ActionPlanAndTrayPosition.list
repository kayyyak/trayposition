
ActionPlanAndTrayPosition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000694c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007308  08007308  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007310  08007310  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08007318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  20000254  0800756c  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d0c  0800756c  00020d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129a9  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002494  00000000  00000000  00032c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000350c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00035f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018571  00000000  00000000  00036c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cf3  00000000  00000000  0004f1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cafb  00000000  00000000  00060edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd9d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf4  00000000  00000000  000fda28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000254 	.word	0x20000254
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006acc 	.word	0x08006acc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000258 	.word	0x20000258
 80001d4:	08006acc 	.word	0x08006acc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <modbus_1t5_Timeout+0x1c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2201      	movs	r2, #1
 8000d26:	751a      	strb	r2, [r3, #20]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	20000270 	.word	0x20000270

08000d38 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <modbus_3t5_Timeout+0x1c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2201      	movs	r2, #1
 8000d46:	755a      	strb	r2, [r3, #21]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	20000270 	.word	0x20000270

08000d58 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <modbus_UART_Recived+0x60>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2201      	movs	r2, #1
 8000d68:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <modbus_UART_Recived+0x60>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000d72:	1c59      	adds	r1, r3, #1
 8000d74:	b289      	uxth	r1, r1
 8000d76:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000d7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d7e:	d210      	bcs.n	8000da2 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <modbus_UART_Recived+0x60>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	68d8      	ldr	r0, [r3, #12]
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <modbus_UART_Recived+0x60>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <modbus_UART_Recived+0x60>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000d92:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000d96:	4413      	add	r3, r2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f004 fcc3 	bl	8005728 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <modbus_UART_Recived+0x60>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000270 	.word	0x20000270

08000dbc <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000dc6:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <Modbus_init+0x9c>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <Modbus_init+0x9c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <Modbus_init+0x9c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <Modbus_init+0xa0>)
 8000ddc:	2114      	movs	r1, #20
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 fea6 	bl	8004b30 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <Modbus_init+0x9c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <Modbus_init+0xa4>)
 8000dec:	210e      	movs	r1, #14
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fe9e 	bl	8004b30 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <Modbus_init+0x9c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <Modbus_init+0xa8>)
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fbea 	bl	80055d8 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <Modbus_init+0x9c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68d8      	ldr	r0, [r3, #12]
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <Modbus_init+0x9c>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <Modbus_init+0x9c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000e16:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4619      	mov	r1, r3
 8000e22:	f004 fc81 	bl	8005728 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <Modbus_init+0x9c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d10c      	bne.n	8000e50 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <Modbus_init+0x9c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fa31 	bl	80042a4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <Modbus_init+0x9c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fb5a 	bl	8004504 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000270 	.word	0x20000270
 8000e5c:	08000d19 	.word	0x08000d19
 8000e60:	08000d39 	.word	0x08000d39
 8000e64:	08000d59 	.word	0x08000d59

08000e68 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000e74:	23ff      	movs	r3, #255	; 0xff
 8000e76:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000e78:	23ff      	movs	r3, #255	; 0xff
 8000e7a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000e7c:	e013      	b.n	8000ea6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	4053      	eors	r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <CRC16+0x64>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4413      	add	r3, r2
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4053      	eors	r3, r2
 8000e9a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <CRC16+0x68>)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000ea6:	883b      	ldrh	r3, [r7, #0]
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	803a      	strh	r2, [r7, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e6      	bne.n	8000e7e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	b29b      	uxth	r3, r3
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	20000100 	.word	0x20000100
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8000eda:	4b81      	ldr	r3, [pc, #516]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	7e1b      	ldrb	r3, [r3, #24]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d80a      	bhi.n	8000efc <Modbus_Protocal_Worker+0x28>
 8000ee6:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <Modbus_Protocal_Worker+0x18>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000f07 	.word	0x08000f07
 8000ef0:	080010a7 	.word	0x080010a7
 8000ef4:	08000f93 	.word	0x08000f93
 8000ef8:	08000fb9 	.word	0x08000fb9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000efc:	4b78      	ldr	r3, [pc, #480]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2201      	movs	r2, #1
 8000f02:	761a      	strb	r2, [r3, #24]
		break;
 8000f04:	e0e8      	b.n	80010d8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000f06:	4b76      	ldr	r3, [pc, #472]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000f12:	f000 f9dd 	bl	80012d0 <Modbus_Emission>
 8000f16:	e01c      	b.n	8000f52 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000f18:	4b71      	ldr	r3, [pc, #452]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	7d9b      	ldrb	r3, [r3, #22]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d017      	beq.n	8000f52 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000f22:	4b6f      	ldr	r3, [pc, #444]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2200      	movs	r2, #0
 8000f28:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000f2a:	4b6d      	ldr	r3, [pc, #436]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000f32:	4b6b      	ldr	r3, [pc, #428]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f042 0201 	orr.w	r2, r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000f4a:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000f52:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b20      	cmp	r3, #32
 8000f60:	f040 80b3 	bne.w	80010ca <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000f64:	4b5e      	ldr	r3, [pc, #376]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68d8      	ldr	r0, [r3, #12]
 8000f74:	4b5a      	ldr	r3, [pc, #360]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b59      	ldr	r3, [pc, #356]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f80:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f84:	4413      	add	r3, r2
 8000f86:	3302      	adds	r3, #2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f004 fbcc 	bl	8005728 <HAL_UART_Receive_IT>
		}
		break;
 8000f90:	e09b      	b.n	80010ca <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000f92:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	7d1b      	ldrb	r3, [r3, #20]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 8098 	beq.w	80010ce <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000f9e:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000fa6:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	22fe      	movs	r2, #254	; 0xfe
 8000fac:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000fae:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000fb6:	e08a      	b.n	80010ce <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000fb8:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	7d9b      	ldrb	r3, [r3, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d103      	bne.n	8000fd6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000fde:	f113 0f02 	cmn.w	r3, #2
 8000fe2:	d150      	bne.n	8001086 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000fec:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f203 2272 	addw	r2, r3, #626	; 0x272
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000ffc:	3b02      	subs	r3, #2
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f7ff ff31 	bl	8000e68 <CRC16>
 8001006:	4603      	mov	r3, r0
 8001008:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800100a:	793a      	ldrb	r2, [r7, #4]
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 800100e:	6819      	ldr	r1, [r3, #0]
 8001010:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001018:	3b02      	subs	r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001020:	429a      	cmp	r2, r3
 8001022:	d10c      	bne.n	800103e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001024:	797a      	ldrb	r2, [r7, #5]
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8001028:	6819      	ldr	r1, [r3, #0]
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001032:	3b01      	subs	r3, #1
 8001034:	440b      	add	r3, r1
 8001036:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800103a:	429a      	cmp	r2, r3
 800103c:	d004      	beq.n	8001048 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	22ff      	movs	r2, #255	; 0xff
 8001044:	75da      	strb	r2, [r3, #23]
				break;
 8001046:	e047      	b.n	80010d8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d113      	bne.n	8001082 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800106a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001074:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001076:	461a      	mov	r2, r3
 8001078:	f005 fd12 	bl	8006aa0 <memcpy>

			//execute command
			Modbus_frame_response();
 800107c:	f000 f910 	bl	80012a0 <Modbus_frame_response>
 8001080:	e001      	b.n	8001086 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001082:	bf00      	nop
					}
		break;


	}
}
 8001084:	e028      	b.n	80010d8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	7d5b      	ldrb	r3, [r3, #21]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 fbf0 	bl	8005884 <HAL_UART_AbortReceive>
		break;
 80010a4:	e015      	b.n	80010d2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b20      	cmp	r3, #32
 80010b4:	d10f      	bne.n	80010d6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <Modbus_Protocal_Worker+0x20c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2201      	movs	r2, #1
 80010c6:	761a      	strb	r2, [r3, #24]
		break;
 80010c8:	e005      	b.n	80010d6 <Modbus_Protocal_Worker+0x202>
		break;
 80010ca:	bf00      	nop
 80010cc:	e004      	b.n	80010d8 <Modbus_Protocal_Worker+0x204>
		break;
 80010ce:	bf00      	nop
 80010d0:	e002      	b.n	80010d8 <Modbus_Protocal_Worker+0x204>
		break;
 80010d2:	bf00      	nop
 80010d4:	e000      	b.n	80010d8 <Modbus_Protocal_Worker+0x204>
		break;
 80010d6:	bf00      	nop
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000270 	.word	0x20000270

080010e4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <modbusWrite1Register+0x80>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	7e9b      	ldrb	r3, [r3, #26]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <modbusWrite1Register+0x80>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	7edb      	ldrb	r3, [r3, #27]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4413      	add	r3, r2
 8001100:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <modbusWrite1Register+0x80>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	429a      	cmp	r2, r3
 800110c:	d903      	bls.n	8001116 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800110e:	2002      	movs	r0, #2
 8001110:	f000 f8a4 	bl	800125c <ModbusErrorReply>
			 return;
 8001114:	e023      	b.n	800115e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <modbusWrite1Register+0x80>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <modbusWrite1Register+0x80>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6859      	ldr	r1, [r3, #4]
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	440b      	add	r3, r1
 8001126:	7f12      	ldrb	r2, [r2, #28]
 8001128:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <modbusWrite1Register+0x80>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <modbusWrite1Register+0x80>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6859      	ldr	r1, [r3, #4]
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	440b      	add	r3, r1
 800113a:	7f52      	ldrb	r2, [r2, #29]
 800113c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <modbusWrite1Register+0x80>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <modbusWrite1Register+0x80>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800114c:	2208      	movs	r2, #8
 800114e:	4619      	mov	r1, r3
 8001150:	f005 fca6 	bl	8006aa0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <modbusWrite1Register+0x80>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2205      	movs	r2, #5
 800115a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000270 	.word	0x20000270

08001168 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <modbusRead1Register+0xf0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	7f1b      	ldrb	r3, [r3, #28]
 8001174:	b29b      	uxth	r3, r3
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <modbusRead1Register+0xf0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	7f5b      	ldrb	r3, [r3, #29]
 8001180:	b29b      	uxth	r3, r3
 8001182:	4413      	add	r3, r2
 8001184:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <modbusRead1Register+0xf0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7e9b      	ldrb	r3, [r3, #26]
 800118c:	b29b      	uxth	r3, r3
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <modbusRead1Register+0xf0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	7edb      	ldrb	r3, [r3, #27]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4413      	add	r3, r2
 800119c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <modbusRead1Register+0x42>
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2b7d      	cmp	r3, #125	; 0x7d
 80011a8:	d903      	bls.n	80011b2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f856 	bl	800125c <ModbusErrorReply>
		 return;
 80011b0:	e04e      	b.n	8001250 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80011b2:	88ba      	ldrh	r2, [r7, #4]
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <modbusRead1Register+0xf0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d808      	bhi.n	80011d0 <modbusRead1Register+0x68>
 80011be:	88ba      	ldrh	r2, [r7, #4]
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	4413      	add	r3, r2
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <modbusRead1Register+0xf0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d903      	bls.n	80011d8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f000 f843 	bl	800125c <ModbusErrorReply>
		 return;
 80011d6:	e03b      	b.n	8001250 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <modbusRead1Register+0xf0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2203      	movs	r2, #3
 80011de:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <modbusRead1Register+0xf0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	0052      	lsls	r2, r2, #1
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80011f2:	2400      	movs	r4, #0
 80011f4:	e020      	b.n	8001238 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <modbusRead1Register+0xf0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	4423      	add	r3, r4
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	18d1      	adds	r1, r2, r3
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <modbusRead1Register+0xf0>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	1c63      	adds	r3, r4, #1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	7849      	ldrb	r1, [r1, #1]
 800120e:	4413      	add	r3, r2
 8001210:	460a      	mov	r2, r1
 8001212:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <modbusRead1Register+0xf0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	4423      	add	r3, r4
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	18d1      	adds	r1, r2, r3
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <modbusRead1Register+0xf0>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	0063      	lsls	r3, r4, #1
 800122a:	3303      	adds	r3, #3
 800122c:	7809      	ldrb	r1, [r1, #0]
 800122e:	4413      	add	r3, r2
 8001230:	460a      	mov	r2, r1
 8001232:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001236:	3401      	adds	r4, #1
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	429c      	cmp	r4, r3
 800123c:	dbdb      	blt.n	80011f6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <modbusRead1Register+0xf0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	0052      	lsls	r2, r2, #1
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}
 8001256:	bf00      	nop
 8001258:	20000270 	.word	0x20000270

0800125c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <ModbusErrorReply+0x40>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	7e5a      	ldrb	r2, [r3, #25]
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <ModbusErrorReply+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <ModbusErrorReply+0x40>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <ModbusErrorReply+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2202      	movs	r2, #2
 800128a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000270 	.word	0x20000270

080012a0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <Modbus_frame_response+0x2c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	7e5b      	ldrb	r3, [r3, #25]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d004      	beq.n	80012b8 <Modbus_frame_response+0x18>
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d105      	bne.n	80012be <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80012b2:	f7ff ff17 	bl	80010e4 <modbusWrite1Register>
		break;
 80012b6:	e006      	b.n	80012c6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80012b8:	f7ff ff56 	bl	8001168 <modbusRead1Register>
		break;
 80012bc:	e003      	b.n	80012c6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff ffcc 	bl	800125c <ModbusErrorReply>
		break;
 80012c4:	bf00      	nop

	}
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000270 	.word	0x20000270

080012d0 <Modbus_Emission>:

void Modbus_Emission()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <Modbus_Emission+0xfc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d15e      	bne.n	80013a4 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <Modbus_Emission+0xfc>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <Modbus_Emission+0xfc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80012f4:	4b35      	ldr	r3, [pc, #212]	; (80013cc <Modbus_Emission+0xfc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80012fc:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <Modbus_Emission+0xfc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <Modbus_Emission+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800130e:	461a      	mov	r2, r3
 8001310:	f005 fbc6 	bl	8006aa0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <Modbus_Emission+0xfc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <Modbus_Emission+0xfc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3203      	adds	r2, #3
 8001324:	b292      	uxth	r2, r2
 8001326:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <Modbus_Emission+0xfc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <Modbus_Emission+0xfc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800133a:	3b02      	subs	r3, #2
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f7ff fd92 	bl	8000e68 <CRC16>
 8001344:	4603      	mov	r3, r0
 8001346:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <Modbus_Emission+0xfc>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <Modbus_Emission+0xfc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001354:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001356:	7939      	ldrb	r1, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	460a      	mov	r2, r1
 800135c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <Modbus_Emission+0xfc>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <Modbus_Emission+0xfc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800136c:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800136e:	7979      	ldrb	r1, [r7, #5]
 8001370:	4413      	add	r3, r2
 8001372:	460a      	mov	r2, r1
 8001374:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <Modbus_Emission+0xfc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b20      	cmp	r3, #32
 8001386:	d10d      	bne.n	80013a4 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <Modbus_Emission+0xfc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <Modbus_Emission+0xfc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <Modbus_Emission+0xfc>)
 8001398:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800139a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800139e:	461a      	mov	r2, r3
 80013a0:	f004 f9f2 	bl	8005788 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <Modbus_Emission+0xfc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <Modbus_Emission+0xfc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2200      	movs	r2, #0
 80013b2:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <Modbus_Emission+0xfc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2200      	movs	r2, #0
 80013ba:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <Modbus_Emission+0xfc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2202      	movs	r2, #2
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000270 	.word	0x20000270

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f000 ff27 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f843 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013de:	f000 fa0d 	bl	80017fc <MX_GPIO_Init>
  MX_DMA_Init();
 80013e2:	f000 f9d5 	bl	8001790 <MX_DMA_Init>
  MX_ADC1_Init();
 80013e6:	f000 f8a5 	bl	8001534 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 f9a5 	bl	8001738 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80013ee:	f000 f94f 	bl	8001690 <MX_TIM11_Init>
  MX_TIM5_Init();
 80013f2:	f000 f8ff 	bl	80015f4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //nine holes of tray-----------------
  //here for change x,y,degrees--------
  float32_t test[2] = {0,0};
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  HolePositionsCartesian(test, 0);
 8001402:	463b      	mov	r3, r7
 8001404:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001448 <main+0x78>
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fa71 	bl	80018f0 <HolePositionsCartesian>
  //-----------------------------------
  //joy stick--------------------------
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawData, 20);
 800140e:	2214      	movs	r2, #20
 8001410:	490e      	ldr	r1, [pc, #56]	; (800144c <main+0x7c>)
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <main+0x80>)
 8001414:	f000 ffbe 	bl	8002394 <HAL_ADC_Start_DMA>
  hmodbus.huart = &huart2;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <main+0x84>)
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <main+0x88>)
 800141c:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <main+0x84>)
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <main+0x8c>)
 8001422:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <main+0x84>)
 8001426:	2215      	movs	r2, #21
 8001428:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <main+0x84>)
 800142c:	22c8      	movs	r2, #200	; 0xc8
 800142e:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001430:	490b      	ldr	r1, [pc, #44]	; (8001460 <main+0x90>)
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <main+0x84>)
 8001434:	f7ff fcc2 	bl	8000dbc <Modbus_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 8001438:	f7ff fd4c 	bl	8000ed4 <Modbus_Protocal_Worker>
//	  int64_t currentTime = micros();
//	  if(currentTime > timestamp)
//	  {
//		  timestamp = currentTime + 1000; //1000 microsecond = 0.001 second = 1000Hz

		  GetJoystickXYaxisValue();
 800143c:	f000 fb12 	bl	8001a64 <GetJoystickXYaxisValue>

		  JoyStickControlCartesian();
 8001440:	f000 fba0 	bl	8001b84 <JoyStickControlCartesian>
	  Modbus_Protocal_Worker();
 8001444:	e7f8      	b.n	8001438 <main+0x68>
 8001446:	bf00      	nop
 8001448:	00000000 	.word	0x00000000
 800144c:	20000c50 	.word	0x20000c50
 8001450:	20000274 	.word	0x20000274
 8001454:	200005e8 	.word	0x200005e8
 8001458:	20000484 	.word	0x20000484
 800145c:	200003d0 	.word	0x200003d0
 8001460:	20000ac0 	.word	0x20000ac0

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	; 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f005 fb22 	bl	8006abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <SystemClock_Config+0xc8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a26      	ldr	r2, [pc, #152]	; (800152c <SystemClock_Config+0xc8>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <SystemClock_Config+0xc8>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <SystemClock_Config+0xcc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a20      	ldr	r2, [pc, #128]	; (8001530 <SystemClock_Config+0xcc>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <SystemClock_Config+0xcc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c8:	2310      	movs	r3, #16
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014d8:	2364      	movs	r3, #100	; 0x64
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e0:	2304      	movs	r3, #4
 80014e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 f9e7 	bl	80038bc <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f4:	f000 fb8a 	bl	8001c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2103      	movs	r1, #3
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fc49 	bl	8003dac <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001520:	f000 fb74 	bl	8001c0c <Error_Handler>
  }
}
 8001524:	bf00      	nop
 8001526:	3750      	adds	r7, #80	; 0x50
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153a:	463b      	mov	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001548:	4a28      	ldr	r2, [pc, #160]	; (80015ec <MX_ADC1_Init+0xb8>)
 800154a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <MX_ADC1_Init+0xb4>)
 800154e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001552:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <MX_ADC1_Init+0xb4>)
 800155c:	2201      	movs	r2, #1
 800155e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001562:	2201      	movs	r2, #1
 8001564:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001570:	2200      	movs	r2, #0
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <MX_ADC1_Init+0xbc>)
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_ADC1_Init+0xb4>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001582:	2202      	movs	r2, #2
 8001584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001590:	2201      	movs	r2, #1
 8001592:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001594:	4814      	ldr	r0, [pc, #80]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001596:	f000 feb9 	bl	800230c <HAL_ADC_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015a0:	f000 fb34 	bl	8001c0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015ac:	2303      	movs	r3, #3
 80015ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <MX_ADC1_Init+0xb4>)
 80015b6:	f000 fffb 	bl	80025b0 <HAL_ADC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015c0:	f000 fb24 	bl	8001c0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_ADC1_Init+0xb4>)
 80015d2:	f000 ffed 	bl	80025b0 <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015dc:	f000 fb16 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000274 	.word	0x20000274
 80015ec:	40012000 	.word	0x40012000
 80015f0:	0f000001 	.word	0x0f000001

080015f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM5_Init+0x94>)
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <MX_TIM5_Init+0x98>)
 8001614:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_TIM5_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_TIM5_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_TIM5_Init+0x94>)
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_TIM5_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_TIM5_Init+0x94>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <MX_TIM5_Init+0x94>)
 8001638:	f002 fdd8 	bl	80041ec <HAL_TIM_Base_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001642:	f000 fae3 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_TIM5_Init+0x94>)
 8001654:	f003 f940 	bl	80048d8 <HAL_TIM_ConfigClockSource>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 fad5 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_TIM5_Init+0x94>)
 8001670:	f003 fecc 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800167a:	f000 fac7 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000031c 	.word	0x2000031c
 800168c:	40000c00 	.word	0x40000c00

08001690 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <MX_TIM11_Init+0xa4>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016b0:	2263      	movs	r2, #99	; 0x63
 80016b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016bc:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80016c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016d0:	f002 fd8c 	bl	80041ec <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80016da:	f000 fa97 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80016de:	4814      	ldr	r0, [pc, #80]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016e0:	f002 fe42 	bl	8004368 <HAL_TIM_OC_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80016ea:	f000 fa8f 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80016ee:	2108      	movs	r1, #8
 80016f0:	480f      	ldr	r0, [pc, #60]	; (8001730 <MX_TIM11_Init+0xa0>)
 80016f2:	f002 fe9f 	bl	8004434 <HAL_TIM_OnePulse_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80016fc:	f000 fa86 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001700:	2310      	movs	r3, #16
 8001702:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001704:	f240 5399 	movw	r3, #1433	; 0x599
 8001708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_TIM11_Init+0xa0>)
 800171a:	f003 f881 	bl	8004820 <HAL_TIM_OC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001724:	f000 fa72 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200003d0 	.word	0x200003d0
 8001734:	40014800 	.word	0x40014800

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_USART2_UART_Init+0x50>)
 800173e:	4a13      	ldr	r2, [pc, #76]	; (800178c <MX_USART2_UART_Init+0x54>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001744:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_USART2_UART_Init+0x50>)
 800174c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001750:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <MX_USART2_UART_Init+0x50>)
 800175a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_USART2_UART_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001774:	f003 fed6 	bl	8005524 <HAL_UART_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800177e:	f000 fa45 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000484 	.word	0x20000484
 800178c:	40004400 	.word	0x40004400

08001790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_DMA_Init+0x68>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <MX_DMA_Init+0x68>)
 80017a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_DMA_Init+0x68>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <MX_DMA_Init+0x68>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <MX_DMA_Init+0x68>)
 80017bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <MX_DMA_Init+0x68>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2011      	movs	r0, #17
 80017d4:	f001 fa77 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017d8:	2011      	movs	r0, #17
 80017da:	f001 fa90 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2038      	movs	r0, #56	; 0x38
 80017e4:	f001 fa6f 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017e8:	2038      	movs	r0, #56	; 0x38
 80017ea:	f001 fa88 	bl	8002cfe <HAL_NVIC_EnableIRQ>

}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <MX_GPIO_Init+0xe8>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <MX_GPIO_Init+0xe8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <MX_GPIO_Init+0xe8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_GPIO_Init+0xe8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2120      	movs	r1, #32
 8001886:	4818      	ldr	r0, [pc, #96]	; (80018e8 <MX_GPIO_Init+0xec>)
 8001888:	f001 fffe 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001892:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4812      	ldr	r0, [pc, #72]	; (80018ec <MX_GPIO_Init+0xf0>)
 80018a4:	f001 fe54 	bl	8003550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018a8:	2302      	movs	r3, #2
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_GPIO_Init+0xf0>)
 80018bc:	f001 fe48 	bl	8003550 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018c0:	2320      	movs	r3, #32
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_GPIO_Init+0xec>)
 80018d8:	f001 fe3a 	bl	8003550 <HAL_GPIO_Init>

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020800 	.word	0x40020800

080018f0 <HolePositionsCartesian>:
uint64_t micros()
{
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
}
void HolePositionsCartesian(float32_t* bottomleft, float32_t rotationAngleDegrees)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	ed87 0a00 	vstr	s0, [r7]
        30, 40,
        50, 40
    };

    // Convert rotation angle to radians
    float32_t rotationAngleRadian = rotationAngleDegrees * (PI / 180.0);
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f7fe fdcf 	bl	80004a0 <__aeabi_f2d>
 8001902:	a356      	add	r3, pc, #344	; (adr r3, 8001a5c <HolePositionsCartesian+0x16c>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe22 	bl	8000550 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f82e 	bl	8000974 <__aeabi_d2f>
 8001918:	4603      	mov	r3, r0
 800191a:	61bb      	str	r3, [r7, #24]
    float32_t rotationMatrix[4] =
    {
    		arm_cos_f32(rotationAngleRadian),   //0
 800191c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001920:	f000 fb7a 	bl	8002018 <arm_cos_f32>
 8001924:	eef0 7a40 	vmov.f32	s15, s0
    float32_t rotationMatrix[4] =
 8001928:	edc7 7a02 	vstr	s15, [r7, #8]
			-arm_sin_f32(rotationAngleRadian),  //1
 800192c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001930:	f000 fbf8 	bl	8002124 <arm_sin_f32>
 8001934:	eef0 7a40 	vmov.f32	s15, s0
 8001938:	eef1 7a67 	vneg.f32	s15, s15
    float32_t rotationMatrix[4] =
 800193c:	edc7 7a03 	vstr	s15, [r7, #12]
			arm_sin_f32(rotationAngleRadian),   //2
 8001940:	ed97 0a06 	vldr	s0, [r7, #24]
 8001944:	f000 fbee 	bl	8002124 <arm_sin_f32>
 8001948:	eef0 7a40 	vmov.f32	s15, s0
    float32_t rotationMatrix[4] =
 800194c:	edc7 7a04 	vstr	s15, [r7, #16]
			arm_cos_f32(rotationAngleRadian)    //3
 8001950:	ed97 0a06 	vldr	s0, [r7, #24]
 8001954:	f000 fb60 	bl	8002018 <arm_cos_f32>
 8001958:	eef0 7a40 	vmov.f32	s15, s0
    float32_t rotationMatrix[4] =
 800195c:	edc7 7a05 	vstr	s15, [r7, #20]
    };

    for (int i = 0; i < 9; i++)
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	e06c      	b.n	8001a40 <HolePositionsCartesian+0x150>
    {
    	//xy
    	holePositionsCartesianadded[i*2] = holePositionsRelativetoBottomLeft[i*2] + bottomleft[0];
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4a39      	ldr	r2, [pc, #228]	; (8001a50 <HolePositionsCartesian+0x160>)
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <HolePositionsCartesian+0x164>)
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	edc3 7a00 	vstr	s15, [r3]
    	holePositionsCartesianadded[i*2+1] = holePositionsRelativetoBottomLeft[i*2+1] + bottomleft[1];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	3301      	adds	r3, #1
 8001992:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <HolePositionsCartesian+0x160>)
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	3301      	adds	r3, #1
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HolePositionsCartesian+0x164>)
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	edc3 7a00 	vstr	s15, [r3]

    	//degrees
        holePositionsCartesian[i*2] = (holePositionsCartesianadded[i*2] * rotationMatrix[0]) + (holePositionsCartesianadded[i*2+1] * rotationMatrix[2]);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <HolePositionsCartesian+0x164>)
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	ed93 7a00 	vldr	s14, [r3]
 80019c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <HolePositionsCartesian+0x164>)
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	edd3 6a00 	vldr	s13, [r3]
 80019de:	edd7 7a04 	vldr	s15, [r7, #16]
 80019e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HolePositionsCartesian+0x168>)
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	edc3 7a00 	vstr	s15, [r3]
        holePositionsCartesian[i*2+1] = (holePositionsCartesianadded[i*2] * rotationMatrix[1]) + (holePositionsCartesianadded[i*2+1] * rotationMatrix[3]);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <HolePositionsCartesian+0x164>)
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HolePositionsCartesian+0x164>)
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	edd3 6a00 	vldr	s13, [r3]
 8001a1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HolePositionsCartesian+0x168>)
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 9; i++)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	dd8f      	ble.n	8001966 <HolePositionsCartesian+0x76>
    }

}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000200 	.word	0x20000200
 8001a54:	200005a0 	.word	0x200005a0
 8001a58:	20000558 	.word	0x20000558
 8001a5c:	aaaaaaab 	.word	0xaaaaaaab
 8001a60:	3f91df46 	.word	0x3f91df46

08001a64 <GetJoystickXYaxisValue>:
void GetJoystickXYaxisValue()
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
	JoyStickSwitch = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	483b      	ldr	r0, [pc, #236]	; (8001b5c <GetJoystickXYaxisValue+0xf8>)
 8001a6e:	f001 fef3 	bl	8003858 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <GetJoystickXYaxisValue+0xfc>)
 8001a78:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 20; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	e060      	b.n	8001b42 <GetJoystickXYaxisValue+0xde>
	{
		if(i % 2 == 0)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d127      	bne.n	8001ada <GetJoystickXYaxisValue+0x76>
		{
			IN1[i/2] = adcRawData[i];
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0fda      	lsrs	r2, r3, #31
 8001a8e:	4413      	add	r3, r2
 8001a90:	105b      	asrs	r3, r3, #1
 8001a92:	4619      	mov	r1, r3
 8001a94:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <GetJoystickXYaxisValue+0x100>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <GetJoystickXYaxisValue+0x104>)
 8001a9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			Y_axis += IN1[i/2];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	0fda      	lsrs	r2, r3, #31
 8001aa6:	4413      	add	r3, r2
 8001aa8:	105b      	asrs	r3, r3, #1
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <GetJoystickXYaxisValue+0x104>)
 8001aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab2:	4a2e      	ldr	r2, [pc, #184]	; (8001b6c <GetJoystickXYaxisValue+0x108>)
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <GetJoystickXYaxisValue+0x108>)
 8001abc:	601a      	str	r2, [r3, #0]
			if(i == 18)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d13b      	bne.n	8001b3c <GetJoystickXYaxisValue+0xd8>
			{
				joystickYaxis = Y_axis/10;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <GetJoystickXYaxisValue+0x108>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <GetJoystickXYaxisValue+0x10c>)
 8001aca:	fb82 1203 	smull	r1, r2, r2, r3
 8001ace:	1092      	asrs	r2, r2, #2
 8001ad0:	17db      	asrs	r3, r3, #31
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <GetJoystickXYaxisValue+0x110>)
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e030      	b.n	8001b3c <GetJoystickXYaxisValue+0xd8>
			}
		}
		else if(i % 2 == 1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	bfb8      	it	lt
 8001ae4:	425b      	neglt	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d128      	bne.n	8001b3c <GetJoystickXYaxisValue+0xd8>
		{
			IN0[(i-1)/2] = adcRawData[i];
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	0fda      	lsrs	r2, r3, #31
 8001af0:	4413      	add	r3, r2
 8001af2:	105b      	asrs	r3, r3, #1
 8001af4:	4619      	mov	r1, r3
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <GetJoystickXYaxisValue+0x100>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <GetJoystickXYaxisValue+0x114>)
 8001b00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			X_axis += IN0[(i-1)/2];
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	0fda      	lsrs	r2, r3, #31
 8001b0a:	4413      	add	r3, r2
 8001b0c:	105b      	asrs	r3, r3, #1
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <GetJoystickXYaxisValue+0x114>)
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <GetJoystickXYaxisValue+0x118>)
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <GetJoystickXYaxisValue+0x118>)
 8001b20:	601a      	str	r2, [r3, #0]
			if(i == 19)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b13      	cmp	r3, #19
 8001b26:	d109      	bne.n	8001b3c <GetJoystickXYaxisValue+0xd8>
			{
				joystickXaxis = X_axis/10;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <GetJoystickXYaxisValue+0x118>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <GetJoystickXYaxisValue+0x10c>)
 8001b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b32:	1092      	asrs	r2, r2, #2
 8001b34:	17db      	asrs	r3, r3, #31
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <GetJoystickXYaxisValue+0x11c>)
 8001b3a:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 20; i++)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b13      	cmp	r3, #19
 8001b46:	dd9b      	ble.n	8001a80 <GetJoystickXYaxisValue+0x1c>
			}
		}
	} X_axis = 0;  Y_axis = 0;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <GetJoystickXYaxisValue+0x118>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <GetJoystickXYaxisValue+0x108>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	20000cf0 	.word	0x20000cf0
 8001b64:	20000c50 	.word	0x20000c50
 8001b68:	20000cc8 	.word	0x20000cc8
 8001b6c:	20000cf8 	.word	0x20000cf8
 8001b70:	66666667 	.word	0x66666667
 8001b74:	20000d00 	.word	0x20000d00
 8001b78:	20000ca0 	.word	0x20000ca0
 8001b7c:	20000cf4 	.word	0x20000cf4
 8001b80:	20000cfc 	.word	0x20000cfc

08001b84 <JoyStickControlCartesian>:

void JoyStickControlCartesian()
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	if(joystickXaxis > 3120) //left
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <JoyStickControlCartesian+0x74>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f5b3 6f43 	cmp.w	r3, #3120	; 0xc30
	}
	else if(joystickXaxis < 3000) //right
	{

	}
	if(joystickYaxis < 3000) //front
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <JoyStickControlCartesian+0x78>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	dc03      	bgt.n	8001ba4 <JoyStickControlCartesian+0x20>
	{
		PulseWithModuation = 1000;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <JoyStickControlCartesian+0x7c>)
 8001b9e:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <JoyStickControlCartesian+0x80>)
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e008      	b.n	8001bb6 <JoyStickControlCartesian+0x32>
	}
	else if(joystickYaxis > 3100) //back
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <JoyStickControlCartesian+0x78>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001bac:	4293      	cmp	r3, r2
 8001bae:	dd02      	ble.n	8001bb6 <JoyStickControlCartesian+0x32>
	{
		PulseWithModuation = -1000;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <JoyStickControlCartesian+0x7c>)
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <JoyStickControlCartesian+0x84>)
 8001bb4:	601a      	str	r2, [r3, #0]
	}
	if(joystickXaxis > 3090 && joystickXaxis < 3110 && joystickYaxis > 3020 && joystickYaxis < 3040)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <JoyStickControlCartesian+0x74>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f640 4212 	movw	r2, #3090	; 0xc12
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	dd14      	ble.n	8001bec <JoyStickControlCartesian+0x68>
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <JoyStickControlCartesian+0x74>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f640 4225 	movw	r2, #3109	; 0xc25
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	dc0e      	bgt.n	8001bec <JoyStickControlCartesian+0x68>
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <JoyStickControlCartesian+0x78>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f640 32cc 	movw	r2, #3020	; 0xbcc
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	dd08      	ble.n	8001bec <JoyStickControlCartesian+0x68>
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <JoyStickControlCartesian+0x78>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f5b3 6f3e 	cmp.w	r3, #3040	; 0xbe0
 8001be2:	da03      	bge.n	8001bec <JoyStickControlCartesian+0x68>
	{
		PulseWithModuation = 0;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <JoyStickControlCartesian+0x7c>)
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
	}
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000cfc 	.word	0x20000cfc
 8001bfc:	20000d00 	.word	0x20000d00
 8001c00:	20000d04 	.word	0x20000d04
 8001c04:	447a0000 	.word	0x447a0000
 8001c08:	c47a0000 	.word	0xc47a0000

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <Error_Handler+0x8>
	...

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c56:	2007      	movs	r0, #7
 8001c58:	f001 f82a 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <HAL_ADC_MspInit+0xdc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d157      	bne.n	8001d3a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_ADC_MspInit+0xe0>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a2d      	ldr	r2, [pc, #180]	; (8001d48 <HAL_ADC_MspInit+0xe0>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_ADC_MspInit+0xe0>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_ADC_MspInit+0xe0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <HAL_ADC_MspInit+0xe0>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_ADC_MspInit+0xe0>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481d      	ldr	r0, [pc, #116]	; (8001d4c <HAL_ADC_MspInit+0xe4>)
 8001cd6:	f001 fc3b 	bl	8003550 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <HAL_ADC_MspInit+0xec>)
 8001cde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001cfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001d04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d1e:	480c      	ldr	r0, [pc, #48]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001d20:	f001 f808 	bl	8002d34 <HAL_DMA_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d2a:	f7ff ff6f 	bl	8001c0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_ADC_MspInit+0xe8>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40012000 	.word	0x40012000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	200002bc 	.word	0x200002bc
 8001d54:	40026410 	.word	0x40026410

08001d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <HAL_TIM_Base_MspInit+0x80>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d116      	bne.n	8001d98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_TIM_Base_MspInit+0x84>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <HAL_TIM_Base_MspInit+0x84>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_TIM_Base_MspInit+0x84>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2032      	movs	r0, #50	; 0x32
 8001d8c:	f000 ff9b 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d90:	2032      	movs	r0, #50	; 0x32
 8001d92:	f000 ffb4 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001d96:	e01a      	b.n	8001dce <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <HAL_TIM_Base_MspInit+0x88>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d115      	bne.n	8001dce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_TIM_Base_MspInit+0x84>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_TIM_Base_MspInit+0x84>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_TIM_Base_MspInit+0x84>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	201a      	movs	r0, #26
 8001dc4:	f000 ff7f 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001dc8:	201a      	movs	r0, #26
 8001dca:	f000 ff98 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40000c00 	.word	0x40000c00
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40014800 	.word	0x40014800

08001de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <HAL_UART_MspInit+0xf0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d161      	bne.n	8001eca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a32      	ldr	r2, [pc, #200]	; (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_UART_MspInit+0xf4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e3e:	230c      	movs	r3, #12
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4820      	ldr	r0, [pc, #128]	; (8001edc <HAL_UART_MspInit+0xf8>)
 8001e5a:	f001 fb79 	bl	8003550 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <HAL_UART_MspInit+0x100>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e9e:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001ea0:	f000 ff48 	bl	8002d34 <HAL_DMA_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001eaa:	f7ff feaf 	bl	8001c0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_UART_MspInit+0xfc>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2026      	movs	r0, #38	; 0x26
 8001ec0:	f000 ff01 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec4:	2026      	movs	r0, #38	; 0x26
 8001ec6:	f000 ff1a 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	200004f8 	.word	0x200004f8
 8001ee4:	400260a0 	.word	0x400260a0

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x4>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f34:	f000 f9ca 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <DMA1_Stream6_IRQHandler+0x10>)
 8001f42:	f001 f88f 	bl	8003064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200004f8 	.word	0x200004f8

08001f50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f56:	f002 fb3b 	bl	80045d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003d0 	.word	0x200003d0

08001f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <USART2_IRQHandler+0x10>)
 8001f6a:	f003 fd2f 	bl	80059cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000484 	.word	0x20000484

08001f78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM5_IRQHandler+0x10>)
 8001f7e:	f002 fb27 	bl	80045d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000031c 	.word	0x2000031c

08001f8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <DMA2_Stream0_IRQHandler+0x10>)
 8001f92:	f001 f867 	bl	8003064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200002bc 	.word	0x200002bc

08001fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fca:	490e      	ldr	r1, [pc, #56]	; (8002004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0b      	ldr	r2, [pc, #44]	; (800200c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe0:	4c0b      	ldr	r4, [pc, #44]	; (8002010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fee:	f7ff ffd7 	bl	8001fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f004 fd31 	bl	8006a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7ff f9eb 	bl	80013d0 <main>
  bx  lr    
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002008:	08007318 	.word	0x08007318
  ldr r2, =_sbss
 800200c:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8002010:	20000d0c 	.word	0x20000d0c

08002014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC_IRQHandler>
	...

08002018 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 8002018:	b480      	push	{r7}
 800201a:	b08b      	sub	sp, #44	; 0x2c
 800201c:	af00      	add	r7, sp, #0
 800201e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8002022:	edd7 7a01 	vldr	s15, [r7, #4]
 8002026:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002118 <arm_cos_f32+0x100>
 800202a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002036:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800203a:	edd7 7a06 	vldr	s15, [r7, #24]
 800203e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002042:	ee17 3a90 	vmov	r3, s15
 8002046:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8002048:	edd7 7a06 	vldr	s15, [r7, #24]
 800204c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002054:	d502      	bpl.n	800205c <arm_cos_f32+0x44>
  {
    n--;
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	3b01      	subs	r3, #1
 800205a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002066:	ed97 7a06 	vldr	s14, [r7, #24]
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8002072:	edd7 7a06 	vldr	s15, [r7, #24]
 8002076:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800211c <arm_cos_f32+0x104>
 800207a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8002082:	edd7 7a07 	vldr	s15, [r7, #28]
 8002086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208a:	ee17 3a90 	vmov	r3, s15
 800208e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8002090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002096:	d309      	bcc.n	80020ac <arm_cos_f32+0x94>
    index = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800209c:	edd7 7a07 	vldr	s15, [r7, #28]
 80020a0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800211c <arm_cos_f32+0x104>
 80020a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020a8:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80020ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020be:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 80020c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020c4:	4a16      	ldr	r2, [pc, #88]	; (8002120 <arm_cos_f32+0x108>)
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80020ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020d0:	3301      	adds	r3, #1
 80020d2:	4a13      	ldr	r2, [pc, #76]	; (8002120 <arm_cos_f32+0x108>)
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 80020dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f0:	edd7 6a05 	vldr	s13, [r7, #20]
 80020f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002100:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	ee07 3a90 	vmov	s15, r3
}
 800210a:	eeb0 0a67 	vmov.f32	s0, s15
 800210e:	372c      	adds	r7, #44	; 0x2c
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	3e22f983 	.word	0x3e22f983
 800211c:	44000000 	.word	0x44000000
 8002120:	08006afc 	.word	0x08006afc

08002124 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8002124:	b480      	push	{r7}
 8002126:	b08b      	sub	sp, #44	; 0x2c
 8002128:	af00      	add	r7, sp, #0
 800212a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800212e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002132:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800221c <arm_sin_f32+0xf8>
 8002136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800213e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002146:	ee17 3a90 	vmov	r3, s15
 800214a:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800214c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	d502      	bpl.n	8002160 <arm_sin_f32+0x3c>
  {
    n--;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	3b01      	subs	r3, #1
 800215e:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216a:	ed97 7a06 	vldr	s14, [r7, #24]
 800216e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002172:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8002176:	edd7 7a06 	vldr	s15, [r7, #24]
 800217a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002220 <arm_sin_f32+0xfc>
 800217e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8002186:	edd7 7a07 	vldr	s15, [r7, #28]
 800218a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800218e:	ee17 3a90 	vmov	r3, s15
 8002192:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8002194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219a:	d309      	bcc.n	80021b0 <arm_sin_f32+0x8c>
    index = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80021a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80021a4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002220 <arm_sin_f32+0xfc>
 80021a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021ac:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80021b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80021be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c2:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 80021c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021c8:	4a16      	ldr	r2, [pc, #88]	; (8002224 <arm_sin_f32+0x100>)
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80021d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021d4:	3301      	adds	r3, #1
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <arm_sin_f32+0x100>)
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 80021e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f4:	edd7 6a05 	vldr	s13, [r7, #20]
 80021f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	ee07 3a90 	vmov	s15, r3
}
 800220e:	eeb0 0a67 	vmov.f32	s0, s15
 8002212:	372c      	adds	r7, #44	; 0x2c
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	3e22f983 	.word	0x3e22f983
 8002220:	44000000 	.word	0x44000000
 8002224:	08006afc 	.word	0x08006afc

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <HAL_Init+0x40>)
 8002232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <HAL_Init+0x40>)
 800223e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_Init+0x40>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 fd2d 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f808 	bl	800226c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225c:	f7ff fcdc 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x54>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x58>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002282:	fbb3 f3f1 	udiv	r3, r3, r1
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fd45 	bl	8002d1a <HAL_SYSTICK_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00e      	b.n	80022b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b0f      	cmp	r3, #15
 800229e:	d80a      	bhi.n	80022b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a0:	2200      	movs	r2, #0
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f000 fd0d 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <HAL_InitTick+0x5c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000248 	.word	0x20000248
 80022c4:	20000250 	.word	0x20000250
 80022c8:	2000024c 	.word	0x2000024c

080022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x20>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x24>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_IncTick+0x24>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000250 	.word	0x20000250
 80022f0:	20000d08 	.word	0x20000d08

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000d08 	.word	0x20000d08

0800230c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e033      	b.n	800238a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fc9c 	bl	8001c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d118      	bne.n	800237c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002352:	f023 0302 	bic.w	r3, r3, #2
 8002356:	f043 0202 	orr.w	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa58 	bl	8002814 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
 800237a:	e001      	b.n	8002380 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_Start_DMA+0x1e>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e0ce      	b.n	8002550 <HAL_ADC_Start_DMA+0x1bc>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d018      	beq.n	80023fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023d8:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_ADC_Start_DMA+0x1c4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a5f      	ldr	r2, [pc, #380]	; (800255c <HAL_ADC_Start_DMA+0x1c8>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0c9a      	lsrs	r2, r3, #18
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002408:	d107      	bne.n	800241a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002418:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 8086 	bne.w	8002536 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002454:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002468:	d106      	bne.n	8002478 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f023 0206 	bic.w	r2, r3, #6
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
 8002476:	e002      	b.n	800247e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_ADC_Start_DMA+0x1cc>)
 8002488:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	4a35      	ldr	r2, [pc, #212]	; (8002564 <HAL_ADC_Start_DMA+0x1d0>)
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	4a34      	ldr	r2, [pc, #208]	; (8002568 <HAL_ADC_Start_DMA+0x1d4>)
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	4a33      	ldr	r2, [pc, #204]	; (800256c <HAL_ADC_Start_DMA+0x1d8>)
 80024a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	334c      	adds	r3, #76	; 0x4c
 80024d6:	4619      	mov	r1, r3
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f000 fcd8 	bl	8002e90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10f      	bne.n	800250c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d129      	bne.n	800254e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	e020      	b.n	800254e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_ADC_Start_DMA+0x1dc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d11b      	bne.n	800254e <HAL_ADC_Start_DMA+0x1ba>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d114      	bne.n	800254e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e00b      	b.n	800254e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0210 	orr.w	r2, r3, #16
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f043 0201 	orr.w	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000248 	.word	0x20000248
 800255c:	431bde83 	.word	0x431bde83
 8002560:	40012300 	.word	0x40012300
 8002564:	08002a0d 	.word	0x08002a0d
 8002568:	08002ac7 	.word	0x08002ac7
 800256c:	08002ae3 	.word	0x08002ae3
 8002570:	40012000 	.word	0x40012000

08002574 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1c>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e113      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x244>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b09      	cmp	r3, #9
 80025da:	d925      	bls.n	8002628 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68d9      	ldr	r1, [r3, #12]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	3b1e      	subs	r3, #30
 80025f2:	2207      	movs	r2, #7
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43da      	mvns	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	400a      	ands	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	4618      	mov	r0, r3
 8002614:	4603      	mov	r3, r0
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4403      	add	r3, r0
 800261a:	3b1e      	subs	r3, #30
 800261c:	409a      	lsls	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	e022      	b.n	800266e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	2207      	movs	r2, #7
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	400a      	ands	r2, r1
 800264a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6919      	ldr	r1, [r3, #16]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	4618      	mov	r0, r3
 800265e:	4603      	mov	r3, r0
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4403      	add	r3, r0
 8002664:	409a      	lsls	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b06      	cmp	r3, #6
 8002674:	d824      	bhi.n	80026c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	3b05      	subs	r3, #5
 8002688:	221f      	movs	r2, #31
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b05      	subs	r3, #5
 80026b2:	fa00 f203 	lsl.w	r2, r0, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34
 80026be:	e04c      	b.n	800275a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	d824      	bhi.n	8002712 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	3b23      	subs	r3, #35	; 0x23
 80026da:	221f      	movs	r2, #31
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3b23      	subs	r3, #35	; 0x23
 8002704:	fa00 f203 	lsl.w	r2, r0, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
 8002710:	e023      	b.n	800275a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3b41      	subs	r3, #65	; 0x41
 8002724:	221f      	movs	r2, #31
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	400a      	ands	r2, r1
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	3b41      	subs	r3, #65	; 0x41
 800274e:	fa00 f203 	lsl.w	r2, r0, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_ADC_ConfigChannel+0x250>)
 800275c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a28      	ldr	r2, [pc, #160]	; (8002804 <HAL_ADC_ConfigChannel+0x254>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d10f      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x1d8>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b12      	cmp	r3, #18
 800276e:	d10b      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_ADC_ConfigChannel+0x254>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12b      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x23a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_ADC_ConfigChannel+0x258>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <HAL_ADC_ConfigChannel+0x1f4>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b11      	cmp	r3, #17
 80027a2:	d122      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_ADC_ConfigChannel+0x258>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d111      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_ADC_ConfigChannel+0x25c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_ADC_ConfigChannel+0x260>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	0c9a      	lsrs	r2, r3, #18
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f9      	bne.n	80027de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40012300 	.word	0x40012300
 8002804:	40012000 	.word	0x40012000
 8002808:	10000012 	.word	0x10000012
 800280c:	20000248 	.word	0x20000248
 8002810:	431bde83 	.word	0x431bde83

08002814 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281c:	4b79      	ldr	r3, [pc, #484]	; (8002a04 <ADC_Init+0x1f0>)
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	021a      	lsls	r2, r3, #8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800286c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <ADC_Init+0x1f4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	e00f      	b.n	8002912 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002910:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0202 	bic.w	r2, r2, #2
 8002920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6899      	ldr	r1, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7e1b      	ldrb	r3, [r3, #24]
 800292c:	005a      	lsls	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800295e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	3b01      	subs	r3, #1
 800296c:	035a      	lsls	r2, r3, #13
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e007      	b.n	8002988 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002986:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	051a      	lsls	r2, r3, #20
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029ca:	025a      	lsls	r2, r3, #9
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	029a      	lsls	r2, r3, #10
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40012300 	.word	0x40012300
 8002a08:	0f000001 	.word	0x0f000001

08002a0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d13c      	bne.n	8002aa0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d12b      	bne.n	8002a98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d127      	bne.n	8002a98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d119      	bne.n	8002a98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0220 	bic.w	r2, r2, #32
 8002a72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fd6b 	bl	8002574 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a9e:	e00e      	b.n	8002abe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff fd75 	bl	800259c <HAL_ADC_ErrorCallback>
}
 8002ab2:	e004      	b.n	8002abe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff fd57 	bl	8002588 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff fd4a 	bl	800259c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff fad8 	bl	80022f4 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e099      	b.n	8002e84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d70:	e00f      	b.n	8002d92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d72:	f7ff fabf 	bl	80022f4 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d908      	bls.n	8002d92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e078      	b.n	8002e84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e8      	bne.n	8002d72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4b38      	ldr	r3, [pc, #224]	; (8002e8c <HAL_DMA_Init+0x158>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d107      	bne.n	8002dfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	4313      	orrs	r3, r2
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f023 0307 	bic.w	r3, r3, #7
 8002e12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d117      	bne.n	8002e56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00e      	beq.n	8002e56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb0d 	bl	8003458 <DMA_CheckFifoParam>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e52:	2301      	movs	r3, #1
 8002e54:	e016      	b.n	8002e84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fac4 	bl	80033ec <DMA_CalcBaseAndBitshift>
 8002e64:	4603      	mov	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	223f      	movs	r2, #63	; 0x3f
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	f010803f 	.word	0xf010803f

08002e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_DMA_Start_IT+0x26>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e040      	b.n	8002f38 <HAL_DMA_Start_IT+0xa8>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d12f      	bne.n	8002f2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fa56 	bl	8003390 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	223f      	movs	r2, #63	; 0x3f
 8002eea:	409a      	lsls	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0216 	orr.w	r2, r2, #22
 8002efe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e005      	b.n	8002f36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
 8002f34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f4e:	f7ff f9d1 	bl	80022f4 <HAL_GetTick>
 8002f52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e052      	b.n	8003018 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0216 	bic.w	r2, r2, #22
 8002f80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d103      	bne.n	8002fa2 <HAL_DMA_Abort+0x62>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0208 	bic.w	r2, r2, #8
 8002fb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc2:	e013      	b.n	8002fec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc4:	f7ff f996 	bl	80022f4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d90c      	bls.n	8002fec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e015      	b.n	8003018 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e4      	bne.n	8002fc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	223f      	movs	r2, #63	; 0x3f
 8003000:	409a      	lsls	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d004      	beq.n	800303e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e00c      	b.n	8003058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2205      	movs	r2, #5
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003070:	4b8e      	ldr	r3, [pc, #568]	; (80032ac <HAL_DMA_IRQHandler+0x248>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a8e      	ldr	r2, [pc, #568]	; (80032b0 <HAL_DMA_IRQHandler+0x24c>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0a9b      	lsrs	r3, r3, #10
 800307c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	2208      	movs	r2, #8
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01a      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	2208      	movs	r2, #8
 80030be:	409a      	lsls	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	2201      	movs	r2, #1
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d012      	beq.n	8003106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	2201      	movs	r2, #1
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f043 0202 	orr.w	r2, r3, #2
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	2204      	movs	r2, #4
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d012      	beq.n	800313c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	2204      	movs	r2, #4
 800312a:	409a      	lsls	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	2210      	movs	r2, #16
 8003142:	409a      	lsls	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d043      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d03c      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2210      	movs	r2, #16
 8003160:	409a      	lsls	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d018      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d024      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
 8003192:	e01f      	b.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
 80031a4:	e016      	b.n	80031d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0208 	bic.w	r2, r2, #8
 80031c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	2220      	movs	r2, #32
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 808f 	beq.w	8003304 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8087 	beq.w	8003304 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	2220      	movs	r2, #32
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b05      	cmp	r3, #5
 800320c:	d136      	bne.n	800327c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0216 	bic.w	r2, r2, #22
 800321c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800322c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_DMA_IRQHandler+0x1da>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0208 	bic.w	r2, r2, #8
 800324c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	223f      	movs	r2, #63	; 0x3f
 8003254:	409a      	lsls	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	2b00      	cmp	r3, #0
 8003270:	d07e      	beq.n	8003370 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
        }
        return;
 800327a:	e079      	b.n	8003370 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01d      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	2b00      	cmp	r3, #0
 800329e:	d031      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
 80032a8:	e02c      	b.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
 80032aa:	bf00      	nop
 80032ac:	20000248 	.word	0x20000248
 80032b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d023      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
 80032c4:	e01e      	b.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10f      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0210 	bic.w	r2, r2, #16
 80032e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	2b00      	cmp	r3, #0
 800330a:	d032      	beq.n	8003372 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d022      	beq.n	800335e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2205      	movs	r2, #5
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	3301      	adds	r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	d307      	bcc.n	800334c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f2      	bne.n	8003330 <HAL_DMA_IRQHandler+0x2cc>
 800334a:	e000      	b.n	800334e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800334c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
 800336e:	e000      	b.n	8003372 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003370:	bf00      	nop
    }
  }
}
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d108      	bne.n	80033d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ce:	e007      	b.n	80033e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	3b10      	subs	r3, #16
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <DMA_CalcBaseAndBitshift+0x64>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003406:	4a13      	ldr	r2, [pc, #76]	; (8003454 <DMA_CalcBaseAndBitshift+0x68>)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d909      	bls.n	800342e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003422:	f023 0303 	bic.w	r3, r3, #3
 8003426:	1d1a      	adds	r2, r3, #4
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	659a      	str	r2, [r3, #88]	; 0x58
 800342c:	e007      	b.n	800343e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003436:	f023 0303 	bic.w	r3, r3, #3
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	aaaaaaab 	.word	0xaaaaaaab
 8003454:	08007300 	.word	0x08007300

08003458 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11f      	bne.n	80034b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d856      	bhi.n	8003526 <DMA_CheckFifoParam+0xce>
 8003478:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <DMA_CheckFifoParam+0x28>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	08003491 	.word	0x08003491
 8003484:	080034a3 	.word	0x080034a3
 8003488:	08003491 	.word	0x08003491
 800348c:	08003527 	.word	0x08003527
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d046      	beq.n	800352a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a0:	e043      	b.n	800352a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034aa:	d140      	bne.n	800352e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b0:	e03d      	b.n	800352e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ba:	d121      	bne.n	8003500 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d837      	bhi.n	8003532 <DMA_CheckFifoParam+0xda>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <DMA_CheckFifoParam+0x70>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034d9 	.word	0x080034d9
 80034cc:	080034df 	.word	0x080034df
 80034d0:	080034d9 	.word	0x080034d9
 80034d4:	080034f1 	.word	0x080034f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
      break;
 80034dc:	e030      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d025      	beq.n	8003536 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ee:	e022      	b.n	8003536 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034f8:	d11f      	bne.n	800353a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034fe:	e01c      	b.n	800353a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d903      	bls.n	800350e <DMA_CheckFifoParam+0xb6>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d003      	beq.n	8003514 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800350c:	e018      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
      break;
 8003512:	e015      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      break;
 8003524:	e00b      	b.n	800353e <DMA_CheckFifoParam+0xe6>
      break;
 8003526:	bf00      	nop
 8003528:	e00a      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
      break;
 800352a:	bf00      	nop
 800352c:	e008      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
      break;
 800352e:	bf00      	nop
 8003530:	e006      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
      break;
 8003532:	bf00      	nop
 8003534:	e004      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
      break;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
      break;   
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <DMA_CheckFifoParam+0xe8>
      break;
 800353e:	bf00      	nop
    }
  } 
  
  return status; 
 8003540:	7bfb      	ldrb	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop

08003550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003550:	b480      	push	{r7}
 8003552:	b089      	sub	sp, #36	; 0x24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e159      	b.n	8003820 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800356c:	2201      	movs	r2, #1
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	429a      	cmp	r2, r3
 8003586:	f040 8148 	bne.w	800381a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d005      	beq.n	80035a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d130      	bne.n	8003604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	2203      	movs	r2, #3
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d8:	2201      	movs	r2, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 0201 	and.w	r2, r3, #1
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b03      	cmp	r3, #3
 800360e:	d017      	beq.n	8003640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	2203      	movs	r2, #3
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d123      	bne.n	8003694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	08da      	lsrs	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3208      	adds	r2, #8
 8003654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	220f      	movs	r2, #15
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	08da      	lsrs	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3208      	adds	r2, #8
 800368e:	69b9      	ldr	r1, [r7, #24]
 8003690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0203 	and.w	r2, r3, #3
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a2 	beq.w	800381a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	4b57      	ldr	r3, [pc, #348]	; (8003838 <HAL_GPIO_Init+0x2e8>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_GPIO_Init+0x2e8>)
 80036e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e4:	6453      	str	r3, [r2, #68]	; 0x44
 80036e6:	4b54      	ldr	r3, [pc, #336]	; (8003838 <HAL_GPIO_Init+0x2e8>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036f2:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_GPIO_Init+0x2ec>)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	3302      	adds	r3, #2
 80036fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	220f      	movs	r2, #15
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a49      	ldr	r2, [pc, #292]	; (8003840 <HAL_GPIO_Init+0x2f0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d019      	beq.n	8003752 <HAL_GPIO_Init+0x202>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a48      	ldr	r2, [pc, #288]	; (8003844 <HAL_GPIO_Init+0x2f4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_GPIO_Init+0x1fe>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a47      	ldr	r2, [pc, #284]	; (8003848 <HAL_GPIO_Init+0x2f8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00d      	beq.n	800374a <HAL_GPIO_Init+0x1fa>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a46      	ldr	r2, [pc, #280]	; (800384c <HAL_GPIO_Init+0x2fc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d007      	beq.n	8003746 <HAL_GPIO_Init+0x1f6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a45      	ldr	r2, [pc, #276]	; (8003850 <HAL_GPIO_Init+0x300>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <HAL_GPIO_Init+0x1f2>
 800373e:	2304      	movs	r3, #4
 8003740:	e008      	b.n	8003754 <HAL_GPIO_Init+0x204>
 8003742:	2307      	movs	r3, #7
 8003744:	e006      	b.n	8003754 <HAL_GPIO_Init+0x204>
 8003746:	2303      	movs	r3, #3
 8003748:	e004      	b.n	8003754 <HAL_GPIO_Init+0x204>
 800374a:	2302      	movs	r3, #2
 800374c:	e002      	b.n	8003754 <HAL_GPIO_Init+0x204>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_GPIO_Init+0x204>
 8003752:	2300      	movs	r3, #0
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	f002 0203 	and.w	r2, r2, #3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4093      	lsls	r3, r2
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003764:	4935      	ldr	r1, [pc, #212]	; (800383c <HAL_GPIO_Init+0x2ec>)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3302      	adds	r3, #2
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <HAL_GPIO_Init+0x304>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003796:	4a2f      	ldr	r2, [pc, #188]	; (8003854 <HAL_GPIO_Init+0x304>)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800379c:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <HAL_GPIO_Init+0x304>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c0:	4a24      	ldr	r2, [pc, #144]	; (8003854 <HAL_GPIO_Init+0x304>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037c6:	4b23      	ldr	r3, [pc, #140]	; (8003854 <HAL_GPIO_Init+0x304>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ea:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <HAL_GPIO_Init+0x304>)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f0:	4b18      	ldr	r3, [pc, #96]	; (8003854 <HAL_GPIO_Init+0x304>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003814:	4a0f      	ldr	r2, [pc, #60]	; (8003854 <HAL_GPIO_Init+0x304>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3301      	adds	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	f67f aea2 	bls.w	800356c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40013800 	.word	0x40013800
 8003840:	40020000 	.word	0x40020000
 8003844:	40020400 	.word	0x40020400
 8003848:	40020800 	.word	0x40020800
 800384c:	40020c00 	.word	0x40020c00
 8003850:	40021000 	.word	0x40021000
 8003854:	40013c00 	.word	0x40013c00

08003858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	e001      	b.n	800387a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
 8003894:	4613      	mov	r3, r2
 8003896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003898:	787b      	ldrb	r3, [r7, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038a4:	e003      	b.n	80038ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	619a      	str	r2, [r3, #24]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e267      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d075      	beq.n	80039c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00c      	beq.n	8003900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e6:	4b85      	ldr	r3, [pc, #532]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d112      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b82      	ldr	r3, [pc, #520]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fe:	d10b      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d05b      	beq.n	80039c4 <HAL_RCC_OscConfig+0x108>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d157      	bne.n	80039c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e242      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x74>
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a75      	ldr	r2, [pc, #468]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e01d      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x98>
 800393a:	4b70      	ldr	r3, [pc, #448]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6f      	ldr	r2, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6c      	ldr	r2, [pc, #432]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003954:	4b69      	ldr	r3, [pc, #420]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a68      	ldr	r2, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b66      	ldr	r3, [pc, #408]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fcbe 	bl	80022f4 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fe fcba 	bl	80022f4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e207      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0xc0>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fcaa 	bl	80022f4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fca6 	bl	80022f4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1f3      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	4b51      	ldr	r3, [pc, #324]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0xe8>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d063      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d11c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b44      	ldr	r3, [pc, #272]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d116      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e1c7      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4937      	ldr	r1, [pc, #220]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	e03a      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCC_OscConfig+0x244>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fe fc5f 	bl	80022f4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fe fc5b 	bl	80022f4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e1a8      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4925      	ldr	r1, [pc, #148]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
 8003a6c:	e015      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6e:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <HAL_RCC_OscConfig+0x244>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fe fc3e 	bl	80022f4 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fe fc3a 	bl	80022f4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e187      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d036      	beq.n	8003b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_RCC_OscConfig+0x248>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fe fc1e 	bl	80022f4 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fe fc1a 	bl	80022f4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e167      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x200>
 8003ada:	e01b      	b.n	8003b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCC_OscConfig+0x248>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fc07 	bl	80022f4 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	e00e      	b.n	8003b08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aea:	f7fe fc03 	bl	80022f4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d907      	bls.n	8003b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e150      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
 8003afc:	40023800 	.word	0x40023800
 8003b00:	42470000 	.word	0x42470000
 8003b04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1ea      	bne.n	8003aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8097 	beq.w	8003c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b81      	ldr	r3, [pc, #516]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	4b7d      	ldr	r3, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b7a      	ldr	r3, [pc, #488]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	4b77      	ldr	r3, [pc, #476]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d118      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5e:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a73      	ldr	r2, [pc, #460]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6a:	f7fe fbc3 	bl	80022f4 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fe fbbf 	bl	80022f4 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e10c      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2ea>
 8003b98:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a63      	ldr	r2, [pc, #396]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	e01c      	b.n	8003be0 <HAL_RCC_OscConfig+0x324>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x30c>
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a5e      	ldr	r2, [pc, #376]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bb4:	f043 0304 	orr.w	r3, r3, #4
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a5b      	ldr	r2, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0x324>
 8003bc8:	4b58      	ldr	r3, [pc, #352]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a57      	ldr	r2, [pc, #348]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	4b55      	ldr	r3, [pc, #340]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a54      	ldr	r2, [pc, #336]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 0304 	bic.w	r3, r3, #4
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7fe fb84 	bl	80022f4 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fe fb80 	bl	80022f4 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e0cb      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c06:	4b49      	ldr	r3, [pc, #292]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0ee      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x334>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c14:	f7fe fb6e 	bl	80022f4 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fb6a 	bl	80022f4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0b5      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c32:	4b3e      	ldr	r3, [pc, #248]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ee      	bne.n	8003c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a1 	beq.w	8003d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d05c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d141      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fb3e 	bl	80022f4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe fb3a 	bl	80022f4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e087      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	491b      	ldr	r1, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fe fb13 	bl	80022f4 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe fb0f 	bl	80022f4 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e05c      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x416>
 8003cf0:	e054      	b.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fafc 	bl	80022f4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe faf8 	bl	80022f4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e045      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x444>
 8003d1e:	e03d      	b.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e038      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x4ec>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d028      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d121      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d111      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0cc      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d90c      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0b8      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	494d      	ldr	r1, [pc, #308]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d044      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d119      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e06f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e067      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7fe fa2a 	bl	80022f4 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fe fa26 	bl	80022f4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e04f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d20c      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e032      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4916      	ldr	r1, [pc, #88]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f32:	f000 f821 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	490a      	ldr	r1, [pc, #40]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	5ccb      	ldrb	r3, [r1, r3]
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe f98a 	bl	800226c <HAL_InitTick>

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023c00 	.word	0x40023c00
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	08006ae4 	.word	0x08006ae4
 8003f70:	20000248 	.word	0x20000248
 8003f74:	2000024c 	.word	0x2000024c

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f7c:	b094      	sub	sp, #80	; 0x50
 8003f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	647b      	str	r3, [r7, #68]	; 0x44
 8003f84:	2300      	movs	r3, #0
 8003f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f88:	2300      	movs	r3, #0
 8003f8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f90:	4b79      	ldr	r3, [pc, #484]	; (8004178 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d00d      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	f200 80e1 	bhi.w	8004164 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x34>
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003faa:	e0db      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b73      	ldr	r3, [pc, #460]	; (800417c <HAL_RCC_GetSysClockFreq+0x204>)
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fb0:	e0db      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fb2:	4b73      	ldr	r3, [pc, #460]	; (8004180 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fb6:	e0d8      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb8:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc2:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d063      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fce:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fea:	4622      	mov	r2, r4
 8003fec:	462b      	mov	r3, r5
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	0159      	lsls	r1, r3, #5
 8003ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffc:	0150      	lsls	r0, r2, #5
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4621      	mov	r1, r4
 8004004:	1a51      	subs	r1, r2, r1
 8004006:	6139      	str	r1, [r7, #16]
 8004008:	4629      	mov	r1, r5
 800400a:	eb63 0301 	sbc.w	r3, r3, r1
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800401c:	4659      	mov	r1, fp
 800401e:	018b      	lsls	r3, r1, #6
 8004020:	4651      	mov	r1, sl
 8004022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004026:	4651      	mov	r1, sl
 8004028:	018a      	lsls	r2, r1, #6
 800402a:	4651      	mov	r1, sl
 800402c:	ebb2 0801 	subs.w	r8, r2, r1
 8004030:	4659      	mov	r1, fp
 8004032:	eb63 0901 	sbc.w	r9, r3, r1
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800404a:	4690      	mov	r8, r2
 800404c:	4699      	mov	r9, r3
 800404e:	4623      	mov	r3, r4
 8004050:	eb18 0303 	adds.w	r3, r8, r3
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	462b      	mov	r3, r5
 8004058:	eb49 0303 	adc.w	r3, r9, r3
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800406a:	4629      	mov	r1, r5
 800406c:	024b      	lsls	r3, r1, #9
 800406e:	4621      	mov	r1, r4
 8004070:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004074:	4621      	mov	r1, r4
 8004076:	024a      	lsls	r2, r1, #9
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407e:	2200      	movs	r2, #0
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
 8004082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004088:	f7fc fcc4 	bl	8000a14 <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4613      	mov	r3, r2
 8004092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004094:	e058      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004096:	4b38      	ldr	r3, [pc, #224]	; (8004178 <HAL_RCC_GetSysClockFreq+0x200>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	2200      	movs	r2, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	4611      	mov	r1, r2
 80040a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040a6:	623b      	str	r3, [r7, #32]
 80040a8:	2300      	movs	r3, #0
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
 80040ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040b0:	4642      	mov	r2, r8
 80040b2:	464b      	mov	r3, r9
 80040b4:	f04f 0000 	mov.w	r0, #0
 80040b8:	f04f 0100 	mov.w	r1, #0
 80040bc:	0159      	lsls	r1, r3, #5
 80040be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c2:	0150      	lsls	r0, r2, #5
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4641      	mov	r1, r8
 80040ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80040ce:	4649      	mov	r1, r9
 80040d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040e8:	ebb2 040a 	subs.w	r4, r2, sl
 80040ec:	eb63 050b 	sbc.w	r5, r3, fp
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	00eb      	lsls	r3, r5, #3
 80040fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040fe:	00e2      	lsls	r2, r4, #3
 8004100:	4614      	mov	r4, r2
 8004102:	461d      	mov	r5, r3
 8004104:	4643      	mov	r3, r8
 8004106:	18e3      	adds	r3, r4, r3
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	464b      	mov	r3, r9
 800410c:	eb45 0303 	adc.w	r3, r5, r3
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800411e:	4629      	mov	r1, r5
 8004120:	028b      	lsls	r3, r1, #10
 8004122:	4621      	mov	r1, r4
 8004124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004128:	4621      	mov	r1, r4
 800412a:	028a      	lsls	r2, r1, #10
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004132:	2200      	movs	r2, #0
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	61fa      	str	r2, [r7, #28]
 8004138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800413c:	f7fc fc6a 	bl	8000a14 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4613      	mov	r3, r2
 8004146:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_GetSysClockFreq+0x200>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800415a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetSysClockFreq+0x204>)
 8004166:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800416c:	4618      	mov	r0, r3
 800416e:	3750      	adds	r7, #80	; 0x50
 8004170:	46bd      	mov	sp, r7
 8004172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	00f42400 	.word	0x00f42400
 8004180:	007a1200 	.word	0x007a1200

08004184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCC_GetHCLKFreq+0x14>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000248 	.word	0x20000248

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff0 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08006af4 	.word	0x08006af4

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffdc 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0b5b      	lsrs	r3, r3, #13
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	08006af4 	.word	0x08006af4

080041ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e04c      	b.n	8004298 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d111      	bne.n	800422e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f001 f8a2 	bl	800535c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_TIM_Base_Init+0xb4>)
 8004224:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f000 fdbf 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	08001d59 	.word	0x08001d59

080042a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d001      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e044      	b.n	8004346 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <HAL_TIM_Base_Start_IT+0xb0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x6c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e6:	d013      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x6c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_TIM_Base_Start_IT+0xb4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x6c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a19      	ldr	r2, [pc, #100]	; (800435c <HAL_TIM_Base_Start_IT+0xb8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x6c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a17      	ldr	r2, [pc, #92]	; (8004360 <HAL_TIM_Base_Start_IT+0xbc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x6c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a16      	ldr	r2, [pc, #88]	; (8004364 <HAL_TIM_Base_Start_IT+0xc0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d111      	bne.n	8004334 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b06      	cmp	r3, #6
 8004320:	d010      	beq.n	8004344 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	e007      	b.n	8004344 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40014000 	.word	0x40014000

08004368 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e04c      	b.n	8004414 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d111      	bne.n	80043aa <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 ffe4 	bl	800535c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_TIM_OC_Init+0xb4>)
 80043a0:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f000 fd01 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	08004421 	.word	0x08004421

08004420 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e04c      	b.n	80044e2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d111      	bne.n	8004478 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 ff7d 	bl	800535c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <HAL_TIM_OnePulse_Init+0xb8>)
 800446e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 fc9a 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0208 	bic.w	r2, r2, #8
 800449e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	080044f1 	.word	0x080044f1

080044f0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004514:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800451c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004524:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800452c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d108      	bne.n	8004546 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004534:	7bbb      	ldrb	r3, [r7, #14]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800453a:	7b7b      	ldrb	r3, [r7, #13]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d102      	bne.n	8004546 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004540:	7b3b      	ldrb	r3, [r7, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d001      	beq.n	800454a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e03b      	b.n	80045c2 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0202 	orr.w	r2, r2, #2
 8004578:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0204 	orr.w	r2, r2, #4
 8004588:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2201      	movs	r2, #1
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 febc 	bl	8005310 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	2104      	movs	r1, #4
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 feb5 	bl	8005310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a08      	ldr	r2, [pc, #32]	; (80045cc <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d107      	bne.n	80045c0 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000

080045d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d128      	bne.n	8004638 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d121      	bne.n	8004638 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0202 	mvn.w	r2, #2
 80045fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
 800461c:	e009      	b.n	8004632 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d128      	bne.n	8004698 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	d121      	bne.n	8004698 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0204 	mvn.w	r2, #4
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
 800467c:	e009      	b.n	8004692 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d128      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d121      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0208 	mvn.w	r2, #8
 80046bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2204      	movs	r2, #4
 80046c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
 80046dc:	e009      	b.n	80046f2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b10      	cmp	r3, #16
 8004704:	d128      	bne.n	8004758 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b10      	cmp	r3, #16
 8004712:	d121      	bne.n	8004758 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0210 	mvn.w	r2, #16
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2208      	movs	r2, #8
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
 800473c:	e009      	b.n	8004752 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d110      	bne.n	8004788 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d109      	bne.n	8004788 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0201 	mvn.w	r2, #1
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b80      	cmp	r3, #128	; 0x80
 8004794:	d110      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b80      	cmp	r3, #128	; 0x80
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d110      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d109      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d110      	bne.n	8004818 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d109      	bne.n	8004818 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0220 	mvn.w	r2, #32
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_TIM_OC_ConfigChannel+0x1e>
 800483a:	2302      	movs	r3, #2
 800483c:	e048      	b.n	80048d0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b0c      	cmp	r3, #12
 800484a:	d839      	bhi.n	80048c0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800484c:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <HAL_TIM_OC_ConfigChannel+0x34>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004889 	.word	0x08004889
 8004858:	080048c1 	.word	0x080048c1
 800485c:	080048c1 	.word	0x080048c1
 8004860:	080048c1 	.word	0x080048c1
 8004864:	08004897 	.word	0x08004897
 8004868:	080048c1 	.word	0x080048c1
 800486c:	080048c1 	.word	0x080048c1
 8004870:	080048c1 	.word	0x080048c1
 8004874:	080048a5 	.word	0x080048a5
 8004878:	080048c1 	.word	0x080048c1
 800487c:	080048c1 	.word	0x080048c1
 8004880:	080048c1 	.word	0x080048c1
 8004884:	080048b3 	.word	0x080048b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fb18 	bl	8004ec4 <TIM_OC1_SetConfig>
      break;
 8004894:	e017      	b.n	80048c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fb77 	bl	8004f90 <TIM_OC2_SetConfig>
      break;
 80048a2:	e010      	b.n	80048c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fbdc 	bl	8005068 <TIM_OC3_SetConfig>
      break;
 80048b0:	e009      	b.n	80048c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fc3f 	bl	800513c <TIM_OC4_SetConfig>
      break;
 80048be:	e002      	b.n	80048c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	75fb      	strb	r3, [r7, #23]
      break;
 80048c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIM_ConfigClockSource+0x1c>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e0b4      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x186>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	d03e      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0xd4>
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004932:	f200 8087 	bhi.w	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493a:	f000 8086 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x172>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004942:	d87f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004944:	2b70      	cmp	r3, #112	; 0x70
 8004946:	d01a      	beq.n	800497e <HAL_TIM_ConfigClockSource+0xa6>
 8004948:	2b70      	cmp	r3, #112	; 0x70
 800494a:	d87b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800494c:	2b60      	cmp	r3, #96	; 0x60
 800494e:	d050      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004950:	2b60      	cmp	r3, #96	; 0x60
 8004952:	d877      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004954:	2b50      	cmp	r3, #80	; 0x50
 8004956:	d03c      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004958:	2b50      	cmp	r3, #80	; 0x50
 800495a:	d873      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d058      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x13a>
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d86f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d064      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004968:	2b30      	cmp	r3, #48	; 0x30
 800496a:	d86b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d060      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004970:	2b20      	cmp	r3, #32
 8004972:	d867      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d05c      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004978:	2b10      	cmp	r3, #16
 800497a:	d05a      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 800497c:	e062      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f000 fc9f 	bl	80052d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	609a      	str	r2, [r3, #8]
      break;
 80049aa:	e04f      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f000 fc88 	bl	80052d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ce:	609a      	str	r2, [r3, #8]
      break;
 80049d0:	e03c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	461a      	mov	r2, r3
 80049e0:	f000 fbfc 	bl	80051dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2150      	movs	r1, #80	; 0x50
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fc55 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 80049f0:	e02c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 fc1b 	bl	800523a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2160      	movs	r1, #96	; 0x60
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fc45 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004a10:	e01c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 fbdc 	bl	80051dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2140      	movs	r1, #64	; 0x40
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fc35 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004a30:	e00c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f000 fc2c 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004a42:	e003      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e000      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e135      	b.n	8004db8 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_RegisterCallback+0x2a>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e12e      	b.n	8004db8 <HAL_TIM_RegisterCallback+0x288>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	f040 80ba 	bne.w	8004ce4 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8004b70:	7afb      	ldrb	r3, [r7, #11]
 8004b72:	2b1a      	cmp	r3, #26
 8004b74:	f200 80b3 	bhi.w	8004cde <HAL_TIM_RegisterCallback+0x1ae>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <HAL_TIM_RegisterCallback+0x50>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004bed 	.word	0x08004bed
 8004b84:	08004bf5 	.word	0x08004bf5
 8004b88:	08004bfd 	.word	0x08004bfd
 8004b8c:	08004c05 	.word	0x08004c05
 8004b90:	08004c0d 	.word	0x08004c0d
 8004b94:	08004c15 	.word	0x08004c15
 8004b98:	08004c1d 	.word	0x08004c1d
 8004b9c:	08004c25 	.word	0x08004c25
 8004ba0:	08004c2d 	.word	0x08004c2d
 8004ba4:	08004c35 	.word	0x08004c35
 8004ba8:	08004c3d 	.word	0x08004c3d
 8004bac:	08004c45 	.word	0x08004c45
 8004bb0:	08004c4d 	.word	0x08004c4d
 8004bb4:	08004c55 	.word	0x08004c55
 8004bb8:	08004c5d 	.word	0x08004c5d
 8004bbc:	08004c67 	.word	0x08004c67
 8004bc0:	08004c71 	.word	0x08004c71
 8004bc4:	08004c7b 	.word	0x08004c7b
 8004bc8:	08004c85 	.word	0x08004c85
 8004bcc:	08004c8f 	.word	0x08004c8f
 8004bd0:	08004c99 	.word	0x08004c99
 8004bd4:	08004ca3 	.word	0x08004ca3
 8004bd8:	08004cad 	.word	0x08004cad
 8004bdc:	08004cb7 	.word	0x08004cb7
 8004be0:	08004cc1 	.word	0x08004cc1
 8004be4:	08004ccb 	.word	0x08004ccb
 8004be8:	08004cd5 	.word	0x08004cd5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004bf2:	e0dc      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004bfa:	e0d8      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004c02:	e0d4      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004c0a:	e0d0      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004c12:	e0cc      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004c1a:	e0c8      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004c22:	e0c4      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004c2a:	e0c0      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004c32:	e0bc      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004c3a:	e0b8      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004c42:	e0b4      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004c4a:	e0b0      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004c52:	e0ac      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004c5a:	e0a8      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004c64:	e0a3      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8004c6e:	e09e      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8004c78:	e099      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8004c82:	e094      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004c8c:	e08f      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004c96:	e08a      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004ca0:	e085      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004caa:	e080      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004cb4:	e07b      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004cbe:	e076      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004cc8:	e071      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004cd2:	e06c      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004cdc:	e067      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8004ce2:	e064      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d15c      	bne.n	8004daa <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8004cf0:	7afb      	ldrb	r3, [r7, #11]
 8004cf2:	2b0d      	cmp	r3, #13
 8004cf4:	d856      	bhi.n	8004da4 <HAL_TIM_RegisterCallback+0x274>
 8004cf6:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_TIM_RegisterCallback+0x1cc>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d35 	.word	0x08004d35
 8004d00:	08004d3d 	.word	0x08004d3d
 8004d04:	08004d45 	.word	0x08004d45
 8004d08:	08004d4d 	.word	0x08004d4d
 8004d0c:	08004d55 	.word	0x08004d55
 8004d10:	08004d5d 	.word	0x08004d5d
 8004d14:	08004d65 	.word	0x08004d65
 8004d18:	08004d6d 	.word	0x08004d6d
 8004d1c:	08004d75 	.word	0x08004d75
 8004d20:	08004d7d 	.word	0x08004d7d
 8004d24:	08004d85 	.word	0x08004d85
 8004d28:	08004d8d 	.word	0x08004d8d
 8004d2c:	08004d95 	.word	0x08004d95
 8004d30:	08004d9d 	.word	0x08004d9d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004d3a:	e038      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004d42:	e034      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004d4a:	e030      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004d52:	e02c      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004d5a:	e028      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004d62:	e024      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004d6a:	e020      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004d72:	e01c      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004d7a:	e018      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004d82:	e014      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004d8a:	e010      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004d92:	e00c      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004d9a:	e008      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004da2:	e004      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	75fb      	strb	r3, [r7, #23]
        break;
 8004da8:	e001      	b.n	8004dae <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a34      	ldr	r2, [pc, #208]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a31      	ldr	r2, [pc, #196]	; (8004eac <TIM_Base_SetConfig+0xe8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a30      	ldr	r2, [pc, #192]	; (8004eb0 <TIM_Base_SetConfig+0xec>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2f      	ldr	r2, [pc, #188]	; (8004eb4 <TIM_Base_SetConfig+0xf0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01b      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d017      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a22      	ldr	r2, [pc, #136]	; (8004eac <TIM_Base_SetConfig+0xe8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <TIM_Base_SetConfig+0xec>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <TIM_Base_SetConfig+0xf0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <TIM_Base_SetConfig+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <TIM_Base_SetConfig+0xf8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <TIM_Base_SetConfig+0xfc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800

08004ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 0302 	bic.w	r3, r3, #2
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <TIM_OC1_SetConfig+0xc8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10c      	bne.n	8004f3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0308 	bic.w	r3, r3, #8
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <TIM_OC1_SetConfig+0xc8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d111      	bne.n	8004f66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40010000 	.word	0x40010000

08004f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0210 	bic.w	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0320 	bic.w	r3, r3, #32
 8004fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <TIM_OC2_SetConfig+0xd4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10d      	bne.n	800500c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a15      	ldr	r2, [pc, #84]	; (8005064 <TIM_OC2_SetConfig+0xd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d113      	bne.n	800503c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000

08005068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <TIM_OC3_SetConfig+0xd0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10d      	bne.n	80050e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <TIM_OC3_SetConfig+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d113      	bne.n	8005112 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	621a      	str	r2, [r3, #32]
}
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40010000 	.word	0x40010000

0800513c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <TIM_OC4_SetConfig+0x9c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d109      	bne.n	80051b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	019b      	lsls	r3, r3, #6
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000

080051dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 030a 	bic.w	r3, r3, #10
 8005218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523a:	b480      	push	{r7}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0210 	bic.w	r2, r3, #16
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f043 0307 	orr.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 031f 	and.w	r3, r3, #31
 8005322:	2201      	movs	r2, #1
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	43db      	mvns	r3, r3
 8005332:	401a      	ands	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	fa01 f303 	lsl.w	r3, r1, r3
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <TIM_ResetCallback+0x7c>)
 8005368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <TIM_ResetCallback+0x80>)
 8005370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a1a      	ldr	r2, [pc, #104]	; (80053e0 <TIM_ResetCallback+0x84>)
 8005378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <TIM_ResetCallback+0x88>)
 8005380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <TIM_ResetCallback+0x8c>)
 8005388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <TIM_ResetCallback+0x90>)
 8005390:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <TIM_ResetCallback+0x94>)
 8005398:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a15      	ldr	r2, [pc, #84]	; (80053f4 <TIM_ResetCallback+0x98>)
 80053a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a14      	ldr	r2, [pc, #80]	; (80053f8 <TIM_ResetCallback+0x9c>)
 80053a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a13      	ldr	r2, [pc, #76]	; (80053fc <TIM_ResetCallback+0xa0>)
 80053b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a12      	ldr	r2, [pc, #72]	; (8005400 <TIM_ResetCallback+0xa4>)
 80053b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a11      	ldr	r2, [pc, #68]	; (8005404 <TIM_ResetCallback+0xa8>)
 80053c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a10      	ldr	r2, [pc, #64]	; (8005408 <TIM_ResetCallback+0xac>)
 80053c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	08004a67 	.word	0x08004a67
 80053dc:	08004a7b 	.word	0x08004a7b
 80053e0:	08004af3 	.word	0x08004af3
 80053e4:	08004b07 	.word	0x08004b07
 80053e8:	08004aa3 	.word	0x08004aa3
 80053ec:	08004ab7 	.word	0x08004ab7
 80053f0:	08004a8f 	.word	0x08004a8f
 80053f4:	08004acb 	.word	0x08004acb
 80053f8:	08004adf 	.word	0x08004adf
 80053fc:	08004b1b 	.word	0x08004b1b
 8005400:	080054e9 	.word	0x080054e9
 8005404:	080054fd 	.word	0x080054fd
 8005408:	08005511 	.word	0x08005511

0800540c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e050      	b.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d013      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a16      	ldr	r2, [pc, #88]	; (80054dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10c      	bne.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40014000 	.word	0x40014000

080054e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e04a      	b.n	80055cc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d111      	bne.n	8005566 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fd2c 	bl	8005fa8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a1e      	ldr	r2, [pc, #120]	; (80055d4 <HAL_UART_Init+0xb0>)
 800555c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2224      	movs	r2, #36	; 0x24
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fff6 	bl	8006570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005592:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	08001de5 	.word	0x08001de5

080055d8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	460b      	mov	r3, r1
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e08c      	b.n	800571a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_UART_RegisterCallback+0x36>
 800560a:	2302      	movs	r3, #2
 800560c:	e085      	b.n	800571a <HAL_UART_RegisterCallback+0x142>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b20      	cmp	r3, #32
 8005620:	d151      	bne.n	80056c6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8005622:	7afb      	ldrb	r3, [r7, #11]
 8005624:	2b0c      	cmp	r3, #12
 8005626:	d845      	bhi.n	80056b4 <HAL_UART_RegisterCallback+0xdc>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <HAL_UART_RegisterCallback+0x58>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005665 	.word	0x08005665
 8005634:	0800566d 	.word	0x0800566d
 8005638:	08005675 	.word	0x08005675
 800563c:	0800567d 	.word	0x0800567d
 8005640:	08005685 	.word	0x08005685
 8005644:	0800568d 	.word	0x0800568d
 8005648:	08005695 	.word	0x08005695
 800564c:	0800569d 	.word	0x0800569d
 8005650:	080056b5 	.word	0x080056b5
 8005654:	080056b5 	.word	0x080056b5
 8005658:	080056b5 	.word	0x080056b5
 800565c:	080056a5 	.word	0x080056a5
 8005660:	080056ad 	.word	0x080056ad
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800566a:	e051      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005672:	e04d      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800567a:	e049      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005682:	e045      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800568a:	e041      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005692:	e03d      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800569a:	e039      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80056a2:	e035      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80056aa:	e031      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80056b2:	e02d      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
        break;
 80056c4:	e024      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d116      	bne.n	8005700 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80056d2:	7afb      	ldrb	r3, [r7, #11]
 80056d4:	2b0b      	cmp	r3, #11
 80056d6:	d002      	beq.n	80056de <HAL_UART_RegisterCallback+0x106>
 80056d8:	2b0c      	cmp	r3, #12
 80056da:	d004      	beq.n	80056e6 <HAL_UART_RegisterCallback+0x10e>
 80056dc:	e007      	b.n	80056ee <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80056e4:	e014      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80056ec:	e010      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	75fb      	strb	r3, [r7, #23]
        break;
 80056fe:	e007      	b.n	8005710 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop

08005728 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b20      	cmp	r3, #32
 8005740:	d11d      	bne.n	800577e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_UART_Receive_IT+0x26>
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e016      	b.n	8005780 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_UART_Receive_IT+0x38>
 800575c:	2302      	movs	r3, #2
 800575e:	e00f      	b.n	8005780 <HAL_UART_Receive_IT+0x58>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	461a      	mov	r2, r3
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fcf7 	bl	8006168 <UART_Start_Receive_IT>
 800577a:	4603      	mov	r3, r0
 800577c:	e000      	b.n	8005780 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800577e:	2302      	movs	r3, #2
  }
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	; 0x30
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d165      	bne.n	800586e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_Transmit_DMA+0x26>
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e05e      	b.n	8005870 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Transmit_DMA+0x38>
 80057bc:	2302      	movs	r3, #2
 80057be:	e057      	b.n	8005870 <HAL_UART_Transmit_DMA+0xe8>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2221      	movs	r2, #33	; 0x21
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	4a22      	ldr	r2, [pc, #136]	; (8005878 <HAL_UART_Transmit_DMA+0xf0>)
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	4a21      	ldr	r2, [pc, #132]	; (800587c <HAL_UART_Transmit_DMA+0xf4>)
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	4a20      	ldr	r2, [pc, #128]	; (8005880 <HAL_UART_Transmit_DMA+0xf8>)
 80057fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005804:	2200      	movs	r2, #0
 8005806:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005808:	f107 0308 	add.w	r3, r7, #8
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3304      	adds	r3, #4
 800581c:	461a      	mov	r2, r3
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	f7fd fb36 	bl	8002e90 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800582c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3314      	adds	r3, #20
 800583c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	617b      	str	r3, [r7, #20]
   return(result);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005856:	627a      	str	r2, [r7, #36]	; 0x24
 8005858:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6a39      	ldr	r1, [r7, #32]
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	61fb      	str	r3, [r7, #28]
   return(result);
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e5      	bne.n	8005836 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	3730      	adds	r7, #48	; 0x30
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	08006019 	.word	0x08006019
 800587c:	080060b5 	.word	0x080060b5
 8005880:	080060d3 	.word	0x080060d3

08005884 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b09a      	sub	sp, #104	; 0x68
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800589c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058a2:	667b      	str	r3, [r7, #100]	; 0x64
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058ac:	657a      	str	r2, [r7, #84]	; 0x54
 80058ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3314      	adds	r3, #20
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	663b      	str	r3, [r7, #96]	; 0x60
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3314      	adds	r3, #20
 80058de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058e0:	643a      	str	r2, [r7, #64]	; 0x40
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e5      	bne.n	80058c0 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d119      	bne.n	8005930 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	61fb      	str	r3, [r7, #28]
   return(result);
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f023 0310 	bic.w	r3, r3, #16
 8005912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	330c      	adds	r3, #12
 800591a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800591c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e5      	bne.n	80058fc <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d136      	bne.n	80059ac <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	60bb      	str	r3, [r7, #8]
   return(result);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005954:	65bb      	str	r3, [r7, #88]	; 0x58
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3314      	adds	r3, #20
 800595c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800595e:	61ba      	str	r2, [r7, #24]
 8005960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6979      	ldr	r1, [r7, #20]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	613b      	str	r3, [r7, #16]
   return(result);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e5      	bne.n	800593e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d018      	beq.n	80059ac <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	2200      	movs	r2, #0
 8005980:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	4618      	mov	r0, r3
 8005988:	f7fd fada 	bl	8002f40 <HAL_DMA_Abort>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00c      	beq.n	80059ac <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	4618      	mov	r0, r3
 8005998:	f7fd fcee 	bl	8003378 <HAL_DMA_GetError>
 800599c:	4603      	mov	r3, r0
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d104      	bne.n	80059ac <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2210      	movs	r2, #16
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e00a      	b.n	80059c2 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3768      	adds	r7, #104	; 0x68
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b0ba      	sub	sp, #232	; 0xe8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10f      	bne.n	8005a32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_UART_IRQHandler+0x66>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fce3 	bl	80063f6 <UART_Receive_IT>
      return;
 8005a30:	e25b      	b.n	8005eea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80e1 	beq.w	8005bfe <HAL_UART_IRQHandler+0x232>
 8005a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80d4 	beq.w	8005bfe <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <HAL_UART_IRQHandler+0xae>
 8005a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f043 0201 	orr.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00b      	beq.n	8005a9e <HAL_UART_IRQHandler+0xd2>
 8005a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f043 0202 	orr.w	r2, r3, #2
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <HAL_UART_IRQHandler+0xf6>
 8005aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f043 0204 	orr.w	r2, r3, #4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d011      	beq.n	8005af2 <HAL_UART_IRQHandler+0x126>
 8005ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f043 0208 	orr.w	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 81f2 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_UART_IRQHandler+0x14e>
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fc6e 	bl	80063f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <HAL_UART_IRQHandler+0x17a>
 8005b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d051      	beq.n	8005bea <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fb74 	bl	8006234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	d142      	bne.n	8005be0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1d9      	bne.n	8005b5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d013      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	4a7f      	ldr	r2, [pc, #508]	; (8005db0 <HAL_UART_IRQHandler+0x3e4>)
 8005bb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fd fa30 	bl	8003020 <HAL_DMA_Abort_IT>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d019      	beq.n	8005bfa <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	e011      	b.n	8005bfa <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bde:	e00c      	b.n	8005bfa <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be8:	e007      	b.n	8005bfa <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bf8:	e172      	b.n	8005ee0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bfa:	bf00      	nop
    return;
 8005bfc:	e170      	b.n	8005ee0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	f040 814c 	bne.w	8005ea0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8145 	beq.w	8005ea0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 813e 	beq.w	8005ea0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	60bb      	str	r3, [r7, #8]
 8005c38:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	f040 80b5 	bne.w	8005db4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8142 	beq.w	8005ee4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	f080 813b 	bcs.w	8005ee4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c80:	f000 8088 	beq.w	8005d94 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005cb0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1d9      	bne.n	8005c84 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3314      	adds	r3, #20
 8005cf0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cf4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e1      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3314      	adds	r3, #20
 8005d12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e3      	bne.n	8005d0c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d64:	f023 0310 	bic.w	r3, r3, #16
 8005d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d76:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e3      	bne.n	8005d52 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fd f8d6 	bl	8002f40 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8005da0:	b292      	uxth	r2, r2
 8005da2:	1a8a      	subs	r2, r1, r2
 8005da4:	b292      	uxth	r2, r2
 8005da6:	4611      	mov	r1, r2
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dac:	e09a      	b.n	8005ee4 <HAL_UART_IRQHandler+0x518>
 8005dae:	bf00      	nop
 8005db0:	080062fb 	.word	0x080062fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 808c 	beq.w	8005ee8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8087 	beq.w	8005ee8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005dfe:	647a      	str	r2, [r7, #68]	; 0x44
 8005e00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e3      	bne.n	8005dda <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	623b      	str	r3, [r7, #32]
   return(result);
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3314      	adds	r3, #20
 8005e32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e36:	633a      	str	r2, [r7, #48]	; 0x30
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e3      	bne.n	8005e12 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0310 	bic.w	r3, r3, #16
 8005e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e7c:	61fa      	str	r2, [r7, #28]
 8005e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	69b9      	ldr	r1, [r7, #24]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	617b      	str	r3, [r7, #20]
   return(result);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e3      	bne.n	8005e58 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e94:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8005e98:	4611      	mov	r1, r2
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e9e:	e023      	b.n	8005ee8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x4f4>
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fa33 	bl	8006324 <UART_Transmit_IT>
    return;
 8005ebe:	e014      	b.n	8005eea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00e      	beq.n	8005eea <HAL_UART_IRQHandler+0x51e>
 8005ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fa73 	bl	80063c4 <UART_EndTransmit_IT>
    return;
 8005ede:	e004      	b.n	8005eea <HAL_UART_IRQHandler+0x51e>
    return;
 8005ee0:	bf00      	nop
 8005ee2:	e002      	b.n	8005eea <HAL_UART_IRQHandler+0x51e>
      return;
 8005ee4:	bf00      	nop
 8005ee6:	e000      	b.n	8005eea <HAL_UART_IRQHandler+0x51e>
      return;
 8005ee8:	bf00      	nop
  }
}
 8005eea:	37e8      	adds	r7, #232	; 0xe8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a10      	ldr	r2, [pc, #64]	; (8005ff4 <UART_InitCallbacksToDefault+0x4c>)
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <UART_InitCallbacksToDefault+0x50>)
 8005fba:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a0f      	ldr	r2, [pc, #60]	; (8005ffc <UART_InitCallbacksToDefault+0x54>)
 8005fc0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a0e      	ldr	r2, [pc, #56]	; (8006000 <UART_InitCallbacksToDefault+0x58>)
 8005fc6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a0e      	ldr	r2, [pc, #56]	; (8006004 <UART_InitCallbacksToDefault+0x5c>)
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a0d      	ldr	r2, [pc, #52]	; (8006008 <UART_InitCallbacksToDefault+0x60>)
 8005fd2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a0d      	ldr	r2, [pc, #52]	; (800600c <UART_InitCallbacksToDefault+0x64>)
 8005fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <UART_InitCallbacksToDefault+0x68>)
 8005fde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <UART_InitCallbacksToDefault+0x6c>)
 8005fe4:	669a      	str	r2, [r3, #104]	; 0x68

}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	08005f05 	.word	0x08005f05
 8005ff8:	08005ef1 	.word	0x08005ef1
 8005ffc:	08005f2d 	.word	0x08005f2d
 8006000:	08005f19 	.word	0x08005f19
 8006004:	08005f41 	.word	0x08005f41
 8006008:	08005f55 	.word	0x08005f55
 800600c:	08005f69 	.word	0x08005f69
 8006010:	08005f7d 	.word	0x08005f7d
 8006014:	08005f91 	.word	0x08005f91

08006018 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b090      	sub	sp, #64	; 0x40
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d137      	bne.n	80060a4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006036:	2200      	movs	r2, #0
 8006038:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800603a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3314      	adds	r3, #20
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	623b      	str	r3, [r7, #32]
   return(result);
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006050:	63bb      	str	r3, [r7, #56]	; 0x38
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3314      	adds	r3, #20
 8006058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800605a:	633a      	str	r2, [r7, #48]	; 0x30
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e5      	bne.n	800603a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	60fb      	str	r3, [r7, #12]
   return(result);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608e:	61fa      	str	r2, [r7, #28]
 8006090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	69b9      	ldr	r1, [r7, #24]
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	617b      	str	r3, [r7, #20]
   return(result);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060a2:	e003      	b.n	80060ac <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 80060a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80060aa:	4798      	blx	r3
}
 80060ac:	bf00      	nop
 80060ae:	3740      	adds	r7, #64	; 0x40
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	bf0c      	ite	eq
 80060f2:	2301      	moveq	r3, #1
 80060f4:	2300      	movne	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b21      	cmp	r3, #33	; 0x21
 8006104:	d108      	bne.n	8006118 <UART_DMAError+0x46>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006112:	68b8      	ldr	r0, [r7, #8]
 8006114:	f000 f866 	bl	80061e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	bf0c      	ite	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	2300      	movne	r3, #0
 800612a:	b2db      	uxtb	r3, r3
 800612c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b22      	cmp	r3, #34	; 0x22
 8006138:	d108      	bne.n	800614c <UART_DMAError+0x7a>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006146:	68b8      	ldr	r0, [r7, #8]
 8006148:	f000 f874 	bl	8006234 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	f043 0210 	orr.w	r2, r3, #16
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	68b8      	ldr	r0, [r7, #8]
 800615e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	88fa      	ldrh	r2, [r7, #6]
 8006186:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2222      	movs	r2, #34	; 0x22
 8006192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 0201 	orr.w	r2, r2, #1
 80061c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0220 	orr.w	r2, r2, #32
 80061d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b089      	sub	sp, #36	; 0x24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330c      	adds	r3, #12
 80061f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	330c      	adds	r3, #12
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	61ba      	str	r2, [r7, #24]
 800620e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6979      	ldr	r1, [r7, #20]
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	613b      	str	r3, [r7, #16]
   return(result);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e5      	bne.n	80061ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006228:	bf00      	nop
 800622a:	3724      	adds	r7, #36	; 0x24
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b095      	sub	sp, #84	; 0x54
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	330c      	adds	r3, #12
 800625a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800625c:	643a      	str	r2, [r7, #64]	; 0x40
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e5      	bne.n	800623c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3314      	adds	r3, #20
 8006276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	64bb      	str	r3, [r7, #72]	; 0x48
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3314      	adds	r3, #20
 800628e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e5      	bne.n	8006270 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d119      	bne.n	80062e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f023 0310 	bic.w	r3, r3, #16
 80062c2:	647b      	str	r3, [r7, #68]	; 0x44
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062cc:	61ba      	str	r2, [r7, #24]
 80062ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6979      	ldr	r1, [r7, #20]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	613b      	str	r3, [r7, #16]
   return(result);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e5      	bne.n	80062ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062ee:	bf00      	nop
 80062f0:	3754      	adds	r7, #84	; 0x54
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b21      	cmp	r3, #33	; 0x21
 8006336:	d13e      	bne.n	80063b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006340:	d114      	bne.n	800636c <UART_Transmit_IT+0x48>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d110      	bne.n	800636c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800635e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]
 800636a:	e008      	b.n	800637e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	1c59      	adds	r1, r3, #1
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6211      	str	r1, [r2, #32]
 8006376:	781a      	ldrb	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29b      	uxth	r3, r3
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4619      	mov	r1, r3
 800638c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10f      	bne.n	80063b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e000      	b.n	80063b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063b6:	2302      	movs	r3, #2
  }
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b08c      	sub	sp, #48	; 0x30
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b22      	cmp	r3, #34	; 0x22
 8006408:	f040 80ad 	bne.w	8006566 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006414:	d117      	bne.n	8006446 <UART_Receive_IT+0x50>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d113      	bne.n	8006446 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006434:	b29a      	uxth	r2, r3
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	629a      	str	r2, [r3, #40]	; 0x28
 8006444:	e026      	b.n	8006494 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006458:	d007      	beq.n	800646a <UART_Receive_IT+0x74>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <UART_Receive_IT+0x82>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	b2da      	uxtb	r2, r3
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e008      	b.n	800648a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006484:	b2da      	uxtb	r2, r3
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29b      	uxth	r3, r3
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4619      	mov	r1, r3
 80064a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d15c      	bne.n	8006562 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0220 	bic.w	r2, r2, #32
 80064b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d136      	bne.n	8006556 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	613b      	str	r3, [r7, #16]
   return(result);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f023 0310 	bic.w	r3, r3, #16
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650e:	623a      	str	r2, [r7, #32]
 8006510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	69f9      	ldr	r1, [r7, #28]
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	61bb      	str	r3, [r7, #24]
   return(result);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e5      	bne.n	80064ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	2b10      	cmp	r3, #16
 800652e:	d10a      	bne.n	8006546 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800654e:	4611      	mov	r1, r2
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	4798      	blx	r3
 8006554:	e003      	b.n	800655e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e002      	b.n	8006568 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8006566:	2302      	movs	r3, #2
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3730      	adds	r7, #48	; 0x30
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006574:	b0c0      	sub	sp, #256	; 0x100
 8006576:	af00      	add	r7, sp, #0
 8006578:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	68d9      	ldr	r1, [r3, #12]
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	ea40 0301 	orr.w	r3, r0, r1
 8006598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065c8:	f021 010c 	bic.w	r1, r1, #12
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065d6:	430b      	orrs	r3, r1
 80065d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ea:	6999      	ldr	r1, [r3, #24]
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	ea40 0301 	orr.w	r3, r0, r1
 80065f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b8f      	ldr	r3, [pc, #572]	; (800683c <UART_SetConfig+0x2cc>)
 8006600:	429a      	cmp	r2, r3
 8006602:	d005      	beq.n	8006610 <UART_SetConfig+0xa0>
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b8d      	ldr	r3, [pc, #564]	; (8006840 <UART_SetConfig+0x2d0>)
 800660c:	429a      	cmp	r2, r3
 800660e:	d104      	bne.n	800661a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006610:	f7fd fdd8 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 8006614:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006618:	e003      	b.n	8006622 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800661a:	f7fd fdbf 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 800661e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662c:	f040 810c 	bne.w	8006848 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800663a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800663e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006642:	4622      	mov	r2, r4
 8006644:	462b      	mov	r3, r5
 8006646:	1891      	adds	r1, r2, r2
 8006648:	65b9      	str	r1, [r7, #88]	; 0x58
 800664a:	415b      	adcs	r3, r3
 800664c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800664e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006652:	4621      	mov	r1, r4
 8006654:	eb12 0801 	adds.w	r8, r2, r1
 8006658:	4629      	mov	r1, r5
 800665a:	eb43 0901 	adc.w	r9, r3, r1
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	f04f 0300 	mov.w	r3, #0
 8006666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800666a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800666e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006672:	4690      	mov	r8, r2
 8006674:	4699      	mov	r9, r3
 8006676:	4623      	mov	r3, r4
 8006678:	eb18 0303 	adds.w	r3, r8, r3
 800667c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006680:	462b      	mov	r3, r5
 8006682:	eb49 0303 	adc.w	r3, r9, r3
 8006686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800668a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006696:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800669a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800669e:	460b      	mov	r3, r1
 80066a0:	18db      	adds	r3, r3, r3
 80066a2:	653b      	str	r3, [r7, #80]	; 0x50
 80066a4:	4613      	mov	r3, r2
 80066a6:	eb42 0303 	adc.w	r3, r2, r3
 80066aa:	657b      	str	r3, [r7, #84]	; 0x54
 80066ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066b4:	f7fa f9ae 	bl	8000a14 <__aeabi_uldivmod>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4b61      	ldr	r3, [pc, #388]	; (8006844 <UART_SetConfig+0x2d4>)
 80066be:	fba3 2302 	umull	r2, r3, r3, r2
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	011c      	lsls	r4, r3, #4
 80066c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	1891      	adds	r1, r2, r2
 80066de:	64b9      	str	r1, [r7, #72]	; 0x48
 80066e0:	415b      	adcs	r3, r3
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066e8:	4641      	mov	r1, r8
 80066ea:	eb12 0a01 	adds.w	sl, r2, r1
 80066ee:	4649      	mov	r1, r9
 80066f0:	eb43 0b01 	adc.w	fp, r3, r1
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006700:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006708:	4692      	mov	sl, r2
 800670a:	469b      	mov	fp, r3
 800670c:	4643      	mov	r3, r8
 800670e:	eb1a 0303 	adds.w	r3, sl, r3
 8006712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006716:	464b      	mov	r3, r9
 8006718:	eb4b 0303 	adc.w	r3, fp, r3
 800671c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800672c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006730:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006734:	460b      	mov	r3, r1
 8006736:	18db      	adds	r3, r3, r3
 8006738:	643b      	str	r3, [r7, #64]	; 0x40
 800673a:	4613      	mov	r3, r2
 800673c:	eb42 0303 	adc.w	r3, r2, r3
 8006740:	647b      	str	r3, [r7, #68]	; 0x44
 8006742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800674a:	f7fa f963 	bl	8000a14 <__aeabi_uldivmod>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4611      	mov	r1, r2
 8006754:	4b3b      	ldr	r3, [pc, #236]	; (8006844 <UART_SetConfig+0x2d4>)
 8006756:	fba3 2301 	umull	r2, r3, r3, r1
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	2264      	movs	r2, #100	; 0x64
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	1acb      	subs	r3, r1, r3
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800676a:	4b36      	ldr	r3, [pc, #216]	; (8006844 <UART_SetConfig+0x2d4>)
 800676c:	fba3 2302 	umull	r2, r3, r3, r2
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006778:	441c      	add	r4, r3
 800677a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677e:	2200      	movs	r2, #0
 8006780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006784:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006788:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800678c:	4642      	mov	r2, r8
 800678e:	464b      	mov	r3, r9
 8006790:	1891      	adds	r1, r2, r2
 8006792:	63b9      	str	r1, [r7, #56]	; 0x38
 8006794:	415b      	adcs	r3, r3
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800679c:	4641      	mov	r1, r8
 800679e:	1851      	adds	r1, r2, r1
 80067a0:	6339      	str	r1, [r7, #48]	; 0x30
 80067a2:	4649      	mov	r1, r9
 80067a4:	414b      	adcs	r3, r1
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067b4:	4659      	mov	r1, fp
 80067b6:	00cb      	lsls	r3, r1, #3
 80067b8:	4651      	mov	r1, sl
 80067ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067be:	4651      	mov	r1, sl
 80067c0:	00ca      	lsls	r2, r1, #3
 80067c2:	4610      	mov	r0, r2
 80067c4:	4619      	mov	r1, r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	4642      	mov	r2, r8
 80067ca:	189b      	adds	r3, r3, r2
 80067cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067d0:	464b      	mov	r3, r9
 80067d2:	460a      	mov	r2, r1
 80067d4:	eb42 0303 	adc.w	r3, r2, r3
 80067d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067f0:	460b      	mov	r3, r1
 80067f2:	18db      	adds	r3, r3, r3
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f6:	4613      	mov	r3, r2
 80067f8:	eb42 0303 	adc.w	r3, r2, r3
 80067fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006802:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006806:	f7fa f905 	bl	8000a14 <__aeabi_uldivmod>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <UART_SetConfig+0x2d4>)
 8006810:	fba3 1302 	umull	r1, r3, r3, r2
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	2164      	movs	r1, #100	; 0x64
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	3332      	adds	r3, #50	; 0x32
 8006822:	4a08      	ldr	r2, [pc, #32]	; (8006844 <UART_SetConfig+0x2d4>)
 8006824:	fba2 2303 	umull	r2, r3, r2, r3
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	f003 0207 	and.w	r2, r3, #7
 800682e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4422      	add	r2, r4
 8006836:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006838:	e105      	b.n	8006a46 <UART_SetConfig+0x4d6>
 800683a:	bf00      	nop
 800683c:	40011000 	.word	0x40011000
 8006840:	40011400 	.word	0x40011400
 8006844:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800684c:	2200      	movs	r2, #0
 800684e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006852:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006856:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800685a:	4642      	mov	r2, r8
 800685c:	464b      	mov	r3, r9
 800685e:	1891      	adds	r1, r2, r2
 8006860:	6239      	str	r1, [r7, #32]
 8006862:	415b      	adcs	r3, r3
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
 8006866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800686a:	4641      	mov	r1, r8
 800686c:	1854      	adds	r4, r2, r1
 800686e:	4649      	mov	r1, r9
 8006870:	eb43 0501 	adc.w	r5, r3, r1
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	00eb      	lsls	r3, r5, #3
 800687e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006882:	00e2      	lsls	r2, r4, #3
 8006884:	4614      	mov	r4, r2
 8006886:	461d      	mov	r5, r3
 8006888:	4643      	mov	r3, r8
 800688a:	18e3      	adds	r3, r4, r3
 800688c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006890:	464b      	mov	r3, r9
 8006892:	eb45 0303 	adc.w	r3, r5, r3
 8006896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068b6:	4629      	mov	r1, r5
 80068b8:	008b      	lsls	r3, r1, #2
 80068ba:	4621      	mov	r1, r4
 80068bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c0:	4621      	mov	r1, r4
 80068c2:	008a      	lsls	r2, r1, #2
 80068c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068c8:	f7fa f8a4 	bl	8000a14 <__aeabi_uldivmod>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4b60      	ldr	r3, [pc, #384]	; (8006a54 <UART_SetConfig+0x4e4>)
 80068d2:	fba3 2302 	umull	r2, r3, r3, r2
 80068d6:	095b      	lsrs	r3, r3, #5
 80068d8:	011c      	lsls	r4, r3, #4
 80068da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	1891      	adds	r1, r2, r2
 80068f2:	61b9      	str	r1, [r7, #24]
 80068f4:	415b      	adcs	r3, r3
 80068f6:	61fb      	str	r3, [r7, #28]
 80068f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068fc:	4641      	mov	r1, r8
 80068fe:	1851      	adds	r1, r2, r1
 8006900:	6139      	str	r1, [r7, #16]
 8006902:	4649      	mov	r1, r9
 8006904:	414b      	adcs	r3, r1
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006914:	4659      	mov	r1, fp
 8006916:	00cb      	lsls	r3, r1, #3
 8006918:	4651      	mov	r1, sl
 800691a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800691e:	4651      	mov	r1, sl
 8006920:	00ca      	lsls	r2, r1, #3
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	4603      	mov	r3, r0
 8006928:	4642      	mov	r2, r8
 800692a:	189b      	adds	r3, r3, r2
 800692c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006930:	464b      	mov	r3, r9
 8006932:	460a      	mov	r2, r1
 8006934:	eb42 0303 	adc.w	r3, r2, r3
 8006938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	67bb      	str	r3, [r7, #120]	; 0x78
 8006946:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006954:	4649      	mov	r1, r9
 8006956:	008b      	lsls	r3, r1, #2
 8006958:	4641      	mov	r1, r8
 800695a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800695e:	4641      	mov	r1, r8
 8006960:	008a      	lsls	r2, r1, #2
 8006962:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006966:	f7fa f855 	bl	8000a14 <__aeabi_uldivmod>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	4b39      	ldr	r3, [pc, #228]	; (8006a54 <UART_SetConfig+0x4e4>)
 8006970:	fba3 1302 	umull	r1, r3, r3, r2
 8006974:	095b      	lsrs	r3, r3, #5
 8006976:	2164      	movs	r1, #100	; 0x64
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	3332      	adds	r3, #50	; 0x32
 8006982:	4a34      	ldr	r2, [pc, #208]	; (8006a54 <UART_SetConfig+0x4e4>)
 8006984:	fba2 2303 	umull	r2, r3, r2, r3
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800698e:	441c      	add	r4, r3
 8006990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006994:	2200      	movs	r2, #0
 8006996:	673b      	str	r3, [r7, #112]	; 0x70
 8006998:	677a      	str	r2, [r7, #116]	; 0x74
 800699a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800699e:	4642      	mov	r2, r8
 80069a0:	464b      	mov	r3, r9
 80069a2:	1891      	adds	r1, r2, r2
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	415b      	adcs	r3, r3
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069ae:	4641      	mov	r1, r8
 80069b0:	1851      	adds	r1, r2, r1
 80069b2:	6039      	str	r1, [r7, #0]
 80069b4:	4649      	mov	r1, r9
 80069b6:	414b      	adcs	r3, r1
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069c6:	4659      	mov	r1, fp
 80069c8:	00cb      	lsls	r3, r1, #3
 80069ca:	4651      	mov	r1, sl
 80069cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069d0:	4651      	mov	r1, sl
 80069d2:	00ca      	lsls	r2, r1, #3
 80069d4:	4610      	mov	r0, r2
 80069d6:	4619      	mov	r1, r3
 80069d8:	4603      	mov	r3, r0
 80069da:	4642      	mov	r2, r8
 80069dc:	189b      	adds	r3, r3, r2
 80069de:	66bb      	str	r3, [r7, #104]	; 0x68
 80069e0:	464b      	mov	r3, r9
 80069e2:	460a      	mov	r2, r1
 80069e4:	eb42 0303 	adc.w	r3, r2, r3
 80069e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	663b      	str	r3, [r7, #96]	; 0x60
 80069f4:	667a      	str	r2, [r7, #100]	; 0x64
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a02:	4649      	mov	r1, r9
 8006a04:	008b      	lsls	r3, r1, #2
 8006a06:	4641      	mov	r1, r8
 8006a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	008a      	lsls	r2, r1, #2
 8006a10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a14:	f7f9 fffe 	bl	8000a14 <__aeabi_uldivmod>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <UART_SetConfig+0x4e4>)
 8006a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	2164      	movs	r1, #100	; 0x64
 8006a26:	fb01 f303 	mul.w	r3, r1, r3
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	3332      	adds	r3, #50	; 0x32
 8006a30:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <UART_SetConfig+0x4e4>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	f003 020f 	and.w	r2, r3, #15
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4422      	add	r2, r4
 8006a44:	609a      	str	r2, [r3, #8]
}
 8006a46:	bf00      	nop
 8006a48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a52:	bf00      	nop
 8006a54:	51eb851f 	.word	0x51eb851f

08006a58 <__libc_init_array>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4d0d      	ldr	r5, [pc, #52]	; (8006a90 <__libc_init_array+0x38>)
 8006a5c:	4c0d      	ldr	r4, [pc, #52]	; (8006a94 <__libc_init_array+0x3c>)
 8006a5e:	1b64      	subs	r4, r4, r5
 8006a60:	10a4      	asrs	r4, r4, #2
 8006a62:	2600      	movs	r6, #0
 8006a64:	42a6      	cmp	r6, r4
 8006a66:	d109      	bne.n	8006a7c <__libc_init_array+0x24>
 8006a68:	4d0b      	ldr	r5, [pc, #44]	; (8006a98 <__libc_init_array+0x40>)
 8006a6a:	4c0c      	ldr	r4, [pc, #48]	; (8006a9c <__libc_init_array+0x44>)
 8006a6c:	f000 f82e 	bl	8006acc <_init>
 8006a70:	1b64      	subs	r4, r4, r5
 8006a72:	10a4      	asrs	r4, r4, #2
 8006a74:	2600      	movs	r6, #0
 8006a76:	42a6      	cmp	r6, r4
 8006a78:	d105      	bne.n	8006a86 <__libc_init_array+0x2e>
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a80:	4798      	blx	r3
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7ee      	b.n	8006a64 <__libc_init_array+0xc>
 8006a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8a:	4798      	blx	r3
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	e7f2      	b.n	8006a76 <__libc_init_array+0x1e>
 8006a90:	08007310 	.word	0x08007310
 8006a94:	08007310 	.word	0x08007310
 8006a98:	08007310 	.word	0x08007310
 8006a9c:	08007314 	.word	0x08007314

08006aa0 <memcpy>:
 8006aa0:	440a      	add	r2, r1
 8006aa2:	4291      	cmp	r1, r2
 8006aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aa8:	d100      	bne.n	8006aac <memcpy+0xc>
 8006aaa:	4770      	bx	lr
 8006aac:	b510      	push	{r4, lr}
 8006aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ab6:	4291      	cmp	r1, r2
 8006ab8:	d1f9      	bne.n	8006aae <memcpy+0xe>
 8006aba:	bd10      	pop	{r4, pc}

08006abc <memset>:
 8006abc:	4402      	add	r2, r0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d100      	bne.n	8006ac6 <memset+0xa>
 8006ac4:	4770      	bx	lr
 8006ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aca:	e7f9      	b.n	8006ac0 <memset+0x4>

08006acc <_init>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr

08006ad8 <_fini>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr
